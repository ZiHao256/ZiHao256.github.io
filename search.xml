<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>专题四设备驱动</title>
    <url>/p/4b288195.html</url>
    <content><![CDATA[<blockquote>
<p>完善例子中的字符设备程序，使之满足以下功能：</p>
<p> i.安装设备后从设备中读出字符串为你的学号；</p>
<p> ii. 设备支持每次写入字符不超过1024个，超过部分被丢弃；</p>
<p> iii. 用户可以读出最近写入到设备中的字符；</p>
<p> iv. 设备关闭前不能被多次打开；</p>
<p> v. 设备支持系统调用ioctl(int d, int req,…),req = 0x909090, 清除设备中写入的字符串;</p>
<p> 自己编写测试程序，验证以上功能</p>
<p>提交内容： 测试过程截图</p>
</blockquote>
<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h1><ul>
<li><p>操作系统中<strong>直接控制设备的程序</strong></p>
</li>
<li><p>Linux 将设备看成是一种特殊的文件（<strong>设备文件</strong>）</p>
<ul>
<li><strong>字符型</strong>设备</li>
<li>块设备</li>
</ul>
</li>
<li><p>Linux 打开读写或关闭设备文件时，在<strong>与设备驱动进行交互</strong></p>
</li>
</ul>
<h1 id="2-设计"><a href="#2-设计" class="headerlink" title="2 设计"></a>2 设计</h1><ul>
<li>用户进程请求设备服务流程图<ul>
<li><img src="E:\Hexo\Blog\source_posts\专题四设备驱动.assets\image-20210531201244104.png" alt="image-20210531201244104"></li>
<li><ol>
<li>用户进程发出<strong>IO请求</strong>，系统将处理下传到<strong>VFS</strong>上</li>
<li>VFS 通过驱动程序提供的接口将<strong>任务分配</strong>到<strong>驱动程序</strong></li>
<li>驱动程序根据需要，<strong>对设备控制器进行操作</strong></li>
<li>设备控制器去控制设备</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>设备驱动程序设计</strong><ul>
<li>VFS 管理<strong>字符设备</strong>的接口：<code>struct file_operations</code><ul>
<li>重要的接口函数：<code>open,read,write,release,ioctl</code></li>
<li><strong>接口的实现</strong>都由<strong>设备驱动</strong>提供</li>
</ul>
</li>
<li>与VFS的对接：<ul>
<li><code>register_chrdev</code></li>
<li><strong>原理</strong>：由数组chrdevs[255]管理字符设备驱动与VFS的对接接口，主设备号是他的下标</li>
</ul>
</li>
<li><strong>设备驱动</strong>与设备的对接<ul>
<li>设备就是一块内存，仅读写</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h1><ul>
<li>实验内容：<ul>
<li>实现一个用内存模拟的字符设备的驱动程序，功能<ul>
<li>用户可以向设备写入字符串</li>
<li>用户可以从设备中读出写入的字符串</li>
<li>用户可以通过系统调用<code>ioctl</code>清除设备中写入的字符串</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-2-设备驱动的实现——用模块实现"><a href="#3-2-设备驱动的实现——用模块实现" class="headerlink" title="3.2 设备驱动的实现——用模块实现"></a>3.2 设备驱动的实现——用模块实现</h2><ul>
<li>模块初始化</li>
<li>模块退出时的清理</li>
<li>open close</li>
<li>read</li>
<li>write</li>
<li>ioctl</li>
</ul>
<p>打开失败</p>
<p>读取失败</p>
<p>文件结束</p>
<p>写入失败</p>
<p>写 bytes</p>
<p>clean 失败</p>
<p>清除!</p>
<p>写设备error</p>
]]></content>
      <categories>
        <category>‘-操作系统课程设计’</category>
      </categories>
  </entry>
  <entry>
    <title>清 说</title>
    <url>/p/90d31b3c.html</url>
    <content><![CDATA[<blockquote>
<p>当你着眼于结果而非过程的时候，你就容易焦虑</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>VS2019 下 C++ 项目访问MySQL数据库</title>
    <url>/p/22861f12.html</url>
    <content><![CDATA[<p><a href="%5B(5%E6%9D%A1%E6%B6%88%E6%81%AF">参考博客</a> MySQL数据库—VS019 C++访问MySQL_买代码的小猪猪的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_49324123/article/details/116493884">https://blog.csdn.net/weixin_49324123/article/details/116493884</a>))</p>
<p>CMD 命令行窗口进入mysql数据库：</p>
<p><code>mysql -hlocalhost -uroot -p</code>:</p>
<ul>
<li><code>-hlocalhost</code>：-h表示服务器名, localhost表示本地</li>
<li><code>-uroot</code>: -u表示数据库用户名，root是MySQL默认用户名</li>
<li><code>-p</code>: 为密码</li>
</ul>
<h1 id="1-配置"><a href="#1-配置" class="headerlink" title="1 配置"></a>1 配置</h1><ul>
<li><p>项目-&gt;属性-&gt;==平台为 <code>x64</code>==</p>
</li>
<li><p>项目 -&gt; 属性 -&gt; VC++ 目录</p>
<ul>
<li>将所安装的MySQL目录下的<code>include</code> <code>lib</code>文件夹目录分别输入包含目录库目录</li>
<li><img src="E:\Hexo\Blog\source_posts\VS2019-C++-MySQL.assets\image-20210522160110645.png" alt="image-20210522160110645"></li>
</ul>
</li>
<li><p>链接器 -&gt; 输入</p>
<ul>
<li>将 MySQL 的lib目录下的<code>libmysql.lib</code>文件名输入附加依赖项，只需输入文件名</li>
<li><img src="E:\Hexo\Blog\source_posts\VS2019-C++-MySQL.assets\image-20210522160248341.png" alt="image-20210522160248341"></li>
</ul>
</li>
<li><p>将 lib 目录下的<code>libmysql.dll</code> 文件复制<code>C:\Windows\System32</code>目录下</p>
</li>
</ul>
<h1 id="2-C-中-MySQL-的基本操作"><a href="#2-C-中-MySQL-的基本操作" class="headerlink" title="2 C++ 中 MySQL 的基本操作"></a>2 C++ 中 MySQL 的基本操作</h1><p>一个对已创建的数据库的访问代码，例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span> <span class="comment">// mysql文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MYSQL mysql;    <span class="comment">//数据库句柄</span></span><br><span class="line">	MYSQL_RES* res; <span class="comment">//查询结果集</span></span><br><span class="line">	MYSQL_ROW row;  <span class="comment">//记录结构体</span></span><br><span class="line">	<span class="comment">//初始化数据库</span></span><br><span class="line">	<span class="built_in">mysql_init</span>(&amp;mysql);</span><br><span class="line">	<span class="comment">//设置字符编码</span></span><br><span class="line">	<span class="built_in">mysql_options</span>(&amp;mysql, MYSQL_SET_CHARSET_NAME, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">	<span class="comment">//连接数据库</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(&amp;mysql, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;qazedc12&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="number">3306</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;错误原因： %s\n&quot;</span>, <span class="built_in">mysql_error</span>(&amp;mysql));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;连接失败！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//查询数据</span></span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">mysql_query</span>(&amp;mysql, <span class="string">&quot;select * from students;&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ret: %d\n&quot;</span>, ret);</span><br><span class="line">	<span class="comment">//获取结果集</span></span><br><span class="line">	res = <span class="built_in">mysql_store_result</span>(&amp;mysql);</span><br><span class="line">	<span class="comment">//给ROW赋值，判断ROW是否为空，不为空就打印数据。</span></span><br><span class="line">	<span class="keyword">while</span> (row = <span class="built_in">mysql_fetch_row</span>(res))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s  &quot;</span>, row[<span class="number">0</span>]);   <span class="comment">//打印ID</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s  &quot;</span>, row[<span class="number">1</span>]);   <span class="comment">//打印姓名</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s  &quot;</span>, row[<span class="number">2</span>]);  <span class="comment">//打印班级</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s  &quot;</span>, row[<span class="number">3</span>]);  <span class="comment">//打印性别</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//释放结果集</span></span><br><span class="line">	<span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">	<span class="comment">//关闭数据库</span></span><br><span class="line">	<span class="built_in">mysql_close</span>(&amp;mysql);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从实例代码中可以了解到访问数据库的步骤：</p>
<ul>
<li><p>需要包含的<strong>头文件</strong> <code>mysql.h</code></p>
</li>
<li><p><strong>初始化</strong>数据库：</p>
<ul>
<li><strong>数据库句柄</strong> <code>MYSQL mysql</code></li>
<li>定义<strong>查询结果集</strong> <code>MYSQL_RES* res</code></li>
<li>定义<strong>记录结构体</strong> <code>MYSQL_ROW row</code></li>
<li>初始化数据库： <code>mysql_init(&amp;mysql)</code></li>
</ul>
</li>
<li><p>设置字符编码：<code>mysql_options(&amp;mysql, MYSQL_SET_CHARSET_NAME, &quot;gbk&quot;);</code></p>
</li>
<li><p>连接数据库：<code>mysql_real_connect(&amp;mysql, &quot;127.0.0.1&quot;, &quot;root&quot;, &quot;123456Aa&quot;, &quot;school&quot;, 3306, NULL, 0)</code></p>
</li>
<li><p>查询数据：<code>mysql_query(&amp;mysql, &quot;select * from students;&quot;)</code></p>
</li>
<li><p>获取结果集<code>res = mysql_store_result(&amp;mysql)</code></p>
</li>
<li><p>打印数据：<code>while(row = mysql_fetch_row(res))</code></p>
</li>
<li><p>释放结果集：<code>mysql_free_result(res)</code></p>
</li>
<li><p>关闭数据库：<code>mysql_close(&amp;mysql)</code></p>
</li>
</ul>
<h2 id="常用的连接-MySQL-和-从MySQL中取出数据的API"><a href="#常用的连接-MySQL-和-从MySQL中取出数据的API" class="headerlink" title="常用的连接 MySQL 和 从MySQL中取出数据的API"></a>常用的连接 MySQL 和 从MySQL中取出数据的API</h2><p><code>mysql_real_connect()</code></p>
<ul>
<li><strong>函数原型</strong>：<code>MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char* user, const char* password, const char* db, unsigned int port, const char* unix_socket, unsigned int client_flag)</code><ul>
<li>mysql: 现存MYSQL结构的地址</li>
<li>host : 一个主机名或IP地址</li>
<li>user: 用户ID</li>
<li>password: 用户密码</li>
<li>db: 数据库名 </li>
<li>port: 若非0，则作TCP/IP 连接用作端口号</li>
<li>unix_socket: 若非NULL，则指定套接字或应该被使用的命名管道</li>
<li>clident_flag: 通常为0</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：MYSQL* 连接句柄</li>
<li>失败：NULL</li>
</ul>
</li>
</ul>
<p><code>mysql_select_db()</code></p>
<ul>
<li><strong>函数原型</strong>：<code>int mysql_select_db(MYSQL* mysql, const char *db)</code><ul>
<li>使得由 <strong>db 指定的数据库</strong>成为在由 mysql 指定的连接上的当前数据库</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：0</li>
<li>失败：非零</li>
</ul>
</li>
</ul>
<p><code>mysql_query</code></p>
<ul>
<li>函数原型：<code>int mysql_query(MYSQL* mysql, const char*query)</code><ul>
<li>执行由 query 指向的 <strong>SQL查询语句</strong></li>
<li>必须包含一条的 SQL 语句；若允许多语句执行，字符串可包含多条由分号隔开的语句</li>
<li>不需要加终止的分号</li>
<li><strong>注意</strong>：对于包含二进制数据的查询，你必须使用mysql_real_query()而不是mysql_query()，因为二进制代码数据可能包含“\0”字符，而且，mysql_real_query()比mysql_query()更快，因为它对查询字符串调用strlen()</li>
</ul>
</li>
</ul>
<p><code>mysql_store_result</code></p>
<ul>
<li><p>函数原型：<code>MYSQL_RES *mysql_store_result(MYSQL *mysql)</code></p>
</li>
<li><p>对于成功检索了数据的每个查询（SELECT, SHOW, DESCRIBE,等），必须调用mysql_store_result 或 mysql_use_result</p>
</li>
<li><p>对于其他查询，不需要调用mysql_store_result 或</p>
</li>
<li><blockquote>
<p>mysql_store_result()将查询的全部结果读取到客户端，分配1个MYSQL_RES结构，并将结果置于该结构中。</p>
<p>如果查询未返回结果集，mysql_store_result()将返回Null指针（例如，如果查询是INSERT语句）。</p>
<p>如果读取结果集失败，mysql_store_result()还会返回Null指针。通过检查mysql_error()是否返回非空字符串，mysql_errno()是否返回非0值，或mysql_field_count()是否返回0，可以检查是否出现了错误。</p>
<p>如果未返回行，将返回空的结果集。（空结果集设置不同于作为返回值的空指针）。</p>
<p>一旦调用了mysql_store_result()并获得了不是Null指针的结果，可调用mysql_num_rows()来找出结果集中的行数。</p>
<p>可以调用mysql_fetch_row()来获取结果集中的行，或调用mysql_row_seek()和mysql_row_tell()来获取或设置结果集中的当前行位置。</p>
<p>一旦完成了对结果集的操作，必须调用mysql_free_result()。</p>
</blockquote>
</li>
</ul>
<p><code>mysql_fetch_row</code></p>
<h2 id="INSERT-、UPDATE语句"><a href="#INSERT-、UPDATE语句" class="headerlink" title="INSERT 、UPDATE语句"></a>INSERT 、UPDATE语句</h2><p><a href="https://www.cnblogs.com/fnlingnzb-learner/p/5829556.htmls">参考博客</a></p>
]]></content>
      <categories>
        <category>-SQL</category>
      </categories>
  </entry>
  <entry>
    <title>我用什么才能留住你</title>
    <url>/p/d1fbce69.html</url>
    <content><![CDATA[<h1 id="我用什么才能留住你"><a href="#我用什么才能留住你" class="headerlink" title="我用什么才能留住你"></a>我用什么才能留住你</h1><p><a href="https://zh.wikipedia.org/wiki/%E8%B1%AA%E5%B0%94%E8%B5%AB%C2%B7%E8%B7%AF%E6%98%93%E6%96%AF%C2%B7%E5%8D%9A%E5%B0%94%E8%B5%AB%E6%96%AF">博尔赫斯</a></p>
<p>我给你瘦落的街道<br>绝望的落日<br>荒郊的月亮<br>我给你一个久久地望着孤月的人的悲哀</p>
<p>我给你我已死去的祖辈<br>后人们用大理石祭奠的先魂<br>我父亲的父亲<br>阵亡于布宜诺斯艾利斯的边境<br>两颗子弹射穿了他的胸膛<br>死的时候蓄着胡子<br>尸体被士兵们用牛皮裹起<br>我母亲的祖父<br>那年才二十四岁<br>在秘鲁率领三百人冲锋<br>如今都成了消失的马背上的亡魂</p>
<p>我给你<strong>我的书中所能蕴含的一切悟力</strong><br>以及<strong>我生活中所能有的男子气概和幽默</strong><br>我给你<strong>一个从未有过信仰的人的忠诚</strong></p>
<p>我给你<strong>我设法保全的我自己的核心</strong><br>不营字造句，不和梦交易<br>不被时间、欢乐和逆境触动的核心。</p>
<p>我给你早在你出生前多年的一个傍晚看到的一朵黄玫瑰的记忆<br>我给你<strong>关于你生命的诠释</strong><br>关于你自己的理论<br>你的真实而惊人的存在</p>
<p>我给你<strong>我的寂寞</strong><br><strong>我的黑暗</strong><br><strong>我心的饥渴</strong><br>我试图<strong>用困惑、危险、失败来打动你</strong></p>
]]></content>
      <categories>
        <category>-彼方</category>
      </categories>
  </entry>
  <entry>
    <title>创建进程、子进程和进程间通信</title>
    <url>/p/a3ec7244.html</url>
    <content><![CDATA[<h1 id="fork-方法"><a href="#fork-方法" class="headerlink" title="fork() 方法"></a>fork() 方法</h1><p>fork 原型：</p>
<ul>
<li><code>pid_t fork(void)</code></li>
</ul>
<p>fork的定义：</p>
<p>父进程在调用 fork 派生子进程，实际上相当于创建了一个进程拷贝</p>
<ul>
<li>调用一次 fork() 会返回两次<ul>
<li>一次：在调用该方法的进程中返回 <strong>子进程的 id</strong></li>
<li>二次：在子进程中返回 0</li>
<li>若在调用该方法时返回 -1 则表示调用失败</li>
</ul>
</li>
</ul>
<ul>
<li><p>根据 fork 的返回值判断当前进程是父进程还是子进程：</p>
<ul>
<li><pre><code class="c">#include&lt;stdio.h&gt;
#include&lt;unistd.h&gt;
int main()&#123;

    pid_t pid = fork();
    if(pid == 0)&#123;
        printf(&quot;child\n&quot;);
    &#125;
    else&#123;
        printf(&quot;father\n&quot;);
    &#125;
    
    return 0;
    
&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
<h1 id="进程间通信-IPC"><a href="#进程间通信-IPC" class="headerlink" title="进程间通信 IPC"></a>进程间通信 IPC</h1><p><code>Inter-Process Communication</code>: 多个进程之间相互沟通的一种方法</p>
<p>管道、命名管道、消息队列、信号、信号量、共享内存、内存映射、套接字</p>
<h2 id="管道-PIPE"><a href="#管道-PIPE" class="headerlink" title="管道 PIPE"></a>管道 PIPE</h2><ul>
<li>管道：用于进程间通信 的一段共享内存<ul>
<li>创建管道的进程：管道服务器</li>
<li>连接到的一个管道的进程：管道客户机</li>
</ul>
</li>
<li>一个进程，在向管道写入数据后，另一个进程就可以从管道的另一端读取</li>
</ul>
<p>管道的特点：</p>
<ul>
<li>单向通信：数据只能向一个方向流动，<ul>
<li>需要双方交流时，创建两个管道</li>
</ul>
</li>
<li>只能用于具有亲缘关系的进程：<ul>
<li>fork 或者 exec</li>
</ul>
</li>
<li>管道只能在本地计算机使用，不能用于网络间的通信</li>
</ul>
<h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><ul>
<li>函数原型：<code>int pipe(int fd[2]);</code><ul>
<li>返回0 成功，返回-1出错</li>
</ul>
</li>
<li>fa参数返回两个<strong>文件描述符：</strong><ul>
<li>fd[0] 指向管道的<strong>读端</strong></li>
<li>fd[1]指向管道的<strong>写端</strong></li>
</ul>
</li>
</ul>
<p><strong>实现进程间通信的步骤：</strong></p>
<ul>
<li>父进程创建 管道，得到两个描述符，指向管道的两端</li>
<li>父进程 fork 子进程，子进程也有两个文件描述符指向同一个管道两端</li>
<li>一个进程关闭写端，另一个进程关闭读端，即可实现通信<ul>
<li> 使用<code>close()</code> 关闭fd[]</li>
</ul>
</li>
<li>关闭读端的进程使用<code>write(fd[1], )</code> 来写入管道信息</li>
<li>关闭写端的进程使用<code>read(fd[0], ) </code>来读取管道中的信息</li>
</ul>
]]></content>
      <categories>
        <category>-Linux</category>
      </categories>
  </entry>
  <entry>
    <title>专题三内核模块</title>
    <url>/p/69488089.html</url>
    <content><![CDATA[<blockquote>
<p><strong>实验要求：</strong></p>
<p><strong>题目一</strong> 编写一个内核模块； 编译该模块； 加载、卸载该模块；</p>
<p><strong>题目二</strong> 用<strong>内核模块</strong>的方式为系统添加一个系统调用 具体要求同专题二</p>
<p><strong>提交内容</strong>：</p>
<p>​        <strong>内核模块加载/卸载截图</strong></p>
<p><strong>评分标准</strong>： 至少完成题目一（60-80分） 自主完成题目二（90-100分）</p>
</blockquote>
<h1 id="1-内核模块概念"><a href="#1-内核模块概念" class="headerlink" title="1 内核模块概念"></a>1 内核模块概念</h1><ul>
<li>是一段可以 动态加入内核，并且成为内核一部分的代码</li>
<li>优点：<ul>
<li>通过动态加载内核模块，使得在运行过程中扩展内核的功能</li>
<li>减小内核映像大小，增加系统灵活性</li>
<li>只需要修改内核，而不必重新编译整个内核</li>
</ul>
</li>
</ul>
<h1 id="2-内核模块相关命令"><a href="#2-内核模块相关命令" class="headerlink" title="2 内核模块相关命令"></a>2 内核模块相关命令</h1><ul>
<li>加载内核模块：<ul>
<li><code>#insmod module_name</code></li>
</ul>
</li>
<li>卸载内核模块：<ul>
<li><code>#rmmod module_name</code></li>
<li>或者 <code>#modprobe -r module_name</code></li>
</ul>
</li>
<li>查看系统已经加载的模块：<ul>
<li><code>#lsmod</code></li>
</ul>
</li>
<li>查看系统已经加载的模块信息：<ul>
<li><code>#modinfo module_name</code></li>
</ul>
</li>
</ul>
<h1 id="3-内核模块的编写，例子"><a href="#3-内核模块的编写，例子" class="headerlink" title="3 内核模块的编写，例子"></a>3 内核模块的编写，例子</h1><p>内核模块源代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/init.h&gt;</span>			<span class="comment">//for module_init()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/module.h&gt;</span>		<span class="comment">//mustbe included</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/kernel.h&gt;</span>		<span class="comment">//for printk()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//模块入口函数</span></span><br><span class="line">    printk(<span class="string">&quot;Hello module\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//模块退出函数</span></span><br><span class="line">    printk(<span class="string">&quot;Goodbye module\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;CHUHUA&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="内核模块说明"><a href="#内核模块说明" class="headerlink" title="内核模块说明"></a>内核模块说明</h2><ul>
<li><code>hello_init()</code>: 模块入口函数<ul>
<li>由<code>module_init()</code>宏指定</li>
<li>在模块被加载时被调用</li>
<li>返回值为0：成功，非零则失败</li>
</ul>
</li>
<li><code>hello_exit()</code>: 模块退出函数<ul>
<li>由<code>module_exit()</code>宏指定</li>
<li>在模块被卸载时被调用</li>
<li>作用：清完成资源的清理，被调用完毕后，模块就被卸载了</li>
</ul>
</li>
<li>一个模块至少有 入口 和 退出函数</li>
<li>宏<code>MODULE_LICENSE(&quot;GLP&quot;)</code>: 设置模块版权信息</li>
<li>宏<code>MODULE_DESCRIPTION()</code>: 描述模块的用途</li>
<li>宏``</li>
</ul>
<h1 id="4-通过-module-进行内核添加系统调用"><a href="#4-通过-module-进行内核添加系统调用" class="headerlink" title="4  通过 module 进行内核添加系统调用"></a>4  通过 module 进行内核添加系统调用</h1><p><a href="%5B(5%E6%9D%A1%E6%B6%88%E6%81%AF">参考博客</a> Linux/Ubuntu18.04 下添加系统调用的两种方法 (内核编译法｜模块添加)_Egqawkq的博客-CSDN博客](<a href="https://blog.csdn.net/egqawkq/article/details/88970390">https://blog.csdn.net/egqawkq/article/details/88970390</a>))</p>
]]></content>
      <categories>
        <category>-操作系统课程设计</category>
      </categories>
  </entry>
  <entry>
    <title>专题二系统调用</title>
    <url>/p/6e049acd.html</url>
    <content><![CDATA[<blockquote>
<p><strong>实验要求：</strong></p>
<p> 为Linux内核增加一个<strong>系统调用</strong>，并编写<strong>用户进程的程序</strong>来测试。</p>
<p>要求<strong>该系统调用</strong>能够完成<strong>以下功能</strong>：</p>
<pre><code> (1) 该系统调用有1个整型参数，接收输入自己的学号；

 (2) 若参数为奇数，则返回自己学号的最后5位。如你的学号为16130120101 ，则返回20101；

 (3) 若参数为偶数，则返回自己的学号的最后6位。如你的学号为16130120102 ，则返回120102 。
</code></pre>
<p>提交内容为：</p>
<p>  <strong>截图1</strong>： 运行结果</p>
<p>  <strong>截图2</strong>：源代码</p>
</blockquote>
<h1 id="1-知识点-什么是系统调用"><a href="#1-知识点-什么是系统调用" class="headerlink" title="1 [知识点] 什么是系统调用"></a>1 [知识点] 什么是系统调用</h1><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>Linux 的<strong>运行空间</strong>：<strong>内核空间</strong> 和 <strong>用户空间</strong></p>
<ul>
<li>逻辑上相互隔离</li>
<li>用户进程通常情况下 不允许 访问<strong>内核数据</strong>，也无法使<strong>用内核函数</strong></li>
<li>内核 提供了 <strong>用户进程与内核进行交互的一组接口</strong>：用户进程可以通过这组接口来获得操作系统内核提供的服务</li>
</ul>
<h2 id="系统调用的作用"><a href="#系统调用的作用" class="headerlink" title="系统调用的作用"></a>系统调用的作用</h2><ul>
<li>提供<strong>用户模式</strong>的进程和硬件设备的<strong>接口</strong></li>
<li>保证<strong>系统的稳定和安全</strong></li>
<li>实现<strong>多任务和虚拟内存</strong></li>
</ul>
<h2 id="系统调用的分类"><a href="#系统调用的分类" class="headerlink" title="系统调用的分类"></a>系统调用的分类</h2><ul>
<li>控制硬件<ul>
<li>硬件资源 与 用户空间的抽象接口</li>
<li>读写文件：write/read</li>
</ul>
</li>
<li>进程管理<ul>
<li>保证系统中的进程能以<strong>多任务在虚拟内存环境下运行</strong></li>
<li>fork，clone，<code>execve</code></li>
</ul>
</li>
<li>设置系统状态或读取内核数据<br>* </li>
</ul>
<h2 id="系统调用和-API-接口"><a href="#系统调用和-API-接口" class="headerlink" title="系统调用和 API 接口"></a>系统调用和 API 接口</h2><ul>
<li>一般，应用程序通过 <strong>应用程序 API</strong>而不是 直接通过系统调用编程</li>
<li>应用程序使用的 应用程序API，不需要和内核提供的 系统调用 一一对应<ul>
<li>一个API 接口可以 用一个或多个 系统调用实现</li>
</ul>
</li>
</ul>
<h2 id="系统调用和系统命令"><a href="#系统调用和系统命令" class="headerlink" title="系统调用和系统命令"></a>系统调用和系统命令</h2><ul>
<li><strong>系统命令</strong>比<strong>应用程序接口</strong>更高一层</li>
<li>每一个系统命令都是一个可执行程序<ul>
<li>ls</li>
</ul>
</li>
<li><strong>系统命令</strong>的实现调用了系统调用</li>
<li><code>strace ls</code>可以 查看系统命令所调用的系统调用</li>
</ul>
<h2 id="系统调用与内核函数"><a href="#系统调用与内核函数" class="headerlink" title="系统调用与内核函数"></a>系统调用与内核函数</h2><ul>
<li><strong>内核函数</strong>只是在内核中实现的函数</li>
<li><strong>系统调用</strong> 是用户进入内核的接口层，本身不是内核函数，是由内核函数实现的</li>
<li>进入内核后，不同的系统调用 找到 各自对应的内核函数<ul>
<li>这些内核函数：系统调用的“服务例程”</li>
<li>Linux 系统调用 对应的 内核例程全部以”sys_” 开头：<code>sys_fork</code> </li>
</ul>
</li>
</ul>
<h1 id="2-知识点-系统调用实现原理"><a href="#2-知识点-系统调用实现原理" class="headerlink" title="2 [知识点] 系统调用实现原理"></a>2 [知识点] 系统调用实现原理</h1><h2 id="系统调用处理程序"><a href="#系统调用处理程序" class="headerlink" title="系统调用处理程序"></a>系统调用处理程序</h2><ul>
<li>当用户态的进程 调用一个系统调用时，CPU 切换到内核态，并且执行一个内核函数</li>
<li><strong>系统调用处理程序</strong>执行的操作：<ul>
<li>在内核栈 保存大多数寄存器的内容</li>
<li>调用所谓系统调用的服务例程相应 的 C函数处理系统调用</li>
<li>通过 <code>ret_from_sys_call</code> 函数从系统调用返回</li>
</ul>
</li>
</ul>
<h2 id="服务例程"><a href="#服务例程" class="headerlink" title="服务例程"></a>服务例程</h2><ul>
<li><p>Linux 的<strong>系统调用</strong>有200多个，相应的<strong>服务例程</strong>也是</p>
</li>
<li><p>定义<code>_syscall0</code> - <code>_syscall5</code>六个<strong>宏</strong>：对相应的例程进行封装</p>
<ul>
<li>每个宏名字 后缀的数字：系统调用 所用的参数个数（系统调用号除外）</li>
</ul>
</li>
<li><p>每个宏：需要<code>2+2*n</code> 个参数</p>
<ul>
<li>n : 系统调用的参数个数</li>
<li>一对参数：系统调用的返回值类型和名字</li>
<li>n对参数：系统调用参数的类型和名字</li>
</ul>
</li>
<li><p>例如：write() 例程的封装：</p>
<ul>
<li><code>_syscall3(int, write, int, fd, const char*, buf, unsigned int, count)</code></li>
</ul>
</li>
<li><p>一般，系统调用于用户程序中，内核态也可以同样调用封装了的系统调用：</p>
<ul>
<li>区别：用户态进行系统调用时，需要进行用户态堆栈到内核态堆栈的切换</li>
</ul>
</li>
</ul>
<h2 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h2><p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515141634577-1621059396007.png" alt="image-20210515141634577"></p>
<ul>
<li><p>首先：<strong>软中断</strong>：通过软件指令触发而非外设引发的中断</p>
<ul>
<li>时编程人员开发的一种异常</li>
<li>具体是调用<code>int $0x80</code>汇编指令，产生向量为 0x80 的编程异常</li>
</ul>
</li>
<li><p>然后：内核进行中断服务的处理，并执行<code>system_call</code>函数</p>
<ul>
<li>进入系统调用入口的公共处理函数，在这个函数中会按照寄存器<code>eax</code>中的内容识别对应的系统调用</li>
</ul>
</li>
<li><p>进入系统内核后，使用<code>system_call_table</code>和<code>eax</code> 查到真正的系统调用，并执行相应的内核例程</p>
</li>
<li><p>最后：从系统调用中返回后，最终执行<code>syscall_exit</code>，并调用<code>resume_userspace</code>返回用户空间</p>
</li>
</ul>
<p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515142513417-1621059914414.png" alt="image-20210515142513417"></p>
<p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515142702100-1621060023561.png" alt="image-20210515142702100"></p>
<ul>
<li>从用户角度向内核：<ul>
<li>系统命令</li>
<li>编程接口</li>
<li>系统调用</li>
<li>内核函数</li>
</ul>
</li>
</ul>
<h2 id="系统调用实现"><a href="#系统调用实现" class="headerlink" title="系统调用实现"></a>系统调用实现</h2><ul>
<li><p>Linux 中，每个系统调用被赋予一个<code>系统调用号</code></p>
</li>
<li><p>通过系统调用号可以关联系统调用</p>
</li>
<li><p>内核记录系统调用表中所有已注册的系统调用列表，存储于<code>sys_call_table</code></p>
</li>
<li></li>
<li><p><code>linux-版本号/arch/x86/include/asm/unsted_32.h</code>：定义了所有<strong>系统调用的编号</strong></p>
</li>
<li><p>总个数：<code>NR_syscalls</code></p>
</li>
<li><p>系统调用号是固定的</p>
</li>
</ul>
<p>1.通过 <strong>异常</strong> 使进程切换到内核模式<code>int 80h</code>指令完成</p>
<p>​    系统调用中断的入口<code>syscall(系统调用调用号)</code></p>
<p>2.<strong>系统调用跳转表</strong>：<code>linux/arch/x86/kernel/syscall_table_32.S</code>，并调用相应的函数</p>
<h1 id="3-添加用户自定义的系统调用"><a href="#3-添加用户自定义的系统调用" class="headerlink" title="3 添加用户自定义的系统调用"></a>3 添加用户自定义的系统调用</h1><blockquote>
<p>要求<strong>该系统调用</strong>能够完成<strong>以下功能</strong>：</p>
<pre><code> (1) 该系统调用有1个整型参数，接收输入自己的学号；

 (2) 若参数为奇数，则返回自己学号的最后5位。如你的学号为16130120101 ，则返回20101；

 (3) 若参数为偶数，则返回自己的学号的最后6位。如你的学号为16130120102 ，则返回120102 。
</code></pre>
</blockquote>
<blockquote>
<p>修改系统调用表文件-&gt; 修改系统调用号文件-&gt;中增加系统调用声明-&gt;添加实现</p>
</blockquote>
<ul>
<li>==需要特别注意的是==：long 型至多表示10位十进制数，而学号是11位，需要使用long long接收参数</li>
</ul>
<p><strong>步骤一</strong>：打开 系统调用号表<code>syscall_64.tbl</code>文件，并添加自定义的系统调用</p>
<ul>
<li>命令：<code>sudo gedit arch/x86/entry/syscalls/syscall_64.tbl</code></li>
<li><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515210516396-1621083917785.png" alt="image-20210515210516396"></li>
</ul>
<p><strong>步骤二</strong>：在内核函数声明文件<code>syscalls.h</code>中添加系统调用的内核函数声明：</p>
<ul>
<li><p><code>sudo gedit include/linux/syscalls.h</code></p>
</li>
<li><p>在最后 函数声明：</p>
<ul>
<li><p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515210608651-1621083970352.png" alt="image-20210515210608651"></p>
</li>
<li><p>```c<br>/* My Own syscall */<br>asmlinkage long sys_mysyscall(long long number);<br>#endif</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**步骤三**：在内核函数定义文件&#96;sys.c&#96;文件中添加函数定义：</span><br><span class="line"></span><br><span class="line">* &#96;sudo gedit kernel&#x2F;sys.c&#96;</span><br><span class="line"></span><br><span class="line">* ![image-20210515210709408](E:\Hexo\Blog\source\_posts\专题二系统调用.assets\image-20210515210709408-1621084030357.png)</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;c</span><br><span class="line">  &#x2F;* My Own syscall *&#x2F;</span><br><span class="line">  SYSCALL_DEFINE1(mysyscall, long long, number)&#123;</span><br><span class="line">  	long ans&#x3D;0;</span><br><span class="line">  	if(number%2 &#x3D;&#x3D; 0 )&#123;</span><br><span class="line">  		ans &#x3D; number%1000000;</span><br><span class="line">  	&#125;</span><br><span class="line">  	else&#123;</span><br><span class="line">  		ans &#x3D; number%100000;</span><br><span class="line">  	&#125;</span><br><span class="line">  </span><br><span class="line">  	return ans;</span><br><span class="line">  &#125;</span><br><span class="line">  #endif &#x2F;* CONFIG_COMPAT *&#x2F;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>接下来</strong>，==重新编译内核==</p>
<ul>
<li><strong>净化内核</strong>：<ul>
<li><code>make mrproper</code><ul>
<li>删除所有编译生成文件、内核配置文件等</li>
</ul>
</li>
<li><code>make clean</code><ul>
<li>删除前一次编译过程残留的数据</li>
</ul>
</li>
</ul>
</li>
<li><strong>重新编译安装内核</strong>：：<del>因为 make 太久而在结束的时候忘记 安装操作 的憨憨是我</del><ul>
<li><code>make menuconfig</code></li>
<li><code>make </code></li>
<li><code>make modules_install</code></li>
<li><code>make install</code></li>
</ul>
</li>
<li><strong>最后重启</strong><code>reboot</code></li>
</ul>
<p><strong>接着</strong>可以验证添加的系统调用是否成功：</p>
<h1 id="4-验证添加的系统调用"><a href="#4-验证添加的系统调用" class="headerlink" title="4 验证添加的系统调用"></a>4 验证添加的系统调用</h1><p>写一段调用系统调用的程序：</p>
<p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515210743109-1621084064449.png" alt="image-20210515210743109"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">//443:long long sys_mysyscall(long long)</span></span><br><span class="line">    	<span class="keyword">long</span> <span class="keyword">long</span> number;</span><br><span class="line">    	<span class="keyword">long</span> ans;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;输入学号：\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;number);</span><br><span class="line">        ans = syscall(<span class="number">443</span>,number);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mysyscall return %ld\n&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>gcc -o test.c test</code></p>
</li>
<li><p><code>./test</code></p>
</li>
<li><p><strong>结果</strong>：</p>
<ul>
<li><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515210811389-1621084092512.png" alt="image-20210515210811389"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>-操作系统课程设计</category>
      </categories>
  </entry>
  <entry>
    <title>课后习题11.14</title>
    <url>/p/e7a2a7fa.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>-OOP</category>
      </categories>
  </entry>
  <entry>
    <title>专题一内核编译</title>
    <url>/p/d1d6ca89.html</url>
    <content><![CDATA[<p>[toc]</p>
<ul>
<li><blockquote>
<p> <strong>作业要求：</strong></p>
<p> 完成本专题教学内容中的验收测试题并提交验收材料。</p>
<p> 验收材料要求:</p>
<p> <strong>新内核引导成功前</strong>：</p>
<p> \1. 执行命令：<code>uname –a</code>,提交<strong>截屏结果1</strong></p>
<p> <img src="E:\Hexo\Blog\source_posts\专题一内核编译\image-20210514211226158-1620997948493.png" alt="image-20210514211226158"></p>
<p> <strong>新内核引导成功后</strong>：</p>
<p> \2. 执行命令：<code>uname –a</code>,提交<strong>截屏结果2</strong></p>
<p> <img src="E:\Hexo\Blog\source_posts\专题一内核编译.assets\image-20210514222101971-1621002063317.png" alt="image-20210514222101971"></p>
<p> \3. 进入目录/boot，执行命令：ls -l,提交<strong>截屏结果3</strong></p>
<p> <img src="E:\Hexo\Blog\source_posts\专题一内核编译.assets\image-20210514222213871.png" alt="image-20210514222213871"></p>
</blockquote>
</li>
<li><p><strong>==tips:==</strong>  在创建虚拟机时，最好分配 50 GB 以上从磁盘空间，四个以上内核</p>
</li>
<li><p><strong>最重要的是</strong>：分配 4 GB 以上的内存，防止在内存中死锁</p>
</li>
<li><p><strong>最最重要的是</strong>：新版本的 Linux 内核<code>make install</code>安装后，<strong>不再需要</strong>手动引导内核！！！即不再需要配置 grub</p>
</li>
</ul>
<h1 id="1-知识点-什么是-Linux-内核"><a href="#1-知识点-什么是-Linux-内核" class="headerlink" title="1 [知识点]什么是 Linux 内核"></a>1 [知识点]什么是 Linux 内核</h1><ul>
<li><p><strong>操作系统的结构</strong></p>
<ul>
<li><p><img src="E:\4th_term\OS课设\课题一\专题一.assets\image-20210511210840223.png" alt="image-20210511210840223"></p>
</li>
<li><p>操作系统：Kernel + Shell</p>
</li>
</ul>
</li>
<li><p><strong>Kernel的组成和功能</strong>：</p>
<ul>
<li><img src="E:\4th_term\OS课设\课题一\专题一.assets\image-20210511211233011.png" alt="image-20210511211233011"></li>
</ul>
</li>
<li><p>Linux <strong>发行版本</strong>和<strong>内核版本</strong>之间的关系：</p>
<ul>
<li>例如教学视频中：<code>Ubuntu10.04</code> = <code>Kernel2.6.30</code> + <code>SHELL</code> + <code>USERS APPLICATIONS</code></li>
<li>两者独立</li>
</ul>
</li>
<li><p>本次课程设计我选择的<strong>发行版本</strong>是 <code>Ubuntu20.04.20</code></p>
<ul>
<li>其<strong>内核版本</strong>：用命令<code>uname -r</code><ul>
<li><code>5.8.0-50-generic</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="2-实验-从内核源码-到-内核镜像-Kernel-Image"><a href="#2-实验-从内核源码-到-内核镜像-Kernel-Image" class="headerlink" title="2 [实验] 从内核源码 到 内核镜像(Kernel Image)"></a>2 [实验] 从内核源码 到 内核镜像(Kernel Image)</h1><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>当前Linux内核版本为<code>5.8.0-50</code></p>
<p>从<a href="https://www.kernel.org/">内核版本</a>官网下载另一个内核版本:</p>
<ul>
<li>版本号尾号为偶数的是stable版的，所以我选择<code>5.12.2</code></li>
</ul>
<p><em>tips:</em> 直接点击屎黄色按钮下载很慢，可以将下载链接复制至自己喜欢的下载软件下载<code>IDM</code></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>实验要求</strong>： 利用<code>make menuconfig</code>的配置功能，配置并编译信息中带有自己<strong>学号加姓名</strong>的内核</p>
<h3 id="1-安装相应的软件包"><a href="#1-安装相应的软件包" class="headerlink" title="1 安装相应的软件包"></a>1 安装相应的软件包</h3><p><strong>步骤</strong></p>
<ul>
<li><p>手动或终端解压<code>package</code></p>
</li>
<li><p><code>.deb</code> 离线安装包</p>
<ul>
<li>老版本的发行版在线安装比较麻烦</li>
</ul>
</li>
<li><p><code>sudo bash ./INSTALL.sh</code>: 执行安装脚本</p>
</li>
</ul>
<blockquote>
<p><strong>遇到的问题</strong>：相关依赖下载安装</p>
<ol start="0">
<li><p>可以先更换国内源</p>
<ol>
<li>在 <em>软件和更新</em> 选择 <code>最佳的服务器</code></li>
<li><img src="E:\4th_term\OS课设\课题一\专题一.assets\image-20210512163243691-1620808365518.png" alt="image-20210512163243691" style="zoom:50%;" /></li>
</ol>
</li>
<li><p>在执行 INSTALL.sh 时，许多警告，缺少依赖等</p>
</li>
</ol>
<ol>
<li>百度找到 Ubuntu20.04 编译内核所需要的依赖</li>
<li>首更新<code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code></li>
<li><code>sudo apt-get install libelf-dev</code></li>
<li><code>sudo apt-get install libncurses5-dev libssl-dev</code></li>
<li><code>sudo apt-get install build-essential openssl</code></li>
<li><code>sudo apt-get install libidn11-dev libidn11</code></li>
<li><code>sudo apt-get install zlibc minizip</code></li>
<li><code>sudo apt-get install bison</code></li>
<li><code>sudo apt-get install flex</code></li>
<li><code>sudo apt-get install pkg-config</code><ol start="11">
<li><code>sudo apt-get install libssl-dev</code></li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="2-拷贝源码包至-usr-src并解压"><a href="#2-拷贝源码包至-usr-src并解压" class="headerlink" title="2 拷贝源码包至/usr/src并解压"></a>2 拷贝源码包至<code>/usr/src</code>并解压</h3><ul>
<li>需要用 root 用户权限将源码包拷入标准路径<code>/usr/src</code></li>
<li>解压命令 <code>sudo tar xfv xxx </code><ul>
<li>解压七万多个文件(.c .h文件)</li>
</ul>
</li>
</ul>
<blockquote>
<p>遇到的问题：</p>
<p>需要重新安装VMware tools</p>
<ol>
<li>首先将压缩包移动至 usr/local`</li>
<li>然后使用<code>tar -zxvf xxx </code>解压</li>
<li>进入vmware-tools-distrib, 使用<code>sudo ./vmware-install.pl</code>命令安装</li>
<li>手动启动<code>vmware-user</code></li>
</ol>
</blockquote>
<h3 id="3-进入源码所在目录"><a href="#3-进入源码所在目录" class="headerlink" title="3 进入源码所在目录"></a>3 进入源码所在目录</h3><ul>
<li>按照功能分</li>
<li>Makefile</li>
</ul>
<h3 id="4-执行一系列-make-指令"><a href="#4-执行一系列-make-指令" class="headerlink" title="4 执行一系列 make 指令"></a>4 执行一系列 make 指令</h3><blockquote>
<p>==tips:== 可以使用多核进行编译<code>make -j x   </code>: x为核心数，不能超过自己的核心数，省略则使用最多数</p>
</blockquote>
<ul>
<li><strong>步骤一：</strong><code>make menuconfig -j x</code><ul>
<li>进入<strong>配置菜单</strong><ul>
<li><code>[ ]</code> : 编译入内核</li>
<li><code>[*]</code>：可选</li>
<li><code>[M]</code>： 编译为内核模块</li>
</ul>
</li>
<li><strong>必须</strong>改：在 <code>General setup</code> ——&gt;<code>Local version</code>：加入<code>学号加姓名</code></li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>遇到的错误：</strong></p>
<p><code>Your display is too small to run Menuconfig! It must be at least 19 lines by 80 columns. make[1]: *** [scripts/kconfig/Makefile:34：menuconfig] 错误 1 make: *** [Makefile:602：menuconfig] 错误 2</code></p>
<ul>
<li>第一个问题似乎是终端窗口太小，最大化试试</li>
<li>最大化之后再将比例缩小即可</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<ul>
<li><strong>步骤二：</strong> <code>make -j x</code> (x为分配的内核数)：<code>.c</code>编译为<code>.o</code><ul>
<li>一到两小时<ul>
<li>可以用多内核减少一些时间</li>
</ul>
</li>
<li><strong>快照</strong>：保存当前系统的状态，随时可以恢复载入改状态</li>
<li>编译finished后，目录下产生：<code>vmlinux.o</code> 目标文件和<code>vmlinux</code> 可执行文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>make之后报错：<code>scripts/sign-file.c:25:10: fatal error: openssl/opensslv.h: 没有那个文件或目录    25 | #include &lt;openssl/opensslv.h&gt;       |          ^~~~~~~~~~~~~~~~~~~~ compilation terminated.</code></p>
<ul>
<li>解决：<code>sudo apt-get install libssl-dev</code></li>
<li>应提前安装</li>
</ul>
</blockquote>
<ul>
<li><strong>步骤三</strong>：<code>make modules_install -j x</code><ul>
<li>编译为动态链接库<code>.ko</code><ul>
<li><code>driver</code></li>
<li><code>fs</code></li>
<li><code>sound</code></li>
<li><code>lib</code></li>
</ul>
</li>
<li>将<code>.ko</code>（类似于动态库）移动至标准目录</li>
</ul>
</li>
</ul>
<blockquote>
<p>make modules_install报错：</p>
<p><code>sed: 无法读取 modules.order: 没有那个文件或目录 make: *** [Makefile:1471：_modinst_] 错误 2</code></p>
<ul>
<li>问题解决：<ul>
<li><code>make[1]: *** 没有规则可制作目标“debian/canonical-certs.pem”由“certs/x509_certificate_list” 需求。 停止。 make: *** [Makefile:1851：certs] 错误 2</code><ul>
<li>solution :<ul>
<li><code>vi .config</code></li>
<li><code>/</code>搜索<code>CONFIG_SYSTEM_TRUSTED_KEYS</code>，将里面内容清空</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><strong>步骤四</strong>：<code>make install -j x</code><ul>
<li>执行<code>.sh</code>脚本：将内核镜像移动至 <code>boot</code> 引导目录<ul>
<li>用引导程序将内核镜像引导起来</li>
</ul>
</li>
<li>执行完命令后：<ul>
<li>三个以 <code>学号姓名</code> 为后缀的文件是引导所需要的</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Warning: </p>
<p><code>dpkg: warning: version &#39;5.12.2mazihao_19030500024~old&#39; has bad syntax: invalid character in version number dpkg: warning: version &#39;5.12.2mazihao_19030500024~old&#39; has bad syntax: invalid character in version number</code></p>
<ul>
<li>solution: </li>
</ul>
</blockquote>
<ul>
<li>注意：新版本（我的是5.12.2）的Linux内核，不需要手动引导内核，<ul>
<li>make install 之后直接重启即可</li>
</ul>
</li>
</ul>
<h1 id="3-知识点-GNU-make和makefile"><a href="#3-知识点-GNU-make和makefile" class="headerlink" title="3 [知识点] GNU make和makefile"></a>3 [知识点] GNU make和makefile</h1><h2 id="什么是-make"><a href="#什么是-make" class="headerlink" title="什么是 make"></a>什么是 make</h2><ul>
<li><code>make menuconfig</code>: 用命令行模式<strong>配置内核</strong></li>
<li><code>make</code>: 编译<strong>内核</strong>和<strong>模块</strong></li>
<li><code>make modules_install</code>: 安装<strong>模块</strong><ul>
<li>在<code>/lib/modules/内核版本</code> 对应的目录下，建立文件夹并把模块文件放入</li>
</ul>
</li>
<li><code>make install</code>: 安装<strong>内核</strong><ul>
<li>即拷贝入<code>/boot</code>目录下</li>
</ul>
</li>
</ul>
<h2 id="什么是makefile"><a href="#什么是makefile" class="headerlink" title="什么是makefile"></a>什么是makefile</h2><ul>
<li>告诉 make 命令如何去编译</li>
</ul>
<blockquote>
<p><strong>makefile</strong>文件保存了 <strong>编译器和连接器的参数选项</strong>, 还表述了<strong>所有源文件之间的关系(<strong>源代码文件需要的</strong>特定的包含文件</strong>,可执行文件要求包含的目标文件模块及库等).</p>
<p><strong>创建程序(make程序</strong>) 首先读取makefile文件, 然后再激活编译器,汇编器,资源编译器和连接器以便产生最后的输出, 最后输出并生成的通常是可执行文件.</p>
<p>创建程序利用内置的推理规则来激活编译器,以便通过对特定<code>CPP</code>文件的编译来产生特定的OBJ文件. </p>
</blockquote>
<h2 id="makefile-规则"><a href="#makefile-规则" class="headerlink" title="makefile 规则"></a>makefile 规则</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target ... :prerequisites ...</span><br><span class="line">		recipe</span><br><span class="line">		...</span><br><span class="line">		...</span><br></pre></td></tr></table></figure>



<h2 id="Makefile-demo-使用规则"><a href="#Makefile-demo-使用规则" class="headerlink" title="Makefile demo 使用规则"></a>Makefile demo 使用规则</h2><h2 id="试读内核源码的Makefile"><a href="#试读内核源码的Makefile" class="headerlink" title="试读内核源码的Makefile"></a>试读内核源码的Makefile</h2><h1 id="4-知识点-操作系统启动"><a href="#4-知识点-操作系统启动" class="headerlink" title="4 [知识点] 操作系统启动"></a>4 [知识点] 操作系统启动</h1><h2 id="操作系统-引导过程"><a href="#操作系统-引导过程" class="headerlink" title="操作系统 引导过程"></a>操作系统 引导过程</h2><ol>
<li>电脑开机后， 启动 <strong>BIOS</strong> , BIOS <strong>自检</strong></li>
<li>自检后，BIOS 找到硬盘上的<strong>主引导记录</strong> <strong>MBR</strong></li>
<li><strong>MBR</strong> 读取<strong>硬盘分区表 DPT</strong> ，找到活动分区中的<strong>分区引导记录 PBR</strong>，将控制权交给 <strong>PBR</strong></li>
<li><strong>PBR</strong> 搜索活动分区中的<strong>启动管理器</strong> <strong>bootmgr</strong> （Linux下是<strong>Grub</strong>，grub.conf , windows下是），将控制权交给 bootmgr</li>
<li><strong>bootmgr</strong> 寻找 boot 文件夹中的 <strong>BCD 文件（启动配置数据）</strong></li>
<li>找到 BCD 后，<strong>bootmgr</strong> 首先从 BCD 中读取启动管理器 <strong>bootmgr</strong> 菜单信息，在显示器上显示多操作系统选择画面</li>
<li>如果存在多个操作系统并且系统设置的等待时间不是0，就会显示多个操作系统。若无，则直接进入</li>
<li>进入系统后，<strong>bootmgr</strong> 会读取 BCD 中win7系统所在的盘的<code>winload.exe</code> 文件，将控制器交给</li>
<li>winload.exe 加载win7 内核、硬件、服务等，之后加载桌面等信息，从而启动整个系统</li>
</ol>
<h2 id="启动管理程序-grub"><a href="#启动管理程序-grub" class="headerlink" title="启动管理程序 grub"></a>启动管理程序 grub</h2><ul>
<li><code>grub.conf</code><ul>
<li>需要改配置正确才能启动</li>
</ul>
</li>
</ul>
<h1 id="5-实验-Linux-内核的引导"><a href="#5-实验-Linux-内核的引导" class="headerlink" title="5 [实验] Linux 内核的引导"></a>5 [实验] Linux 内核的引导</h1><p>引导前：</p>
<p><img src="E:\4th_term\OS课设\课题一\专题一内核编译.assets\image-20210514102943927.png" alt="image-20210514102943927"></p>
<blockquote>
<p>内核 make install成功后</p>
</blockquote>
<p>==<strong>注意：</strong>==</p>
<p>新版本的<code>Ubuntu</code> 不再需要手动引导内核（知道真相的我眼泪流下来，需要将内存分配至4GB以上）</p>
<p>然后，<code>make install</code>之后，直接<code>reboot</code></p>
<p><del>首先：将内核作为引导，数字改为自己编译的版本号：</del></p>
<ul>
<li><del><code>sudo update-initramfs -c -k 5.12.2mzh19030500024</code></del></li>
</ul>
<p><del>然后，更新 grub：</del></p>
<ul>
<li><del><code>sudo update-grub</code></del></li>
</ul>
<p><del>之后，修改 grub文件：</del></p>
<ul>
<li><del><code>sudo gedit /etc/default/grub</code></del></li>
<li><del><img src="https://img2018.cnblogs.com/i-beta/1653979/201911/1653979-20191112233306483-1954394758.png" alt="img"></del></li>
</ul>
<p><del>然后，执行<code>sudo update-grub</code></del></p>
<p><del>最后重启，选择<strong>advanced</strong>，选择编译好的内核</del></p>
<ul>
<li><del>步骤一：<code>sudo mkinitramfs -o /boot/initrd.img-5.12.2</code></del></li>
<li><del>步骤二：<code>sudo update-initramfs -c -k 5.12.2</code></del><ul>
<li><del>在boot目录下产生<code>init</code></del></li>
</ul>
</li>
<li><del>步骤三：<code>sudo update-grub2 </code></del><ul>
<li><del>自动修改系统引导配置，产生grub.cfg启动文件。</del></li>
<li><del>后grub.cfg文件中增加了新内核的启动项</del></li>
</ul>
</li>
<li><del>步骤三：<code>reboot</code></del> </li>
<li><del>选择新版本内核</del></li>
</ul>
]]></content>
      <categories>
        <category>-操作系统课程设计</category>
      </categories>
  </entry>
  <entry>
    <title>第二部分</title>
    <url>/p/77fbe329.html</url>
    <content><![CDATA[<p>该部分将建立数据库，创建第一个模型module, 并主要关注Django提供的自动生成的管理页面</p>
<h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><ul>
<li><code>mysite/settings.py</code>: 包含了项目配置的python模块</li>
<li>一般，这个配置文件使用 <code>SQLite</code> 作为默认数据库</li>
</ul>
<blockquote>
<p><strong>更换 数据库</strong> ——[官方文档](<a href="https://docs.djangoproject.com/zh-hans/3.2/intro/tutorial02/">编写你的第一个 Django 应用，第 2 部分 | Django 文档 | Django (djangoproject.com)</a>)</p>
<p>如果你想使用其他数据库，你需要安装合适的 <a href="https://docs.djangoproject.com/zh-hans/3.2/topics/install/#database-installation">database bindings</a> ，然后改变设置文件中 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-DATABASES"><code>DATABASES</code></a> <code>&#39;default&#39;</code> 项目中的一些键值：</p>
<ul>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-DATABASE-ENGINE"><code>ENGINE</code></a> – 可选值有 <code>&#39;django.db.backends.sqlite3&#39;</code>，<code>&#39;django.db.backends.postgresql&#39;</code>，<code>&#39;django.db.backends.mysql&#39;</code>，或 <code>&#39;django.db.backends.oracle&#39;</code>。其它 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/databases/#third-party-notes">可用后端</a>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-NAME"><code>NAME</code></a> – 数据库的名称。如果你使用 SQLite，数据库将是你电脑上的一个文件，在这种情况下，<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-NAME"><code>NAME</code></a> 应该是此文件完整的绝对路径，包括文件名。默认值 <code>BASE_DIR / &#39;db.sqlite3&#39;</code> 将把数据库文件储存在项目的根目录。</li>
</ul>
<p>如果你不使用 SQLite，则必须添加一些额外设置，比如 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-USER"><code>USER</code></a> 、 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-PASSWORD"><code>PASSWORD</code></a> 、 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-HOST"><code>HOST</code></a> 等等。想了解更多数据库设置方面的内容，请看文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-DATABASES"><code>DATABASES</code></a> 。</p>
</blockquote>
<ul>
<li>在编辑<code>settings.py</code>文件前，需要先设置<code>TIME_ZONE</code>为自己的时区<ul>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-TIME_ZONE">TIME_ZONE</a></li>
<li>中国时区：<code>CN</code></li>
</ul>
</li>
</ul>
<ul>
<li><p><code>setting.py</code>头部<code>INSTALLED_APPS</code>设置项：包括了会在项目中启动的所有应用</p>
<ul>
<li><blockquote>
<p>应用能在多个项目中使用，你也可以打包并且发布应用，让别人使用它们</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>INSTALLED_APPS</code>默认包括了Django自带应用：</p>
<ul>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/admin/#module-django.contrib.admin"><code>django.contrib.admin</code></a> – <strong>管理员站点</strong>， 你很快就会使用它。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/auth/#module-django.contrib.auth"><code>django.contrib.auth</code></a> – <strong>认证授权系统</strong>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/contenttypes/#module-django.contrib.contenttypes"><code>django.contrib.contenttypes</code></a> – <strong>内容类型框架</strong>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/http/sessions/#module-django.contrib.sessions"><code>django.contrib.sessions</code></a> – <strong>会话框架</strong>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/messages/#module-django.contrib.messages"><code>django.contrib.messages</code></a> – <strong>消息框架</strong>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/staticfiles/#module-django.contrib.staticfiles"><code>django.contrib.staticfiles</code></a> – <strong>管理静态文件的框架</strong>。</li>
</ul>
</li>
<li><p>默认开启的应用至少需要一个数据库表，因此需在使用他们之前，在数据库中创建一些表：</p>
<ul>
<li>```python<br>py manage.py migrate<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * &#96;migrate&#96;命令:  检查 [&#96;INSTALLED_APPS&#96;](https:&#x2F;&#x2F;docs.djangoproject.com&#x2F;zh-hans&#x2F;3.2&#x2F;ref&#x2F;settings&#x2F;#std:setting-INSTALLED_APPS) 设置，为其中的每个应用创建需要的数据表，至于具体会创建什么，这取决于 &#96;mysite&#x2F;settings.py&#96; 设置文件和每个应用的**数据库迁移文件**</span><br><span class="line">    * 该命令会将所**执行**的每个**迁移**操作在终端显示</span><br><span class="line"></span><br><span class="line">## 创建模型</span><br><span class="line"></span><br><span class="line">在Django中写一个数据库驱动的 Web 应用的**第一步**：&#x3D;&#x3D;定义模型&#x3D;&#x3D;——即**数据库结构设计和附加的其他元数据**</span><br><span class="line"></span><br><span class="line">&gt; 模型是真实数据的简单明确的描述</span><br><span class="line">&gt;</span><br><span class="line">&gt; 包含了存储的数据所必要的字段和行为</span><br><span class="line"></span><br><span class="line">在该应用中，将建立两个模型：Question和Choice</span><br><span class="line"></span><br><span class="line">* Question模型：包括两个字段：问题描述和发布时间</span><br><span class="line">* Choice模型：有两个字段，选项描述和当前得票数。每个Choice属于一个问题</span><br><span class="line"></span><br><span class="line">这些概念都可以通过 Python 类来描述：</span><br><span class="line"></span><br><span class="line">编辑&#96;polls&#x2F;models.py&#96;:</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;python</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Question(models.Model):</span><br><span class="line">    question_text &#x3D; models.CharField(max_length&#x3D;200)</span><br><span class="line">    pub_date &#x3D; models.DateTimeField(&#39;date published&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Choice(models.Model):</span><br><span class="line">    question &#x3D; models.ForeignKey(Question, on_delete&#x3D;models.CASCADE)</span><br><span class="line">    choice_text &#x3D; models.CharField(max_length&#x3D;200)</span><br><span class="line">    votes &#x3D; models.IntegerField(default&#x3D;0)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>每个模型都被表示为<code>django.db.models.Model</code>类的子类</p>
<ul>
<li>子类内有许多类变量：表示模型里的一个<strong>数据库字段</strong></li>
<li>每个字段都是<code>Field</code>类的实例：将告诉Django每个字段要处理的数据类型<ul>
<li>字符字段：<code>CharField</code></li>
<li>日期时间字段：<code>DateTimeField</code></li>
<li>整型字段：<code>IntegerField</code></li>
<li>更多<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/models/fields/#django.db.models.Field"><code>Field</code></a> </li>
</ul>
</li>
<li>每个Field类的实例名也是字段名</li>
</ul>
</li>
<li><p>定义一些 Field 类实例 需要参数：</p>
<ul>
<li><code>CharField</code> 需要<code>max_length</code>参数：用于定义数据库结构，也用于验证数据</li>
</ul>
</li>
<li><p>注意，使用<code>ForeignKey</code>定义关系</p>
<ul>
<li>这将告诉Django，每一个 Choice 对象都关联到一个 Question 对象</li>
</ul>
</li>
</ul>
<h2 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h2><ul>
<li>创建模型的代码给予了 Django 许多信息：<ul>
<li>为应用创建数据库 schema：生成<code>CTEATE TABLE</code>语句</li>
<li>创建可以与Question和Choice对象 进行交互的<strong>Python数据库API</strong></li>
</ul>
</li>
</ul>
<p><strong>首先</strong>，将 polls 应用安装至Django项目中</p>
<ul>
<li><p>为了工程中包含该应用，在<code>settings.py</code>的 <code>INSTALLED_APPS</code> 中添加设置</p>
<ul>
<li><p><code>PollsConfig</code> 类 写在<code>polls/apps.py</code>中，因此点式路径：<code>polls.apps.PollsConfig</code></p>
</li>
<li><p>在<code>settings.py</code>的<code>INSTALLED_APPS</code> 子项添加点式路径</p>
<ul>
<li>```python<br>INSTALLED_APPS = [<pre><code>&#39;polls.apps.PollsConfig&#39;,
&#39;django.contrib.admin&#39;,
&#39;django.contrib.auth&#39;,
&#39;django.contrib.contenttypes&#39;,
&#39;django.contrib.sessions&#39;,
&#39;django.contrib.messages&#39;,
&#39;django.contrib.staticfiles&#39;,
</code></pre>
]<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">现在项目中包含了polls应用</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**接着**，运行&#96;py manage.py makemigrations polls&#96;</span><br><span class="line"></span><br><span class="line">* **终端输出**：</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;</span><br><span class="line">    Migrations for &#39;polls&#39;:</span><br><span class="line">      polls&#x2F;migrations&#x2F;0001_initial.py</span><br><span class="line">        - Create model Question</span><br><span class="line">        - Create model Choice</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><code>makemigrations</code> : Django 检测对模型文件<code>polls/models.py</code>的修改，并且将修改的部分<strong>存储</strong>为一次 <strong>迁移</strong></p>
<ul>
<li><strong>迁移</strong>是 Django 对于<strong>模型</strong>定义（也就是你的数据库结构）的<strong>变化的储存形式</strong> - 它们其实也只是一些你磁盘上的文件</li>
</ul>
</li>
<li><p><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/django-admin/#django-admin-migrate"><code>migrate</code></a>: 自动<strong>执行数据库迁移</strong> 并 <strong>同步管理数据库结构</strong>的命令。</p>
<ul>
<li>迁移命令执行的SQL语句：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/django-admin/#django-admin-sqlmigrate"><code>sqlmigrate</code></a>命令接收一个迁移的名称，然后返回对应的SQL<ul>
<li><code>py manage.py sqlmigrate polls 0001</code></li>
</ul>
</li>
</ul>
</li>
<li><p>输出是迁移所对应的SQL语句</p>
<ul>
<li>表名是由应用名和模型名的小写形式连接而成</li>
<li>主键被自动创建</li>
</ul>
</li>
</ul>
<p><strong>然后</strong>，运行migrate命令，将在数据库里创建 新定义的模型的数据表：<code>py manage.py migrate</code></p>
<ul>
<li><p>该 migrate 命令会选中未执行过的迁移并应用在数据库中</p>
</li>
<li><blockquote>
<p>迁移是非常强大的功能，它能让你在开发过程中持续的改变数据库结构而不需要重新删除和创建表 - 它专注于使数据库平滑升级而不会丢失数据</p>
</blockquote>
</li>
<li><p>注意：改变模型需要三步：</p>
<ul>
<li>编辑 models 文件，改变模型</li>
<li>运行 <code>makemigrations</code> 命令生成迁移</li>
<li>运行 migrate 命令 应用迁移</li>
</ul>
</li>
</ul>
<h2 id="初试-API"><a href="#初试-API" class="headerlink" title="初试 API"></a>初试 API</h2><p><strong>首先</strong>，进入 交互式 Python 命令行，以使用Django创建的各种 API</p>
<ul>
<li><code>py manage.py shell</code><ul>
<li>manage 会设置<code>DJANGO_SETTINGS_MODULE</code> 环境变量，根据<code>settings</code>文件设置包的导入路径</li>
</ul>
</li>
</ul>
<p><strong>然后</strong>，尝试 <a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/queries/">数据库 API</a> </p>
<ul>
<li><p>```<br>from polls.models import Choice, Question  # Import the model classes we just wrote.<br>from django.utils import timezone<br>q = Question(question_text=”What’s new?”, pub_date=timezone.now())<br>q.save()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 编辑模型代码，可以更了解模型对象的细节：给模型增加&#96;__str__()&#96;方法</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;</span><br><span class="line">    from django.db import models</span><br><span class="line">    </span><br><span class="line">    class Question(models.Model):</span><br><span class="line">        # ...</span><br><span class="line">        def __str__(self):</span><br><span class="line">            return self.question_text</span><br><span class="line">    </span><br><span class="line">    class Choice(models.Model):</span><br><span class="line">        # ...</span><br><span class="line">        def __str__(self):</span><br><span class="line">            return self.choice_text</span><br></pre></td></tr></table></figure></li>
<li><p>```<br>Question.objects.filter(id=1)<br>q = Question.objects.get(pk=1)<br>q.choice_set.all()<br>q.choice_set.create(choice_text=’Not much’, votes=0)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Django 管理页面</span><br><span class="line"></span><br><span class="line">&gt; 为你的员工或客户生成一个用户添加，修改和删除内容的后台是一项缺乏创造性和乏味的工作。因此，Django 全自动地根据模型创建后台界面。</span><br><span class="line"></span><br><span class="line">管理页面默认开启</span><br><span class="line"></span><br><span class="line">### 创建管理员账号</span><br><span class="line"></span><br><span class="line">* &#96;py manage.py createsuperuser&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 启动开发服务器</span><br><span class="line"></span><br><span class="line">* &#96;py manage.py runserver&#96;</span><br><span class="line">* 访问：&#96;http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;admin&#x2F;&#96;</span><br><span class="line"></span><br><span class="line">### 管理站点页面</span><br><span class="line"></span><br><span class="line">* 进入管理页面的索引页后，可编辑的&#96;Groups&#96;和&#96;Users&#96; 是Django 开发的认证框架</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 向管理页面加入投票应用</span><br><span class="line"></span><br><span class="line">* 需要在管理文件&#96;polls&#x2F;admin.py&#96;加入应用的模型</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;</span><br><span class="line">    from django.contrib import admin</span><br><span class="line">    </span><br><span class="line">    from .models import Question</span><br><span class="line">    </span><br><span class="line">    admin.site.register(Question)</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>-Django</category>
      </categories>
      <tags>
        <tag>-Python</tag>
      </tags>
  </entry>
  <entry>
    <title>编写第一个 Django 应用，第一部分</title>
    <url>/p/497f9043.html</url>
    <content><![CDATA[<h1 id="编写第一个-Django-应用，第一部分"><a href="#编写第一个-Django-应用，第一部分" class="headerlink" title="编写第一个 Django 应用，第一部分"></a>编写第一个 Django 应用，第一部分</h1><p>[官方文档](<a href="https://docs.djangoproject.com/zh-hans/3.2/intro/overview/">初识 Django | Django 文档 | Django (djangoproject.com)</a>)</p>
<ul>
<li><p>目标：创建一个基本的投票应用</p>
<ul>
<li>让人们 查看和投票 的<strong>公共站点</strong></li>
<li>让开发者能 添加、修改、删除投票的<strong>管理站点</strong></li>
</ul>
</li>
<li><p>环境：</p>
<ul>
<li><code>pycharm 2019</code></li>
<li><code>python 3.6</code></li>
<li><code>Django 3.2.1</code>支持Python 和后续版本</li>
</ul>
</li>
</ul>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul>
<li><p>初始化设置：</p>
<ul>
<li>生成Django项目需要的 设置项集合：数据库配置、Django 配置和应用程序配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite(项目名)</span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意的是，须提前将django-admin加入环境变量，因为使用的是 <code>Pycharm Professional</code> 所以可以一键创建Django项目</li>
</ul>
</li>
<li><p><code>startproject</code> 所创建的：</p>
<ul>
<li>![image-20210507200938455](E:\LearningNotes\python\编写第一个 Django 应用，第一部分.assets\image-20210507200938455-1620389380924.png)</li>
</ul>
</li>
<li><p>根据官方文档：</p>
<ul>
<li>最外层<code>mysite</code>：是我们项目的容器</li>
<li><code>manage.py</code>: 可以让我们用各种方式管理项目的命令行工具</li>
<li>内层<code>mysite</code>：是一个纯Python包。当需要引用其内部的内容时的包名</li>
<li><code>mysite/__init__.py</code>: 空文件，告知Python这个目录是一个Python包</li>
<li><code>mysite/settings.py</code>: Django 项目的配置文件</li>
<li><code>mysite/urls.py</code>: 项目的 URL 声明，类似于网站的目录</li>
<li><code>mysite/asgi.py</code>: 作为你的项目的运行在 ASGI 兼容的 Web 服务器上的入口</li>
<li><code>mysite/wsgi.py</code>: 作为你的项目的运行在 WSGI 兼容的Web服务器上的入口</li>
</ul>
</li>
</ul>
<h2 id="用于开发的简易服务器"><a href="#用于开发的简易服务器" class="headerlink" title="用于开发的简易服务器"></a>用于开发的简易服务器</h2><ul>
<li><p>测试项目是否创建成功：在项目容器目录运行<code>py manage.py runserver</code></p>
</li>
<li><p>出现报错：</p>
<ul>
<li>```<br>Traceback (most recent call last):<br>  File “manage.py”, line 22, in <module><pre><code>main()
</code></pre>
  File “manage.py”, line 18, in main<pre><code>execute_from_command_line(sys.argv)
</code></pre>
  File “E:\Django_tests\mysite\venv\lib\site-packages\django\core\management_<em>init</em>_.py”, line 419,<br> in execute_from_command_line<pre><code>utility.execute()
</code></pre>
  File “E:\Django_tests\mysite\venv\lib\site-packages\django\core\management_<em>init</em>_.py”, line 363,<br> in execute<pre><code>settings.INSTALLED_APPS
</code></pre>
  File “E:\Django_tests\mysite\venv\lib\site-packages\django\conf_<em>init_</em>.py”, line 82, in <strong>getatt<br>r</strong><pre><code>self._setup(name)
</code></pre>
  File “E:\Django_tests\mysite\venv\lib\site-packages\django\conf_<em>init_</em>.py”, line 69, in _setup<pre><code>self._wrapped = Settings(settings_module)
</code></pre>
  File “E:\Django_tests\mysite\venv\lib\site-packages\django\conf_<em>init_</em>.py”, line 170, in _<em>init</em><br>_<pre><code>mod = importlib.import_module(self.SETTINGS_MODULE)
</code></pre>
  File “C:\Users\Light\AppData\Local\Programs\Python\Python36\lib\importlib_<em>init</em>_.py”, line 126,<br>in import_module<pre><code>return _bootstrap._gcd_import(name[level:], package, level)
</code></pre>
  File “<frozen importlib._bootstrap>“, line 994, in _gcd_import<br>  File “<frozen importlib._bootstrap>“, line 971, in _find_and_load<br>  File “<frozen importlib._bootstrap>“, line 955, in _find_and_load_unlocked<br>  File “<frozen importlib._bootstrap>“, line 665, in _load_unlocked<br>  File “<frozen importlib._bootstrap_external>“, line 678, in exec_module<br>  File “<frozen importlib._bootstrap>“, line 219, in _call_with_frames_removed<br>  File “E:\Django_tests\mysite\mysite\settings.py”, line 57, in <module><pre><code>&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)]
</code></pre>
NameError: name ‘os’ is not defined<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 分析：&#96;xxxx\settings.py&#96; &#96;os not defined&#96;, 可能是该文件未导入os模块导入后成功</span><br><span class="line"></span><br><span class="line">* solution：导入后成功</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;</span><br><span class="line">    Watching for file changes with StatReloader</span><br><span class="line">    Performing system checks...</span><br><span class="line">    </span><br><span class="line">    System check identified no issues (0 silenced).</span><br><span class="line">    </span><br><span class="line">    You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">    Run &#39;python manage.py migrate&#39; to apply them.</span><br><span class="line">    May 07, 2021 - 20:20:20</span><br><span class="line">    Django version 3.2.2, using settings &#39;mysite.settings&#39;</span><br><span class="line">    Starting development server at http:&#x2F;&#x2F;127.0.0.1:8000&#x2F;</span><br><span class="line">    Quit the server with CTRL-BREAK.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>至此，我们启动了Django自带的 <strong>用于开发的简易服务器</strong></p>
<ul>
<li><p>用纯python写的轻量级Web服务器</p>
</li>
<li><p>注意：</p>
<ul>
<li><blockquote>
<p><strong>千万不要</strong> 将这个服务器用于和生产环境相关的任何地方。这个服务器只是为了开发而设计的。(我们在 Web 框架方面是专家，在 Web 服务器方面并不是。)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>更换端口：<ul>
<li>默认runserver命令会将服务器设置为监听本机内部 IP 的8000端口</li>
<li>若想更换端口：<ul>
<li><code>py manage.py runserver 8080</code></li>
</ul>
</li>
<li>若想修改服务器监听的 IP：<ul>
<li><code>py manage.py runserver 0:8080</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="创建投票应用"><a href="#创建投票应用" class="headerlink" title="创建投票应用"></a>创建投票应用</h2><ul>
<li><p>开发环境——项目配置初始化成功</p>
</li>
<li><blockquote>
<p> Django 中，每一个应用都是一个Python包</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>项目 VS 应用</strong></p>
<p>项目和应用有什么区别？</p>
<p><strong>应用</strong>是一个专门做某件事的<strong>网络应用程序</strong>——比如博客系统，或者公共记录的数据库，或者小型的投票程序。</p>
<p><strong>项目</strong>则是<strong>一个网站使用的配置和应用的集合</strong>。项目可以包含很多个应用。应用可以被很多个项目使用。</p>
</blockquote>
</li>
<li><p>应用可以存放任何Python路径中定义的路径</p>
</li>
<li><p>在此项目，须在<code>manage.py</code>同级目录下创建应用</p>
<ul>
<li>可以作为顶级模块导入，而不是mysite的子模块</li>
</ul>
</li>
<li><p>创建应用：</p>
<ul>
<li>```<br>py manage.py startapp polls<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 命令会创建polls目录：包含了应用的全部内容</span><br><span class="line"></span><br><span class="line">  * ![image-20210507203223797](E:\LearningNotes\python\编写第一个 Django 应用，第一部分.assets\image-20210507203223797-1620390751727.png)</span><br><span class="line"></span><br><span class="line">## 编写第一个视图</span><br><span class="line"></span><br><span class="line">首先：</span><br><span class="line"></span><br><span class="line">* 在&#96;polls&#x2F;views.py&#96;：</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;python</span><br><span class="line">    from django.http import HttpResponse</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    def index(request):</span><br><span class="line">        return HttpResponse(&quot;Hello, world. You&#39;re at the polls index.&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>其次：</p>
</li>
<li><p>需要将一个 <code>URL</code> 映射到它</p>
<ul>
<li>因此需要<code>URLconf</code></li>
</ul>
</li>
<li><p>在polls目录里创建<code>urls.py</code>文件，并输入：</p>
<ul>
<li>```python<br>from django.urls import pathfrom . import viewsurlpatterns = [<pre><code>path(&#39;&#39;, views.index, name=&#39;index&#39;),
</code></pre>
]<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">然后：</span><br><span class="line"></span><br><span class="line">* 在根&#96;URLconf&#96;文件中，指定刚刚创建的 &#96;polls.urls&#96;模块</span><br><span class="line"></span><br><span class="line">  * 在&#96;mysite&#x2F;urls.py&#96;中的&#96;urlpatterns&#96;列表中插入&#96;include()&#96;</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;python</span><br><span class="line">    from django.contrib import admin</span><br><span class="line">    from django.urls import include, path</span><br><span class="line">    </span><br><span class="line">    urlpatterns &#x3D; [</span><br><span class="line">        path(&#39;polls&#x2F;&#39;, include(&#39;polls.urls&#39;)),</span><br><span class="line">        path(&#39;admin&#x2F;&#39;, admin.site.urls),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>函数 include 允许引用其他<code>URLconfs</code>, 当包括其他<code>URL</code>模式时，就使用该函数</p>
<ul>
<li><p>当 Django 遇到该函数时，会截断与此项匹配的 URL 部分，将剩余的字符串发送到<code>URLconf</code>一共进一步处理</p>
</li>
<li><blockquote>
<p>我们设计 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/urls/#django.urls.include"><code>include()</code></a> 的理念是使其可以即插即用。因为投票应用有它自己的 URLconf( <code>polls/urls.py</code> )，他们能够被放在 “/polls/“ ， “/fun_polls/“ ，”/content/polls/“，或者其他任何路径下，这个应用都能够正常工作。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>现在已经将index视图 天加入了根URLconf</p>
</li>
</ul>
<p>最后，</p>
<ul>
<li><p>验证是否能正常工作：<code>py manage.py runserver</code></p>
</li>
<li><p>访问：<code>http://localhost:8000/polls/ </code> </p>
<ul>
<li>成功</li>
</ul>
</li>
</ul>
<h2 id="函数path（）"><a href="#函数path（）" class="headerlink" title="函数path（）"></a>函数path（）</h2><p>函数的四个参数：</p>
<ul>
<li><p>必须参数：<code>route</code> <code>view</code></p>
</li>
<li><p>可选参数：<code>kwargs</code> <code>name</code></p>
</li>
<li><p><code>route</code>: 一个匹配 URL 的准则（类似于正则表达式）</p>
<ul>
<li><blockquote>
<p>当 Django 响应一个<strong>请求request</strong>时，它会从 <code>urlpatterns</code> 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。</p>
</blockquote>
</li>
<li><blockquote>
<p>这些准则不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 <code>https://www.example.com/myapp/</code> 时，它会尝试匹配 <code>myapp/</code> 。处理请求 <code>https://www.example.com/myapp/?page=3</code> 时，也只会尝试匹配 <code>myapp/</code>。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>view</code>: 当Django 找到一个匹配的准则，会调用这个特定的视图函数，并传入一个<code>HttpRequest</code>对象作为第一个参数</p>
<ul>
<li>被“捕获”的参数以<strong>关键字参数</strong>的形式传入</li>
</ul>
</li>
<li><p><code>kwargs</code>: 任意关键字参数 可以作为一个字典传递给目标视图函数，本此项目不会使用</p>
</li>
<li><p><code>name</code>: </p>
<ul>
<li><blockquote>
<p>为 URL 取名能使你在 Django 的<strong>任意地方唯一地引用</strong>它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个 URL 模式。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>-Django</category>
      </categories>
      <tags>
        <tag>-Python</tag>
      </tags>
  </entry>
  <entry>
    <title>17 网络编程</title>
    <url>/p/527606cb.html</url>
    <content><![CDATA[<h1 id="17-网络编程"><a href="#17-网络编程" class="headerlink" title="17 网络编程"></a>17 网络编程</h1><p>[toc]</p>
<ul>
<li><p>使得<strong>程序相互通信</strong></p>
</li>
<li><p>演示使用<code>net</code> 包进行<code>TCP</code> 和<code>UDP</code> 通信</p>
</li>
</ul>
<h1 id="互联网协议介绍"><a href="#互联网协议介绍" class="headerlink" title="互联网协议介绍"></a>互联网协议介绍</h1><ul>
<li>互联网的核心是<strong>一系列协议</strong>，总称为<code>互联网协议</code> <strong>(Internet Protocol Suite)</strong> <ul>
<li>这一系列协议规定了电脑如何<strong>连接和组网</strong></li>
</ul>
</li>
</ul>
<h2 id="互联网分层模型"><a href="#互联网分层模型" class="headerlink" title="互联网分层模型"></a>互联网分层模型</h2><ul>
<li><p>互联网的逻辑实现：</p>
<ul>
<li>![osi七层模型](E:\LearningNotes\Go\17 网络编程.assets\osi.png)</li>
</ul>
</li>
<li><p>互联网按照不同的模型划分为不同的分层</p>
</li>
<li><p>无论按照什么模型划分：越往上的层越 靠近<strong>用户</strong>，越往下的层越 靠近<strong>硬件</strong></p>
</li>
</ul>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><ul>
<li>电脑与外界互联网通信<ul>
<li>先把电脑连接网络：使用 双绞线、光纤、无线电波 等方式</li>
</ul>
</li>
<li><strong>实物理层</strong>：把电脑连接起来的物理手段</li>
<li>主要是<strong>规定了网络的一些电气特性</strong>，作用是负责传送 0 和 1 的电信号</li>
</ul>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><ul>
<li>功能：规定解读电信号的方式，确定了物理层传输的 0 和 1 的分组方式及代表意义<ul>
<li>例如：多少电信号算一组？每个信号位有何意义</li>
</ul>
</li>
<li><strong>以太网 (Ethernet) 的协议</strong>占据了主导地位</li>
</ul>
<ul>
<li>以太网 规定，<strong>一组电信号</strong>构成一个<strong>数据包</strong>，叫做 <code>帧Frame</code> <ul>
<li><strong>一个帧</strong>：<code>标头Head</code> 和 <code>数据Data</code> 组成</li>
<li><strong>标头 ：</strong>包含数据包的一些<strong>说明项</strong>：如发送者、接收者、数据类型等<ul>
<li>长度：固定 18 字节</li>
</ul>
</li>
<li><strong>数据 ：</strong>数据包的<strong>具体内容</strong><ul>
<li>长度：最短 46 字节，最长 1500 字节</li>
</ul>
</li>
<li>若数据很长，必须分割成多个帧发送</li>
</ul>
</li>
</ul>
<ul>
<li>标识 发送者 和 接收者：</li>
<li>以太网协议 规定：连入网络的所有设备 必须具有 网卡接口<ul>
<li>数据包必须是从一块网卡，传送到另一块网卡</li>
<li>网卡地址，就是数据包的发送地址和接收地址，这就是<strong>MAC地址</strong></li>
</ul>
</li>
<li>每块网卡拥有独一无二的<strong>MAC地址</strong>，长度是 48 个二进制位，通常用 12 个十六进制数表示<ul>
<li>前 6 个十六进制数 是厂商编号</li>
<li>后 6 个是该厂商的网卡流水号</li>
</ul>
</li>
<li>MAC 地址：定位网卡和数据包的路径</li>
</ul>
<ul>
<li>通过 ARP 协议获取接收方的 MAC地址，</li>
<li>以太网采用<code>广播broadcasting</code> 发送方式<ul>
<li>向本网络内所有计算机都发送数据包</li>
<li>每台计算机读取这个包的 <code>标头</code> ，找到接收方的MAC地址，</li>
<li>然后与自身的MAC地址相比较，若相同就接受这个包；否则就丢弃</li>
</ul>
</li>
</ul>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><ul>
<li>根据以太网协议，可以依靠 <strong>MAC 地址</strong> 向外发送数据</li>
<li>以太网采用广播方式发送数据包 重大缺陷：<ul>
<li>所有成员人手一包，不仅效率低</li>
<li>而且发送的数据只能局限在 发送者 所在的子网络</li>
</ul>
</li>
</ul>
<ul>
<li>区别哪些 MAC 地址属于同一个子网络<ul>
<li>若是同一个字网络，就采用广播方式发送</li>
<li>否则就采用<code>路由</code> 方式发送</li>
</ul>
</li>
<li>针对该问题，导致了网络层的诞生，</li>
<li>网络层的作用：引进一套新的地址，区分不同的计算机是否属于同一个子网络<ul>
<li>这套地址 即网络地址，简称 网址</li>
</ul>
</li>
</ul>
<ul>
<li>至此，每台计算机拥有两种地址：<ul>
<li><strong>MAC 地址</strong>：将数据包 送到该子网络（网络地址确定的）中的目标网卡<ul>
<li>绑定于网卡</li>
</ul>
</li>
<li><strong>网络地址</strong>：帮助我们确定计算机所在的子网络<ul>
<li>网络管理员分配的</li>
</ul>
</li>
<li>两者无任何联系</li>
</ul>
</li>
<li>先处理网络地址，在处理MAC地址</li>
</ul>
<ul>
<li><strong>IP 协议</strong>：规定网络地址的协议<ul>
<li>所定义的地址：IP 地址</li>
</ul>
</li>
<li>目前，广泛采用 <code>IPv4</code> , IP 协议第四版<ul>
<li>网络地址：32 个二进制位组成</li>
<li>习惯用<strong>分成四段</strong>的十进制数表示 IP 地址：从<code>0.0.0.0到255.255.255.255</code></li>
</ul>
</li>
</ul>
<ul>
<li>IP 数据包：根据 IP 协议发送的数据<ul>
<li><strong>标头</strong>：版本、长度、IP 地址<ul>
<li>长度：20 - 60字节</li>
</ul>
</li>
<li><strong>数据：</strong>IP 数据包的具体内容</li>
<li>整个数据包的总长度最大为 65535 字节</li>
</ul>
</li>
</ul>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><ul>
<li>有了 MAC 地址 和 IP 地址，可以在互联网上的 任意两台主机建立通信</li>
<li>同一台主机上的许多程序 需要使用网络收发数据包，该如何区分数据包的归属</li>
<li>使用参数 <code>端口Port</code> 表示数据包供哪个进程使用<ul>
<li>Port 是每一个使用网卡的程序的编号</li>
<li>每一个数据包都发到主机的特定端口</li>
</ul>
</li>
</ul>
<ul>
<li>端口 是<code>0-65535</code> 的一个整数，使用16 个二进制位表示<ul>
<li><code>0-1023</code> 的端口被系统占用</li>
<li>用户只能选用大于 1023 的端口</li>
</ul>
</li>
<li>有了 IP 和 端口，可以唯一确定互联网上一个程序，进而实现网络间的程序通信</li>
</ul>
<ul>
<li>必须在数据包中加入 端口信息，因此需要新的协议<ul>
<li><code>UDP</code> 协议：在数据前加上端口号，总长度不超过<code>65535</code> 字节<ul>
<li>缺陷：无法确定对方是否收到</li>
<li>标头：发出端口，接收端口<ul>
<li>8个字节</li>
</ul>
</li>
<li>数据：具体内容</li>
</ul>
</li>
<li><code>TCP</code> 协议：保证数据不丢失<ul>
<li>缺陷：过程复杂，实现困难，消耗较多的资源</li>
<li>无长度限制</li>
<li>通常长度不超过 IP 数据包的长度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><ul>
<li>应用程序收到 传输层数据，需要对数据进行解包：（需要事先规定好通信的数据格式）</li>
<li>应用层的作用：规定应用程序使用的数据格式<ul>
<li>例如：TCP协议之上的 Email，HTTP，FTP等协议</li>
<li>这些协议组成了互联网协议的应用层</li>
</ul>
</li>
<li>发送方的<code>HTTP</code> 数据，经过互联网的传输过程中，会依次添加各层协议的标头信息，接收方收到数据包后， 再依次根据协议解包得到数据<ul>
<li>![HTTP数据传输图解](E:\LearningNotes\Go\17 网络编程.assets\httptcpip.png)</li>
</ul>
</li>
</ul>
<h1 id="socket-编程"><a href="#socket-编程" class="headerlink" title="socket 编程"></a>socket 编程</h1><ul>
<li>Socket 是 BSD UNIX 的进程通信机制，称作<code>套接字</code></li>
<li>作用：描述 IP 地址和端口，一个通信链的句柄</li>
<li>可以理解为 <code>TCP/IP</code> 网络的 API ，定义了许多函数和例程，程序员可以用它们开发<code>TCP/IP</code> 网络上的应用程序</li>
<li>电脑上运行的应用程序，通常通过<code>套接字</code>向网络发出请求或者应答请求</li>
</ul>
<h2 id="socket-图解"><a href="#socket-图解" class="headerlink" title="socket 图解"></a>socket 图解</h2><ul>
<li><code>Socket</code> 是应用层与<code>TCP/IP</code> 协议族通信的中间软件抽象层</li>
<li>将复杂的<code>TCP/IP</code> 协议族 隐藏在<code>Socket</code> 后，<ul>
<li>用户只需调用Socket相关函数，</li>
<li>让Socket去组织符合指定的协议数据，然后进行通信</li>
</ul>
</li>
<li>![socket图解](E:\LearningNotes\Go\17 网络编程.assets\socket.png)</li>
</ul>
<h2 id="Go-语言实现-TCP-通信"><a href="#Go-语言实现-TCP-通信" class="headerlink" title="Go 语言实现 TCP 通信"></a>Go 语言实现 TCP 通信</h2><h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><h3 id="TCP-服务端"><a href="#TCP-服务端" class="headerlink" title="TCP 服务端"></a>TCP 服务端</h3><h3 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP 客户端"></a>TCP 客户端</h3><h2 id="TCP-黏包"><a href="#TCP-黏包" class="headerlink" title="TCP 黏包"></a>TCP 黏包</h2><h3 id="黏包示例"><a href="#黏包示例" class="headerlink" title="黏包示例"></a>黏包示例</h3><h3 id="为什么会出现黏包"><a href="#为什么会出现黏包" class="headerlink" title="为什么会出现黏包"></a>为什么会出现黏包</h3><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h2 id="Go-语言实现UDP通信"><a href="#Go-语言实现UDP通信" class="headerlink" title="Go 语言实现UDP通信"></a>Go 语言实现UDP通信</h2><h3 id="UDP-协议"><a href="#UDP-协议" class="headerlink" title="UDP 协议"></a>UDP 协议</h3><h3 id="UDP-服务端"><a href="#UDP-服务端" class="headerlink" title="UDP 服务端"></a>UDP 服务端</h3><h3 id="UDP-客户端"><a href="#UDP-客户端" class="headerlink" title="UDP 客户端"></a>UDP 客户端</h3><p>304301980</p>
]]></content>
      <categories>
        <category>-Go LearningNote</category>
      </categories>
  </entry>
  <entry>
    <title>16 并发</title>
    <url>/p/a4216756.html</url>
    <content><![CDATA[<h1 id="16-并发"><a href="#16-并发" class="headerlink" title="16 并发"></a>16 并发</h1><p>[toc]</p>
<p>Go 语言 <strong>在语言层面天生支持并发</strong></p>
<h1 id="并发-与-并行"><a href="#并发-与-并行" class="headerlink" title="并发 与 并行"></a>并发 与 并行</h1><ul>
<li><strong>并发</strong>：在<strong>同一时间段</strong>内执行多个任务<ul>
<li>用微信和两个人聊天</li>
</ul>
</li>
<li><strong>并行</strong>：<strong>同一时刻</strong>执行多个任务<ul>
<li>我和朋友都在用微信别人聊天</li>
</ul>
</li>
<li><strong>Go 的并发</strong>通过<code>goroutine</code> 实现<ul>
<li><code>goroutin</code> <strong>类似于线程</strong>，属于用户态的线程，可以创建许多个<code>goroutine</code> 并发工作</li>
<li><code>goroutine</code> 是 由Go 语言运行时，调度完成，而线程是由操作系统调度完成</li>
</ul>
</li>
<li>Go 还提供<code>channel</code> 在多个<code>goroutine</code> 间进行通信</li>
<li><code>goroutine</code> 和 <code>channel</code> 是Go 语言秉承的 <strong><code>CSP(Communicating Sequential Process)</code> 并发模式</strong>的重要实现基础</li>
</ul>
<h1 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h1><ul>
<li><p><code>java/c++ </code>中实现并发编程：耗费大量心智</p>
<ul>
<li>需要自己维护一个线程池，</li>
<li>需要自己去包装一个又一个任务</li>
<li>需要自己去调度线程执行任务并维护上下文切换</li>
</ul>
</li>
<li><p>Go 中<code>goroutine</code> 机制：程序员自己定义多个任务，让系统帮助我们将任务分配到 CPU 上实现并发</p>
</li>
<li><p><code>goroutine</code> :类似于线程，由Go 在 runtime 时调度和管理</p>
</li>
<li><p>Go 程序会智能地将 goroutine 中的任务合理地分配给每个CPU</p>
</li>
<li><p><strong>现代化的编程语言</strong>：在语言层面已经<strong>内置了调度和上下文切换的机制</strong></p>
</li>
<li><p>Go 中不需要自己写进程、线程、协程，只需要<code>goroutine</code>，</p>
</li>
<li><p>当需要<strong>让某个任务并发执行</strong>的时候，只需要将这个任务 <strong>包装成一个函数</strong>，开启一个<code>goroutine</code> 去执行这个函数就可以</p>
</li>
</ul>
<h2 id="使用-goroutine"><a href="#使用-goroutine" class="headerlink" title="使用 goroutine"></a>使用 goroutine</h2><ul>
<li>Go 中使用<code>goroutine</code> ：<ul>
<li>再调用函数的时候前面加关键字<code>go</code> ，即可为函数创建一个<code>goroutine</code></li>
</ul>
</li>
<li>一个<code>goroutine</code> 必定对应一个函数，可以创建多个<code>goroutine</code> 去执行相同的函数</li>
</ul>
<h2 id="启动单个-goroutine"><a href="#启动单个-goroutine" class="headerlink" title="启动单个 goroutine"></a>启动单个 goroutine</h2><ul>
<li><p>在匿名函数或者普通函数前<code>go</code> </p>
</li>
<li><p>示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello Goroutine!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	hello()</span><br><span class="line">	fmt.Println(<span class="string">&quot;main goroutine done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>示例中，hello( ) 和 main() 是串行执行的<br>结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Hello Goroutine!</span><br><span class="line">main goroutine done!</span><br></pre></td></tr></table></figure></li>
<li><p>在函数hello前加关键字<code>go</code> ，启动一个goroutine去执行hello函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> hello() <span class="comment">// 启动另外一个goroutine去执行hello函数</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;main goroutine done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>执行结果纸打印了<code>main goroutine done!</code></p>
<ul>
<li>因为程序启动当时，Go 程序会为<code>main()</code>函数创建一个默认的<code>goroutine</code></li>
<li>当main() 返回时，该<code>goroutine</code> 就结束了，所有在<code>main()</code> 中启动的<code>goroutine</code> 会一同结束，<code>main</code> 所在的<code>goroutine</code> 是夜王，而其他<code>goroutine</code> 是异鬼</li>
</ul>
</li>
<li><p>让main函数等hello函数：<code>time.Sleep</code></p>
<ul>
<li>```go<br>func main() {<pre><code>go hello() // 启动另外一个goroutine去执行hello函数
fmt.Println(&quot;main goroutine done!&quot;)
time.Sleep(time.Second)
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 执行结果：先打印&#96;main goroutine done!&#96; , 在打印&#96;Hello Goroutine!&#96;</span><br><span class="line">* 在创建&#96;goroutine&#96; 时需要花费时间，此时main函数所在的&#96;goroutine&#96; 是继续执行的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 启动多个 goroutine</span><br><span class="line"></span><br><span class="line">* 使用&#96;sysnc.WaitGroup&#96; 实现&#96;goroutine&#96; 的同步</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;go</span><br><span class="line">  var wg sync.WaitGroup</span><br><span class="line">  </span><br><span class="line">  func hello(i int) &#123;</span><br><span class="line">  	defer wg.Done() &#x2F;&#x2F; goroutine结束就登记-1</span><br><span class="line">  	fmt.Println(&quot;Hello Goroutine!&quot;, i)</span><br><span class="line">  &#125;</span><br><span class="line">  func main() &#123;</span><br><span class="line">  </span><br><span class="line">  	for i :&#x3D; 0; i &lt; 10; i++ &#123;</span><br><span class="line">  		wg.Add(1) &#x2F;&#x2F; 启动一个goroutine就登记+1</span><br><span class="line">  		go hello(i)</span><br><span class="line">  	&#125;</span><br><span class="line">  	wg.Wait() &#x2F;&#x2F; 等待所有登记的goroutine都结束</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>多次执行，打印的顺序不一致，</p>
<ul>
<li>因为10<code>goroutine</code> 是并发执行的，而<code>goroutine</code> 的调度是随机的</li>
</ul>
</li>
</ul>
<h1 id="goroutine-与-线程"><a href="#goroutine-与-线程" class="headerlink" title="goroutine 与 线程"></a>goroutine 与 线程</h1><h2 id="可增长的栈"><a href="#可增长的栈" class="headerlink" title="可增长的栈"></a>可增长的栈</h2><ul>
<li>OS 线程一般都有固定的栈内存(通常为2 MB)</li>
<li>一个<code>goroutine</code> 的栈在其生命周期开始时只有很小的栈（一般为2 KB），<code>goroutine</code> 的栈不是固定的，按需增大和缩小，<code>goroutine</code> 的栈大小最大为<code>1 GB</code>，</li>
<li>因此一次创建十万<code>groutine</code> 也可以</li>
</ul>
<h2 id="goroutine-调度"><a href="#goroutine-调度" class="headerlink" title="goroutine 调度"></a>goroutine 调度</h2><ul>
<li><p><strong><code>GPM</code></strong> 是Go<strong>运行时(runtime) 层面的实现</strong>，是G<strong>o自己实现的一套调度系统</strong>，区别于操作系统调度OS线程</p>
<ul>
<li><strong><code>G</code>:</strong> 一个<code>goroutine</code> , 存放着本<strong>共routine信息</strong>，和<strong>与所在<code>P</code>的绑定</strong></li>
<li><strong><code>P</code></strong>: <strong>管理着一组 goroutine 队列</strong>，<ul>
<li>P 中存储着当前 goroutine 运行的上下文环境（函数指针、堆栈地址、地址边界）</li>
<li>P 对自己管理的 goroutine 队列做出一些调度（例如将占用CPU时间长的 goroutine 暂停、运行后续的goroutine等）</li>
<li>当自己的队列消费完后，就去全局队列里取，若全局队列也消费完了，去其他P的队列里抢任务</li>
</ul>
</li>
<li><strong><code>M(machine)</code></strong>: Go 运行时（runtime）对 <strong>操作系统内核线程的虚拟</strong>，<em>M 与内核线程</em>一般是<strong>一一映射</strong>的关系，<strong>一个 goroutine 最终是要放到 M 上执行</strong>的</li>
</ul>
</li>
<li><p><strong><code>P</code> 和 <code>M</code></strong> 也是一一对应：</p>
<ul>
<li><strong>P 管理着一组 G 挂载 在M上运行</strong></li>
<li>当一个 G 长久阻塞在一个 M 上时，<strong>runtime</strong> 会新建一个 M，<strong>阻塞G</strong> 所在的P会把其他的 G 挂载在新建的 M 上</li>
<li>当旧 的 <strong>G阻塞完成或者认为其已经死掉</strong>时，回收旧的 M</li>
</ul>
</li>
<li><p>P 的个数通过<code>runtime.GOMAXPROCS</code>设定，最大256，<code>Go1.5</code> 后<strong>默认</strong>为<strong>物理线程数</strong></p>
<ul>
<li>在<strong>并发量大时</strong>，会增加一些 P 和 M，不会太多</li>
</ul>
</li>
<li><p>==注意==</p>
<ul>
<li><strong>从线程调度看，Go语言与其它语言相比的优势</strong>：<ul>
<li><strong>OS线程</strong>是由<strong>OS内核</strong>来调度的，<strong>goroutine</strong> 则是由Go运行时（runtime）<strong>自己的调度器</strong>调度的，<strong>调度器</strong>使用一个称为**<code>m:n</code>调度<strong>的技术（</strong>复用/调度 m 个goroutine到 n 个OS线程**）<ul>
<li>一大特点： goroutine 的调度在<strong>用户态</strong>完成，不涉及内核态与用户台的频繁切换，包括<strong>内存的分配与释放</strong>，都是在<strong>用户态维护着一块内存池</strong>，不直接调用系统的     <code>malloc</code> 函数，成本比调度OS线程低很多</li>
<li>另一方面，充分利用了<strong>多核的硬件资源</strong>，近似地把若干 goroutine 均分在物理线程上，再加上<strong>goroutine的超轻量</strong>，都能保证go调度方面的性能</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="GOMAXPROCS"><a href="#GOMAXPROCS" class="headerlink" title="GOMAXPROCS"></a>GOMAXPROCS</h2><ul>
<li><p>Go <strong>运行时的调度器</strong>使用<code>GOMAXPROCS</code>参数，确定使用多少个 <strong>OS 线程</strong> 来同时执行 Go 代码</p>
<ul>
<li><strong>默认值</strong>是机器上的 <strong>CPU 核心数</strong></li>
<li>例如：一个8 核心的机器上，调度器会把 Go 代码同时调度到 8 个OS线程上</li>
<li>8 即为 <code>m:n</code> 调度中的n</li>
</ul>
</li>
<li><p>Go 中通过<code>runtime.GOMAXPROCS()</code>函数 设置当前程序 并发时 <strong>占用的CPU逻辑核心数</strong></p>
</li>
<li><p><code>Go 1.5</code>之前，默认使用 单核心 执行，<code>Go 1.5</code> 之后，默认使用全部的CPU逻辑核心数</p>
</li>
<li><p>可以通过 <strong>将任务分配到不同的CPU逻辑核心</strong> 上实现 <strong>并行</strong> 的效果：</p>
<ul>
<li>```go<br>func a() {<pre><code>for i := 1; i &lt; 10; i++ &#123;
    fmt.Println(&quot;A:&quot;, i)
&#125;
</code></pre>
}func b() {<pre><code>for i := 1; i &lt; 10; i++ &#123;
    fmt.Println(&quot;B:&quot;, i)
&#125;
</code></pre>
}func main() {<pre><code>runtime.GOMAXPROCS(1)
go a()
go b()
time.Sleep(time.Second)
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 两个任务只有一个逻辑核心，此时是做完一个任务再做另一个任务。</span><br><span class="line"></span><br><span class="line">* 将逻辑核心数设为 2，此时两个任务并行执行：</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;go</span><br><span class="line">  func a() &#123;</span><br><span class="line">  	for i :&#x3D; 1; i &lt; 10; i++ &#123;</span><br><span class="line">  		fmt.Println(&quot;A:&quot;, i)</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func b() &#123;</span><br><span class="line">  	for i :&#x3D; 1; i &lt; 10; i++ &#123;</span><br><span class="line">  		fmt.Println(&quot;B:&quot;, i)</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	runtime.GOMAXPROCS(2)</span><br><span class="line">  	go a()</span><br><span class="line">  	go b()</span><br><span class="line">  	time.Sleep(time.Second)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Go 中的 <strong>操作系统线程</strong> 和 <strong>goroutine</strong> 的关系</p>
<ul>
<li>一个 <strong>OS线程</strong> 对应 <strong>用户态多个goroutine</strong></li>
<li>go 程序可以<strong>同时使用多个</strong> <strong>OS线程</strong></li>
<li><strong>goroutine</strong> 和 <strong>OS线程</strong> 是多对多的关系即**<code>m:n</code>**</li>
</ul>
</li>
</ul>
<h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><ul>
<li><p>单纯的将函数并发执行无意义，<strong>函数与函数间 交换数据</strong>才能体现<strong>并发执行函数的意义</strong></p>
</li>
<li><p>可以使用<strong>共享内存</strong>进行数据交换，但是共享内存在不同的<code>goroutine</code>中容易发生竞争</p>
<ul>
<li>为了 数据交换 的正确性，必须使用 <strong>互斥量</strong> <strong>对内存进行加锁</strong>，这种做法会有<strong>性能问题</strong></li>
</ul>
</li>
<li><p><strong>Go 的并发模型</strong>：**<code>CSP(Communicating Sequential Process)</code>**, 提倡通过 <strong>通信共享内存</strong> 而不是 通过共享内存而实现通信</p>
</li>
<li><p><code>goroutine</code> 是Go 并发执行的<strong>执行体</strong>，<code>channel</code> 是他们之间的<strong>连接</strong></p>
<ul>
<li><code>channel</code> 可以让一个<code>goroutine</code> 发送特定值到另一个<code>goroutine</code>的通信机制</li>
</ul>
</li>
<li><p><code>channel</code> 是特殊的类型，像一个传送带或者<strong>队列</strong>，总是遵循先入先出的规则，以保证收发数据的顺序</p>
<ul>
<li><strong>每一个通道是一个具体类型的导管</strong>，即在声明channel时需要指定其元素类型</li>
</ul>
</li>
</ul>
<h2 id="channel-类型"><a href="#channel-类型" class="headerlink" title="channel 类型"></a>channel 类型</h2><ul>
<li><p><code>channel</code> 是一种<strong>引用类型</strong></p>
</li>
<li><p>声明 <code>channel</code> 类型的格式：<code>var 变量 chan 元素类型</code></p>
</li>
<li><p>```go<br>var ch1 chan int   // 声明一个传递整型的通道<br>var ch2 chan bool  // 声明一个传递布尔型的通道<br>var ch3 chan []int // 声明一个传递int切片的通道</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 创建 channel</span><br><span class="line"></span><br><span class="line">* channel 是**引用类型**，**空值**是&#96;nil&#96;</span><br><span class="line"></span><br><span class="line">* 声明的通道需要使用&#96;make&#96; 初始化才能使用</span><br><span class="line"></span><br><span class="line">* 创建 channel 的格式：&#96;make(chan 元素类型，缓冲区大小)&#96;</span><br><span class="line"></span><br><span class="line">  * 缓冲区大小可选</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;go</span><br><span class="line">  ch4 :&#x3D; make(chan int)</span><br><span class="line">  ch5 :&#x3D; make(chan bool)</span><br><span class="line">  ch6 :&#x3D; make(chan []int)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="channel-操作"><a href="#channel-操作" class="headerlink" title="channel 操作"></a>channel 操作</h2><ul>
<li>channel操作:<ul>
<li><strong>发送：send</strong></li>
<li><strong>接收：receive</strong></li>
<li><strong>关闭：close</strong></li>
</ul>
</li>
<li>发送 和 接收：使用<code>&lt;-</code> 符号</li>
<li>定义一个通道<code>ch := make(chan int)</code></li>
</ul>
<h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><ul>
<li>将一个值发送到通道中</li>
<li><code>ch &lt;- 10</code></li>
</ul>
<h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><ul>
<li><p>从一个通道中接收值</p>
</li>
<li><p>```go<br>x := &lt;- ch //从ch通道中接收值并赋值给变量x<br>&lt;- ch        //从ch中接收值，忽略结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 关闭</span><br><span class="line"></span><br><span class="line">* 调用内置函数&#96;close&#96; 关闭通道</span><br><span class="line">* &#96;close(ch)&#96;</span><br><span class="line">* &#x3D;&#x3D;注意：&#x3D;&#x3D;</span><br><span class="line">  * 只有在通知接收方 goroutine **所有的数据都发送完毕**时，才需要关闭通道</span><br><span class="line">  * **通道可以被垃圾回收机制回收**的，和关闭文件不一样（必须做），关闭通道不一定要做</span><br><span class="line">* 关闭后的通道的&#x3D;&#x3D;特点&#x3D;&#x3D;</span><br><span class="line">  * 对一个关闭的通道 再发送值就会导致 panic</span><br><span class="line">  * 对一个关闭的通道进行接收会一直获取值，直到通道为空</span><br><span class="line">  * 对一个关闭且没有值的通道执行接受操作，会得到对应类型的零值</span><br><span class="line">  * 关闭一个已经关闭的通道会导致 panic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 无缓冲的通道</span><br><span class="line"></span><br><span class="line">* 无缓冲的通道（阻塞的通道）</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	ch :&#x3D; make(chan int)</span><br><span class="line">    	ch &lt;- 10</span><br><span class="line">    	fmt.Println(&quot;发送成功&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编译能通过，但执行会报错：</p>
<ul>
<li><p>```<br>fatal error: all goroutines are asleep - deadlock!</p>
<p>goroutine 1 [chan send]:<br>main.main()</p>
<pre><code>e:/LearningNotes/Go/goroutine/zuse.go:7 +0x5f
</code></pre>
<p>exit status 2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * &#96;deadlock&#96;: </span><br><span class="line"></span><br><span class="line">  * 因为&#96;ch:&#x3D;make(chan int)&#96; 创建的是**无缓冲区的通道**，无缓冲区的通道只有在**有人 接受值 的时候**才能发送值</span><br><span class="line"></span><br><span class="line">  * 上面代码阻塞于&#96;ch &lt;- 10&#96;，形成死锁</span><br><span class="line"></span><br><span class="line">* **一种方法**：启用一个&#96;goroutine&#96;接收值</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    func recv(c chan int) &#123;</span><br><span class="line">    	ret :&#x3D; &lt;-c</span><br><span class="line">    	fmt.Println(&quot;接收成功&quot;, ret)</span><br><span class="line">    &#125;</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	ch :&#x3D; make(chan int)</span><br><span class="line">    	go recv(ch) &#x2F;&#x2F; 启用goroutine从通道接收值</span><br><span class="line">    	ch &lt;- 10</span><br><span class="line">    	fmt.Println(&quot;发送成功&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>无缓冲通道</strong> 上的 <strong>发送操作</strong> 会阻塞，直到另一个<code>goroutine</code> 在该通道上执行 <strong>接收操作</strong>，才能发送成功，两个<code>goroutine</code> 会继续执行</p>
</li>
<li><p>相反，若 <strong>接受操作</strong> 先执行，接收方的<code>goroutine</code> 将阻塞，直到另一个<code>goroutine</code> 在该通道上发送一个值</p>
</li>
</ul>
</li>
<li><p>使用 <strong>无缓冲通道</strong> 进行通信将导致发送和接收的<code>goroutine</code> <strong>同步化</strong></p>
</li>
<li><p>因此 <strong>无缓冲通道</strong> 被称为<code>同步通道</code></p>
</li>
</ul>
<h2 id="有缓冲的通道"><a href="#有缓冲的通道" class="headerlink" title="有缓冲的通道"></a>有缓冲的通道</h2><ul>
<li><p>解决上面的问题<strong>，另一种方法：</strong> 使用有缓冲的通道</p>
</li>
<li><p><strong>有缓冲的通道</strong>：使用 make初始化 的时候为其<strong>指定容量：</strong></p>
<ul>
<li>```go<br>func main() {<pre><code>ch := make(chan int, 1) // 创建一个容量为1的有缓冲区通道
ch &lt;- 10
fmt.Println(&quot;发送成功&quot;)
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 只要通道容量大于零，该通道就是**有缓冲的通道**，容量表示通道中能存放元素的数量</span><br><span class="line">* 若满则阻塞</span><br><span class="line">* 可以使用内置函数&#96;len&#96;获取通道内元素的数量，使用&#96;cap&#96;获取通道的容量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## for range 从通道循环取值</span><br><span class="line"></span><br><span class="line">* 向通道发送完数据后，可以通过 &#96;close&#96; 关闭通道</span><br><span class="line"></span><br><span class="line">* 通道被关闭时，在向通道发送值 会引发&#96;panic&#96;，从该通道取值的操作会先取完通道内的值，然后一直取得都是**对应类型的零值**</span><br><span class="line"></span><br><span class="line">* 判断通道是否被关闭：</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    &#x2F;&#x2F; channel 练习</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	ch1 :&#x3D; make(chan int)</span><br><span class="line">    	ch2 :&#x3D; make(chan int)</span><br><span class="line">    	&#x2F;&#x2F; 开启goroutine将0~100的数发送到ch1中</span><br><span class="line">    	go func() &#123;</span><br><span class="line">    		for i :&#x3D; 0; i &lt; 100; i++ &#123;</span><br><span class="line">    			ch1 &lt;- i</span><br><span class="line">    		&#125;</span><br><span class="line">    		close(ch1)</span><br><span class="line">    	&#125;()</span><br><span class="line">    	&#x2F;&#x2F; 开启goroutine从ch1中接收值，并将该值的平方发送到ch2中</span><br><span class="line">    	go func() &#123;</span><br><span class="line">    		for &#123;</span><br><span class="line">    			i, ok :&#x3D; &lt;-ch1 &#x2F;&#x2F; 通道关闭后再取值ok&#x3D;false</span><br><span class="line">    			if !ok &#123;</span><br><span class="line">    				break</span><br><span class="line">    			&#125;</span><br><span class="line">    			ch2 &lt;- i * i</span><br><span class="line">    		&#125;</span><br><span class="line">    		close(ch2)</span><br><span class="line">    	&#125;()</span><br><span class="line">    	&#x2F;&#x2F; 在主goroutine中从ch2中接收值打印</span><br><span class="line">    	for i :&#x3D; range ch2 &#123; &#x2F;&#x2F; 通道关闭后会退出for range循环</span><br><span class="line">    		fmt.Println(i)</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>有两种方式在接收值时，判断该通道是否被关闭</p>
<ul>
<li>```go<br>for {<pre><code>        i, ok := &lt;-ch1 // 通道关闭后再取值ok=false
        if !ok &#123;
            break
        &#125;
        ch2 &lt;- i * i
    &#125;
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;go</span><br><span class="line">  for i :&#x3D; range ch2 &#123; &#x2F;&#x2F; 通道关闭后会退出for range循环</span><br><span class="line">  		fmt.Println(i)</span><br><span class="line">  	&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h2><ul>
<li><p>可以将通道作为 <strong>参数</strong> 在 <strong>多个任务函数间</strong> 传递</p>
</li>
<li><p>可以在<strong>不同的任务函数</strong>中，对使用的通道进行<strong>限制</strong>：<strong>只能发送</strong> 或 <strong>只能接收</strong></p>
</li>
<li><p>Go 提供了 <strong>单向通道</strong> ：</p>
<ul>
<li>```go<br>func counter(out chan&lt;- int) {<pre><code>for i := 0; i &lt; 100; i++ &#123;
    out &lt;- i
&#125;
close(out)
</code></pre>
}func squarer(out chan&lt;- int, in &lt;-chan int) {<pre><code>for i := range in &#123;
    out &lt;- i * i
&#125;
close(out)
</code></pre>
}<br>func printer(in &lt;-chan int) {<pre><code>for i := range in &#123;
    fmt.Println(i)
&#125;
</code></pre>
}func main() {<pre><code>ch1 := make(chan int)
ch2 := make(chan int)
go counter(ch1)
go squarer(ch2, ch1)
printer(ch2)
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * &#96;chan&lt;- int&#96; 是一个**只写单向通道**（只能对其写入int类型），可以对其**发送操作**，但不能执行接收操作</span><br><span class="line">  * &#96;&lt;-chan int&#96; 是一个**只读单向通道**（只能对其读取int类型），可以对其执行**接收操作**，但不能执行发送操作</span><br><span class="line"></span><br><span class="line">* 在函数传参，以及任何赋值操作中，可以**将双向通道转换成单向通道**，不能反之；</span><br><span class="line"></span><br><span class="line">## 通道总结</span><br><span class="line"></span><br><span class="line">* channel **异常总结**：</span><br><span class="line">  * ![channel异常总结](https:&#x2F;&#x2F;www.liwenzhou.com&#x2F;images&#x2F;Go&#x2F;concurrence&#x2F;channel01.png)</span><br><span class="line"></span><br><span class="line">* 关闭已关闭 的&#96;channel&#96; 会引发&#96;panic&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># worker pool(goroutine 池)</span><br><span class="line"></span><br><span class="line">* 通常会使用 可以指定启动的 &#96;goroutine&#96; 数量- &#96;worker pool&#96; 模式，以控制&#96;goroutine&#96; 的数量，防止&#96;goroutine&#96; 的泄露和暴涨</span><br><span class="line"></span><br><span class="line">* 简易 &#96;worker pool&#96; 示例：</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    func worker(id int, jobs &lt;-chan int, results chan&lt;- int) &#123;</span><br><span class="line">    	for j :&#x3D; range jobs &#123;</span><br><span class="line">    		fmt.Printf(&quot;worker:%d start job:%d\n&quot;, id, j)</span><br><span class="line">    		time.Sleep(time.Second)</span><br><span class="line">    		fmt.Printf(&quot;worker:%d end job:%d\n&quot;, id, j)</span><br><span class="line">    		results &lt;- j * 2</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	jobs :&#x3D; make(chan int, 100)</span><br><span class="line">    	results :&#x3D; make(chan int, 100)</span><br><span class="line">    	&#x2F;&#x2F; 开启3个goroutine</span><br><span class="line">    	for w :&#x3D; 1; w &lt;&#x3D; 3; w++ &#123;</span><br><span class="line">    		go worker(w, jobs, results)</span><br><span class="line">    	&#125;</span><br><span class="line">    	&#x2F;&#x2F; 5个任务</span><br><span class="line">    	for j :&#x3D; 1; j &lt;&#x3D; 5; j++ &#123;</span><br><span class="line">    		jobs &lt;- j</span><br><span class="line">    	&#125;</span><br><span class="line">    	close(jobs)</span><br><span class="line">    	&#x2F;&#x2F; 输出结果</span><br><span class="line">    	for a :&#x3D; 1; a &lt;&#x3D; 5; a++ &#123;</span><br><span class="line">    		&lt;-results</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="select-多路复用"><a href="#select-多路复用" class="headerlink" title="select 多路复用"></a>select 多路复用</h1><ul>
<li><p>通道在 接收数据 时，若没有数据可以接收会发生 阻塞</p>
</li>
<li><p>若需要同时从多个通道接收数据，则更有可能发生上述阻塞</p>
</li>
<li><p>例如：</p>
<ul>
<li>```go<br>for{<pre><code>// 尝试从ch1接收值
data, ok := &lt;-ch1
// 尝试从ch2接收值
data, ok := &lt;-ch2
…
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * 这种遍历方式，可以实现从多个通道接收值，但运行性能很差</span><br><span class="line"></span><br><span class="line">* 为了解决上述问题：Go 内置了&#96;select&#96; 关键字，可以同时响应多个通道的操作</span><br><span class="line"></span><br><span class="line">* &#96;select&#96; 的使用类似于&#96;switch&#96; 语句，有一系列&#96;case&#96; 分支和一个默认分支</span><br><span class="line"></span><br><span class="line">  * 每个&#96;case&#96; 会对应一个通道的通信过程（send or receive）</span><br><span class="line">  * &#96;select&#96; 会一直等待，知道某个&#96;case&#96; 的通信操作完成，会执行&#96;case&#96; 分支对应的语句</span><br><span class="line"></span><br><span class="line">* 格式：</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    select&#123;</span><br><span class="line">        case &lt;-ch1:</span><br><span class="line">            ...</span><br><span class="line">        case data :&#x3D; &lt;-ch2:</span><br><span class="line">            ...</span><br><span class="line">        case ch3&lt;-data:</span><br><span class="line">            ...</span><br><span class="line">        default:</span><br><span class="line">            默认操作</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li>```go<br>func main() {<pre><code>ch := make(chan int, 1)
for i := 0; i &lt; 10; i++ &#123;
    select &#123;
    case x := &lt;-ch:
        fmt.Println(x)
    case ch &lt;- i:
    &#125;
&#125;
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 使用&#96;select&#96; 语句增加代码可读性：</span><br><span class="line">  * 可处理一个或多个 channel 的发送&#x2F;接受操作</span><br><span class="line">  * 如果多个&#96;case&#96; 同时满足，&#96;select&#96; 会随机选择一个</span><br><span class="line">  * 对于没有&#96;case&#96; 的&#96;select&#123;&#125;&#96; 会一直等待，可用于阻塞&#96;main&#96; 函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 并发安全和锁</span><br><span class="line"></span><br><span class="line">* Go 中，可能会存在多个&#96;goroutine&#96; 同时操作一个资源（临界区），这种情况会发生&#96;竞态问题&#96; 数据竞争</span><br><span class="line"></span><br><span class="line">* 示例：</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    var x int64</span><br><span class="line">    var wg sync.WaitGroup</span><br><span class="line">    </span><br><span class="line">    func add() &#123;</span><br><span class="line">    	for i :&#x3D; 0; i &lt; 5000; i++ &#123;</span><br><span class="line">    		x &#x3D; x + 1</span><br><span class="line">    	&#125;</span><br><span class="line">    	wg.Done()</span><br><span class="line">    &#125;</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	wg.Add(2)</span><br><span class="line">    	go add()</span><br><span class="line">    	go add()</span><br><span class="line">    	wg.Wait()</span><br><span class="line">    	fmt.Println(x)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>开启两个<code>goroutine</code> 去累加 x 的值，这两个<code>goroutine</code> 在访问和修改<code>x</code> 时会存在数据竞争，导致结果与期待不符</p>
</li>
<li><p>package <code>time</code></p>
<ul>
<li><code>time.Sleep(time.Second)</code> : 主线程等到所有的 goroutine 都运行完毕，使得主线程睡眠一会，等待其他线程充分运行</li>
<li><code>sync.WaitGroup</code> : 内部有个计时器，最初从零开始。有三个方法控制计数器的数量<ul>
<li><code>Add()</code> : 将计数器设置为n</li>
<li><code>Done()</code> : 每次将计数器 -1</li>
<li><code>Wait()</code> : 会阻塞代码运行，直到计数器的值减少为0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><ul>
<li><p><strong>互斥锁</strong>：常用的控制共享资源访问的方法，能保证同时只有一个<code>goroutine</code> 可以访问共享资源</p>
</li>
<li><p>Go 中使用<code>sync</code> 和 <code>Mutex</code> 包实现互斥锁</p>
<ul>
<li>```go<br>var x int64<br>var wg sync.WaitGroup<br>var lock sync.Mutexfunc add() {<pre><code>for i := 0; i &lt; 5000; i++ &#123;
    lock.Lock() // 加锁
    x = x + 1
    lock.Unlock() // 解锁
&#125;
wg.Done()
</code></pre>
}<br>func main() {<pre><code>wg.Add(2)
go add()
go add()
wg.Wait()
fmt.Println(x)
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 使用 **互斥锁** 能保证同一时间有且只有一个&#96;goroutine&#96; 进入 **临界区**，其他的&#96;goroutine&#96; 则在等待锁</span><br><span class="line">* 当互斥锁释放后，等待的&#96;goroutine&#96; 才可以获取锁进入临界区</span><br><span class="line">  </span><br><span class="line">  * 当多个&#96;goroutine&#96; 同时等待一个锁时，唤醒的策略是随机的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 读写互斥锁</span><br><span class="line"></span><br><span class="line">* 互斥锁 是 **完全互斥** 的</span><br><span class="line"></span><br><span class="line">* 并发的读取一个资源时，不涉及修改资源不需要加锁，这时使用读写锁更好</span><br><span class="line"></span><br><span class="line">* **读写锁** 在 Go 中：&#96;sync&#96; 包 中的&#96;RWMutex&#96;</span><br><span class="line"></span><br><span class="line">* 读写锁：读锁 和 写锁</span><br><span class="line"></span><br><span class="line">  * 当一个 &#96;goroutine &#96; 获取读锁后，其他的&#96;goroutine&#96; 若获取读锁会继续获得锁，若获取写锁会等待</span><br><span class="line">  * 当一个&#96;goroutine&#96; 获取写锁之后，其他的&#96;goroutine&#96; 无论是获取读锁还是写锁都会等待</span><br><span class="line"></span><br><span class="line">* 示例</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    var (</span><br><span class="line">    	x      int64</span><br><span class="line">    	wg     sync.WaitGroup</span><br><span class="line">    	lock   sync.Mutex</span><br><span class="line">    	rwlock sync.RWMutex</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    func write() &#123;</span><br><span class="line">    	&#x2F;&#x2F; lock.Lock()   &#x2F;&#x2F; 加互斥锁</span><br><span class="line">    	rwlock.Lock() &#x2F;&#x2F; 加写锁</span><br><span class="line">    	x &#x3D; x + 1</span><br><span class="line">    	time.Sleep(10 * time.Millisecond) &#x2F;&#x2F; 假设写操作耗时10毫秒</span><br><span class="line">    	rwlock.Unlock()                   &#x2F;&#x2F; 解写锁</span><br><span class="line">    	&#x2F;&#x2F; lock.Unlock()                     &#x2F;&#x2F; 解互斥锁</span><br><span class="line">    	wg.Done()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func read() &#123;</span><br><span class="line">    	&#x2F;&#x2F; lock.Lock()                  &#x2F;&#x2F; 加互斥锁</span><br><span class="line">    	rwlock.RLock()               &#x2F;&#x2F; 加读锁</span><br><span class="line">    	time.Sleep(time.Millisecond) &#x2F;&#x2F; 假设读操作耗时1毫秒</span><br><span class="line">    	rwlock.RUnlock()             &#x2F;&#x2F; 解读锁</span><br><span class="line">    	&#x2F;&#x2F; lock.Unlock()                &#x2F;&#x2F; 解互斥锁</span><br><span class="line">    	wg.Done()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	start :&#x3D; time.Now()</span><br><span class="line">    	for i :&#x3D; 0; i &lt; 10; i++ &#123;</span><br><span class="line">    		wg.Add(1)</span><br><span class="line">    		go write()</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	for i :&#x3D; 0; i &lt; 1000; i++ &#123;</span><br><span class="line">    		wg.Add(1)</span><br><span class="line">    		go read()</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	wg.Wait()</span><br><span class="line">    	end :&#x3D; time.Now()</span><br><span class="line">    	fmt.Println(end.Sub(start))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>读写锁</strong> 适合 读多写少的场景</p>
</li>
</ul>
<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><ul>
<li><p>Go 中 使用<code>sync.WaitGroup</code> 来实现并发任务的同步。<code>sync.WaitGroup</code> 的方法：</p>
<ul>
<li><table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>(wg *WaitGroup) Add(delta int)</td>
<td>计数器+delta</td>
</tr>
<tr>
<td>(wg *WaitGroup) Done()</td>
<td>计数器-1</td>
</tr>
<tr>
<td>(wg *WaitGroup) Wait()</td>
<td>阻塞 直到计数器变为0</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><code>sync.WaitGroup</code> 内部维护这一个<strong>计数器</strong>，计数器的值可以增加和减少</p>
<ul>
<li>当启动了 N 个并发任务时，就将计数器值增加N</li>
<li>每个任务完成时，通过调用Done() 将计数器减 1 </li>
<li>通过调用 Wait() 来等待并发任务执行完，当计数器值为0时，表示所有并发任务已经完成</li>
</ul>
</li>
<li><p><code>sync.WaitGroup</code>示例：</p>
<ul>
<li>```go<br>var wg sync.WaitGroupfunc hello() {<pre><code>defer wg.Done()
fmt.Println(&quot;Hello Goroutine!&quot;)
</code></pre>
}<br>func main() {<pre><code>wg.Add(1)
go hello() // 启动另外一个goroutine去执行hello函数
fmt.Println(&quot;main goroutine done!&quot;)
wg.Wait()
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 注意：&#96;sync.WaitGroup&#96; 是一个结构体，传递的时候需要传递指针</span><br><span class="line"></span><br><span class="line">## sync.Once</span><br><span class="line"></span><br><span class="line">* 在许多场景，确保某些操作在高并发的场景下只执行一次</span><br><span class="line">  * 例如 只加载一次配置文件，只i关闭一次通道</span><br><span class="line"></span><br><span class="line">### 加载配置文件示例</span><br><span class="line"></span><br><span class="line">### 并发安全的单例模式</span><br><span class="line"></span><br><span class="line">## sync.Map</span><br><span class="line"></span><br><span class="line">* Go 中的内置map 不是并发安全：</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    var m &#x3D; make(map[string]int)</span><br><span class="line">    </span><br><span class="line">    func get(key string) int &#123;</span><br><span class="line">    	return m[key]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func set(key string, value int) &#123;</span><br><span class="line">    	m[key] &#x3D; value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	wg :&#x3D; sync.WaitGroup&#123;&#125;</span><br><span class="line">    	for i :&#x3D; 0; i &lt; 20; i++ &#123;</span><br><span class="line">    		wg.Add(1)</span><br><span class="line">    		go func(n int) &#123;</span><br><span class="line">    			key :&#x3D; strconv.Itoa(n)</span><br><span class="line">    			set(key, n)</span><br><span class="line">    			fmt.Printf(&quot;k&#x3D;:%v,v:&#x3D;%v\n&quot;, key, get(key))</span><br><span class="line">    			wg.Done()</span><br><span class="line">    		&#125;(i)</span><br><span class="line">    	&#125;</span><br><span class="line">    	wg.Wait()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>当并发多了之后，会报<code>fatal error: concurrent map writes</code> 错误</p>
</li>
<li><p>需要为 map 加锁来保证并发的安全性，Go 的<code>sync</code> 包中提供了一个开箱即用的并发安全版 map <code>sync.Map</code></p>
<ul>
<li>开箱即用 不需要像内置 map 一样使用make初始化才能使用</li>
<li><code>sync.Map</code> 内置了<code>Store</code>,  <code>Load</code>, <code>LoadOrStore</code>, <code>Delete</code>, <code>Range</code> 等方法</li>
</ul>
</li>
<li><p>```go<br>var m = sync.Map{}</p>
<p>func main() {</p>
<pre><code>wg := sync.WaitGroup&#123;&#125;
for i := 0; i &lt; 20; i++ &#123;
    wg.Add(1)
    go func(n int) &#123;
        key := strconv.Itoa(n)
        m.Store(key, n)
        value, _ := m.Load(key)
        fmt.Printf(&quot;k=:%v,v:=%v\n&quot;, key, value)
        wg.Done()
    &#125;(i)
&#125;
wg.Wait()
</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 原子操作</span><br><span class="line"></span><br><span class="line">* 加锁操作：涉及内核态的上下文切换，会比较耗时、代价比较高</span><br><span class="line">* 针对**基本数据类型**，使用**原子操作**保证并发安全</span><br><span class="line">  * 原子操作 是Go提供的方法，在用户态完成，性能比加锁更好</span><br><span class="line">  * Go 中原子操作由内置标准库&#96;sync&#x2F;atomic&#96; 提供</span><br><span class="line"></span><br><span class="line">## atomic包</span><br><span class="line"></span><br><span class="line">* **方法：**</span><br><span class="line">  * 读取操作：&#96;LoadInt&#96;</span><br><span class="line">  * 写入操作: &#96;StoreInt&#96;</span><br><span class="line">  * 修改操作 : &#96;AddInt&#96;</span><br><span class="line">  * 交换操作 : &#96;SwapInt&#96;</span><br><span class="line">  * 比较并交换操作 : &#96;CompareAndSwapPointer&#96;</span><br><span class="line"></span><br><span class="line">## 示例</span><br><span class="line"></span><br><span class="line">* 比较互斥锁和原子操作的性能</span><br><span class="line"></span><br><span class="line">* &#96;&#96;&#96;go</span><br><span class="line">  package main</span><br><span class="line">  </span><br><span class="line">  import (</span><br><span class="line">  	&quot;fmt&quot;</span><br><span class="line">  	&quot;sync&quot;</span><br><span class="line">  	&quot;sync&#x2F;atomic&quot;</span><br><span class="line">  	&quot;time&quot;</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  type Counter interface &#123;</span><br><span class="line">  	Inc()</span><br><span class="line">  	Load() int64</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 普通版</span><br><span class="line">  type CommonCounter struct &#123;</span><br><span class="line">  	counter int64</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (c CommonCounter) Inc() &#123;</span><br><span class="line">  	c.counter++</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (c CommonCounter) Load() int64 &#123;</span><br><span class="line">  	return c.counter</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 互斥锁版</span><br><span class="line">  type MutexCounter struct &#123;</span><br><span class="line">  	counter int64</span><br><span class="line">  	lock    sync.Mutex</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (m *MutexCounter) Inc() &#123;</span><br><span class="line">  	m.lock.Lock()</span><br><span class="line">  	defer m.lock.Unlock()</span><br><span class="line">  	m.counter++</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (m *MutexCounter) Load() int64 &#123;</span><br><span class="line">  	m.lock.Lock()</span><br><span class="line">  	defer m.lock.Unlock()</span><br><span class="line">  	return m.counter</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  &#x2F;&#x2F; 原子操作版</span><br><span class="line">  type AtomicCounter struct &#123;</span><br><span class="line">  	counter int64</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (a *AtomicCounter) Inc() &#123;</span><br><span class="line">  	atomic.AddInt64(&amp;a.counter, 1)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (a *AtomicCounter) Load() int64 &#123;</span><br><span class="line">  	return atomic.LoadInt64(&amp;a.counter)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func test(c Counter) &#123;</span><br><span class="line">  	var wg sync.WaitGroup</span><br><span class="line">  	start :&#x3D; time.Now()</span><br><span class="line">  	for i :&#x3D; 0; i &lt; 1000; i++ &#123;</span><br><span class="line">  		wg.Add(1)</span><br><span class="line">  		go func() &#123;</span><br><span class="line">  			c.Inc()</span><br><span class="line">  			wg.Done()</span><br><span class="line">  		&#125;()</span><br><span class="line">  	&#125;</span><br><span class="line">  	wg.Wait()</span><br><span class="line">  	end :&#x3D; time.Now()</span><br><span class="line">  	fmt.Println(c.Load(), end.Sub(start))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	c1 :&#x3D; CommonCounter&#123;&#125; &#x2F;&#x2F; 非并发安全</span><br><span class="line">  	test(c1)</span><br><span class="line">  	c2 :&#x3D; MutexCounter&#123;&#125; &#x2F;&#x2F; 使用互斥锁实现并发安全</span><br><span class="line">  	test(&amp;c2)</span><br><span class="line">  	c3 :&#x3D; AtomicCounter&#123;&#125; &#x2F;&#x2F; 并发安全且比互斥锁效率更高</span><br><span class="line">  	test(&amp;c3)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>atomic</code> 包提供了底层的原子级内存操作，对于同步算法的实现很有用</p>
</li>
<li></li>
</ul>
<h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><ol>
<li><p>使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">goroutine</span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">channel</span><br></pre></td></tr></table></figure>

<p>实现一个计算int64随机数各位数和的程序。</p>
<ol>
<li>开启一个<code>goroutine</code>循环生成int64类型的随机数，发送到<code>jobChan</code></li>
<li>开启24个<code>goroutine</code>从<code>jobChan</code>中取出随机数计算各位数的和，将结果发送到<code>resultChan</code></li>
<li>主<code>goroutine</code>从<code>resultChan</code>取出结果并打印到终端输出</li>
</ol>
</li>
<li><p>为了保证业务代码的执行性能将之前写的日志库改写为异步记录日志方式。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>-Go LearningNote</category>
      </categories>
  </entry>
  <entry>
    <title>15 反射</title>
    <url>/p/16e69ce4.html</url>
    <content><![CDATA[<h1 id="15-反射"><a href="#15-反射" class="headerlink" title="15 反射"></a>15 反射</h1><p>[toc]</p>
<h1 id="变量的内在机制"><a href="#变量的内在机制" class="headerlink" title="变量的内在机制"></a>变量的内在机制</h1><ul>
<li>Go 的变量分为两部分<ul>
<li><strong>类型信息</strong>：预先定义好的元信息</li>
<li><strong>值信息</strong>：程序运行过程中可动态变化的</li>
</ul>
</li>
</ul>
<h1 id="反射介绍"><a href="#反射介绍" class="headerlink" title="反射介绍"></a>反射介绍</h1><ul>
<li><strong>程序运行时</strong> <strong>对程序本身进行访问和修改</strong>的能力<ul>
<li>一般，程序在编译时，变量被转换成内存地址，变量名不会被编译器写道可执行部分</li>
<li>在运行程序时，程序无法获取自身的信息</li>
</ul>
</li>
<li>但对于<strong>支持反射的语言</strong>，在程序<strong>编译时</strong>会将变量的<strong>反射信息</strong>（字段名、类型信息、结构体信息等）整合到可执行文件中，并给程序提供 <strong>接口</strong> 访问反射信息</li>
<li>Go 在运行期间 使用 <strong>reflect包</strong> 访问程序的<strong>反射信息</strong></li>
</ul>
<h1 id="reflect-包"><a href="#reflect-包" class="headerlink" title="reflect 包"></a>reflect 包</h1><ul>
<li>在 Go 的反射机制中，<strong>任何接口值</strong> 都是由<code>一个具体类型</code> 和 <code>具体类型的值</code> 两部分组成</li>
<li>反射相关功能由 内置 reflect 包提供，<ul>
<li>任意接口值在反射中都可以理解为<code>reflect.Type</code> 和 <code>reflect.Value</code> 两部分，</li>
<li>reflect 包提供了<code>reflect.TypeOf</code> <code>reflect.ValueOf</code> 获取任意对象的 Value 和 Type</li>
</ul>
</li>
</ul>
<h2 id="TypeOf"><a href="#TypeOf" class="headerlink" title="TypeOf"></a>TypeOf</h2><ul>
<li><p>使用<code>reflect.TypeOf()</code> 可以获得任意值的<strong>类型对象<code>(reflect.Type)</code></strong>, 程序通过类型对象可以访问任意值的类型信息</p>
<ul>
<li><p>```go<br>package main</p>
<p>import (</p>
<pre><code>&quot;fmt&quot;
&quot;reflect&quot;
</code></pre>
<p>)</p>
<p>func reflectType(x interface{}) {</p>
<pre><code>v := reflect.TypeOf(x)
fmt.Printf(&quot;type:%v\n&quot;, v)
</code></pre>
<p>}<br>func main() {</p>
<pre><code>var a float32 = 3.14
reflectType(a) // type:float32
var b int64 = 100
reflectType(b) // type:int64
</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### type name 和 type kind</span><br><span class="line"></span><br><span class="line">* 在反射中，关于类型还划分为两种：&#96;类型Type&#96; 和 &#96;种类Kind&#96;</span><br><span class="line"></span><br><span class="line">* &#96;type&#96; 关键字，使我们可以构造很多自定义类型</span><br><span class="line"></span><br><span class="line">* &#96;kind&#96; 指底层的类型</span><br><span class="line"></span><br><span class="line">* 在反射中，需要区分 指针、结构体等大品种的类型时，会用到&#96;kind&#96;</span><br><span class="line"></span><br><span class="line">* 示例：定义 指针类型和结构体类型：</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    package main</span><br><span class="line">    </span><br><span class="line">    import (</span><br><span class="line">    	&quot;fmt&quot;</span><br><span class="line">    	&quot;reflect&quot;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    type myInt int64</span><br><span class="line">    </span><br><span class="line">    func reflectType(x interface&#123;&#125;) &#123;</span><br><span class="line">    	t :&#x3D; reflect.TypeOf(x)</span><br><span class="line">    	fmt.Printf(&quot;type:%v kind:%v\n&quot;, t.Name(), t.Kind())</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	var a *float32 &#x2F;&#x2F; 指针</span><br><span class="line">    	var b myInt    &#x2F;&#x2F; 自定义类型</span><br><span class="line">    	var c rune     &#x2F;&#x2F; 类型别名</span><br><span class="line">    	reflectType(a) &#x2F;&#x2F; type: kind:ptr</span><br><span class="line">    	reflectType(b) &#x2F;&#x2F; type:myInt kind:int64</span><br><span class="line">    	reflectType(c) &#x2F;&#x2F; type:int32 kind:int32</span><br><span class="line">    </span><br><span class="line">    	type person struct &#123;</span><br><span class="line">    		name string</span><br><span class="line">    		age  int</span><br><span class="line">    	&#125;</span><br><span class="line">    	type book struct&#123; title string &#125;</span><br><span class="line">    	var d &#x3D; person&#123;</span><br><span class="line">    		name: &quot;沙河小王子&quot;,</span><br><span class="line">    		age:  18,</span><br><span class="line">    	&#125;</span><br><span class="line">    	var e &#x3D; book&#123;title: &quot;《跟小王子学Go语言》&quot;&#125;</span><br><span class="line">    	reflectType(d) &#x2F;&#x2F; type:person kind:struct</span><br><span class="line">    	reflectType(e) &#x2F;&#x2F; type:book kind:struct</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Go 的反射中，像数组、切片、Map、指针等类型变量，他们的<code>.Name()</code>返回空</p>
</li>
</ul>
</li>
<li><p><code>reflect</code> 包中，定义的 Kind 类型：</p>
<ul>
<li>```go<br>type Kind uint<br>const (<pre><code>Invalid Kind = iota  // 非法类型
Bool                 // 布尔型
Int                  // 有符号整型
Int8                 // 有符号8位整型
Int16                // 有符号16位整型
Int32                // 有符号32位整型
Int64                // 有符号64位整型
Uint                 // 无符号整型
Uint8                // 无符号8位整型
Uint16               // 无符号16位整型
Uint32               // 无符号32位整型
Uint64               // 无符号64位整型
Uintptr              // 指针
Float32              // 单精度浮点数
Float64              // 双精度浮点数
Complex64            // 64位复数类型
Complex128           // 128位复数类型
Array                // 数组
Chan                 // 通道
Func                 // 函数
Interface            // 接口
Map                  // 映射
Ptr                  // 指针
Slice                // 切片
String               // 字符串
Struct               // 结构体
UnsafePointer        // 底层指针
</code></pre>
)<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## ValueOf</span><br><span class="line"></span><br><span class="line">* &#96;reflect.ValueOf()&#96; 返回的是 &#96;reflect.Value&#96; 类型，包含了**原始值**的值信息</span><br><span class="line"></span><br><span class="line">* &#96;reflect.Value&#96; 与**原始值**之间可以**相互转换**</span><br><span class="line"></span><br><span class="line">* &#96;reflect.Value&#96; 提供获取原始值的方法：</span><br><span class="line"></span><br><span class="line">  * |             方法             |                             说明                             |</span><br><span class="line">    | :--------------------------: | :----------------------------------------------------------: |</span><br><span class="line">    | Interface() **interface &#123;&#125;** | 将值以 interface&#123;&#125; 类型返回，可以通过类型断言转换为指定类型  |</span><br><span class="line">    |         Int() int64          |     将值以 int 类型返回，所有有符号整型均可以此方式返回      |</span><br><span class="line">    |        Uint() uint64         |     将值以 uint 类型返回，所有无符号整型均可以此方式返回     |</span><br><span class="line">    |       Float() float64        | 将值以双精度（float64）类型返回，所有浮点数（float32、float64）均可以此方式返回 |</span><br><span class="line">    |         Bool() bool          |                     将值以 bool 类型返回                     |</span><br><span class="line">    |       Bytes() []bytes        |               将值以字节数组 []bytes 类型返回                |</span><br><span class="line">    |       String() string        |                     将值以字符串类型返回                     |</span><br><span class="line"></span><br><span class="line">### 通过反射获取值</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;go</span><br><span class="line">func reflectValue(x interface&#123;&#125;) &#123;</span><br><span class="line">	v :&#x3D; reflect.ValueOf(x)</span><br><span class="line">	k :&#x3D; v.Kind()</span><br><span class="line">	switch k &#123;</span><br><span class="line">	case reflect.Int64:</span><br><span class="line">		&#x2F;&#x2F; v.Int()从反射中获取整型的原始值，然后通过int64()强制类型转换</span><br><span class="line">		fmt.Printf(&quot;type is int64, value is %d\n&quot;, int64(v.Int()))</span><br><span class="line">	case reflect.Float32:</span><br><span class="line">		&#x2F;&#x2F; v.Float()从反射中获取浮点型的原始值，然后通过float32()强制类型转换</span><br><span class="line">		fmt.Printf(&quot;type is float32, value is %f\n&quot;, float32(v.Float()))</span><br><span class="line">	case reflect.Float64:</span><br><span class="line">		&#x2F;&#x2F; v.Float()从反射中获取浮点型的原始值，然后通过float64()强制类型转换</span><br><span class="line">		fmt.Printf(&quot;type is float64, value is %f\n&quot;, float64(v.Float()))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">	var a float32 &#x3D; 3.14</span><br><span class="line">	var b int64 &#x3D; 100</span><br><span class="line">	reflectValue(a) &#x2F;&#x2F; type is float32, value is 3.140000</span><br><span class="line">	reflectValue(b) &#x2F;&#x2F; type is int64, value is 100</span><br><span class="line">	&#x2F;&#x2F; 将int类型的原始值转换为reflect.Value类型</span><br><span class="line">	c :&#x3D; reflect.ValueOf(10)</span><br><span class="line">	fmt.Printf(&quot;type c :%T\n&quot;, c) &#x2F;&#x2F; type c :reflect.Value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="通过反射设置变量的值"><a href="#通过反射设置变量的值" class="headerlink" title="通过反射设置变量的值"></a>通过反射设置变量的值</h3><ul>
<li><p>在函数中通过反射修改变量的值，需要<strong>传递变量地址</strong>才能修改变量值</p>
</li>
<li><p>反射中，使用专有的<code>Elem()</code>方法<strong>可以获取指针对应的值</strong></p>
<ul>
<li>```go<br>package mainimport (<pre><code>&quot;fmt&quot;
&quot;reflect&quot;
</code></pre>
)func reflectSetValue1(x interface{}) {<pre><code>v := reflect.ValueOf(x)
if v.Kind() == reflect.Int64 &#123;
    v.SetInt(200) //修改的是副本，reflect包会引发panic
&#125;
</code></pre>
}<br>func reflectSetValue2(x interface{}) {<pre><code>v := reflect.ValueOf(x)
// 反射中使用 Elem()方法获取指针对应的值
if v.Elem().Kind() == reflect.Int64 &#123;
    v.Elem().SetInt(200)
&#125;
</code></pre>
}<br>func main() {<pre><code>var a int64 = 100
// reflectSetValue1(a) //panic: reflect: reflect.Value.SetInt using unaddressable value
reflectSetValue2(&amp;a)
fmt.Println(a)
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### IsNil() 和 IsValid</span><br><span class="line"></span><br><span class="line">#### IsNil()</span><br><span class="line"></span><br><span class="line">* 函数原型：&#96;func (v Value) IsNil() bool&#96;</span><br><span class="line"></span><br><span class="line">* 判断 v 持有的值是否为&#96;Nil&#96;</span><br><span class="line">  * v 持有的值的分类必须是通道、函数、接口、映射、指针、切片之一，</span><br><span class="line">  * 否则&#96;IsNil&#96;函数会导致 panic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### IsValid</span><br><span class="line"></span><br><span class="line">* 函数原型：&#96;func (v Value) IsValid() bool&#96;</span><br><span class="line"></span><br><span class="line">* 判断 v 是否持有一个值，如果 v 是**Value零值**，返回假，此时v除了IsValid , String, Kind 之外的方法都会导致 panic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 示例</span><br><span class="line"></span><br><span class="line">* &#96;IsNil&#96; 常用于判断指针是否为空</span><br><span class="line">* &#96;IsValid&#96; 常用于判断返回值是否有效</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;go</span><br><span class="line">func main() &#123;</span><br><span class="line">	&#x2F;&#x2F; *int类型空指针</span><br><span class="line">	var a *int</span><br><span class="line">	fmt.Println(&quot;var a *int IsNil:&quot;, reflect.ValueOf(a).IsNil())</span><br><span class="line">	&#x2F;&#x2F; nil值</span><br><span class="line">	fmt.Println(&quot;nil IsValid:&quot;, reflect.ValueOf(nil).IsValid())</span><br><span class="line">	&#x2F;&#x2F; 实例化一个匿名结构体</span><br><span class="line">	b :&#x3D; struct&#123;&#125;&#123;&#125;</span><br><span class="line">	&#x2F;&#x2F; 尝试从结构体中查找&quot;abc&quot;字段</span><br><span class="line">	fmt.Println(&quot;不存在的结构体成员:&quot;, reflect.ValueOf(b).FieldByName(&quot;abc&quot;).IsValid())</span><br><span class="line">	&#x2F;&#x2F; 尝试从结构体中查找&quot;abc&quot;方法</span><br><span class="line">	fmt.Println(&quot;不存在的结构体方法:&quot;, reflect.ValueOf(b).MethodByName(&quot;abc&quot;).IsValid())</span><br><span class="line">	&#x2F;&#x2F; map</span><br><span class="line">	c :&#x3D; map[string]int&#123;&#125;</span><br><span class="line">	&#x2F;&#x2F; 尝试从map中查找一个不存在的键</span><br><span class="line">	fmt.Println(&quot;map中不存在的键：&quot;, reflect.ValueOf(c).MapIndex(reflect.ValueOf(&quot;娜扎&quot;)).IsValid())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="结构体反射"><a href="#结构体反射" class="headerlink" title="结构体反射"></a>结构体反射</h1><h2 id="与结构体相关的方法"><a href="#与结构体相关的方法" class="headerlink" title="与结构体相关的方法"></a>与结构体相关的方法</h2><h2 id="结构体反射示例"><a href="#结构体反射示例" class="headerlink" title="结构体反射示例"></a>结构体反射示例</h2><h1 id="反射是把双刃剑"><a href="#反射是把双刃剑" class="headerlink" title="反射是把双刃剑"></a>反射是把双刃剑</h1><ul>
<li>反射式一个强大并富有表现力的工具，能使得我们写出灵活的代码<ul>
<li>基于反射的代码十分脆弱，反射中类型错误会在真正运行的时候才会引发 panic ，那很可能是在代码写完的很长时间之后</li>
<li>大量使用反射的代码通常难以理解</li>
<li>反射的性能低下</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>-Go LearningNote</category>
      </categories>
  </entry>
  <entry>
    <title>14 接口</title>
    <url>/p/f9eadfe2.html</url>
    <content><![CDATA[<h1 id="14-接口"><a href="#14-接口" class="headerlink" title="14 接口"></a>14 接口</h1><p>[toc]</p>
<ul>
<li><code>Interface</code> 定义了<strong>一个对象的行为规范</strong>，</li>
<li>只定义规范而不实现，由<strong>具体的对象来实现规范的细节</strong></li>
</ul>
<h1 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h1><ul>
<li>`Interface ·是一种抽象的类型</li>
<li><code>Interface</code>  是一组<code>method</code>的集合，是<code>duck-type programming</code>的一种体现</li>
<li>接口的作用：定义一个协定(规则)，<ul>
<li>不用关心其数据，和方法具体是什么</li>
</ul>
</li>
<li>`Interface· 是一种类型</li>
</ul>
<h1 id="为什么使用接口"><a href="#为什么使用接口" class="headerlink" title="为什么使用接口"></a>为什么使用接口</h1><ul>
<li><p>```go<br>type Cat struct{}</p>
<p>func (c Cat) Say() string { return “喵喵喵” }</p>
<p>type Dog struct{}</p>
<p>func (d Dog) Say() string { return “汪汪汪” }</p>
<p>func main() {</p>
<pre><code>c := Cat&#123;&#125;
fmt.Println(&quot;猫:&quot;, c.Say())
d := Dog&#123;&#125;
fmt.Println(&quot;狗:&quot;, d.Say())
</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 共同特点：都会叫</span><br><span class="line">  </span><br><span class="line">  * 有重复代码</span><br><span class="line">* 为了解决 有共同特点而导致的代码重复，设计了接口</span><br><span class="line">* 接口是一种抽象的类型，</span><br><span class="line">  </span><br><span class="line">  * 看到一个接口，只知道通过它的方法能做什么</span><br><span class="line"></span><br><span class="line"># 接口的定义</span><br><span class="line"></span><br><span class="line">* Go 提倡面向接口编程</span><br><span class="line"></span><br><span class="line">* 每个接口由数个方法组成，定义格式:</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    type 接口类型名 interface&#123;</span><br><span class="line">        方法名1(参数列表) 返回值列表</span><br><span class="line">        方法名2(参数列表) 返回值列表</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>接口名</strong>：自定义的类型名</p>
<ul>
<li>一般命名时，在单词后<code>er</code> , 接口名最好能突出该接口的类型含义</li>
</ul>
</li>
<li><p><strong>方法名：</strong>当接口名首字母是大写，并且方法名首字母也是大写时，方法可以被接口是所在的包 之外的代码访问</p>
</li>
<li><p><strong>参数列表、返回值列表：</strong>其中的参数变量名可以省略</p>
</li>
</ul>
</li>
</ul>
<h1 id="实现接口的条件"><a href="#实现接口的条件" class="headerlink" title="实现接口的条件"></a>实现接口的条件</h1><ul>
<li><p>接口 是一个<strong>需要实现的方法列表</strong></p>
</li>
<li><p>实现了接口中所有方法，就实现了这个接口</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>定义<code>Sayer</code> 接口：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Sayer <span class="keyword">interface</span>&#123;</span><br><span class="line">	say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>需要<strong>对dog和cat</strong>分别实现<code>say</code>方法，即可实现Sayer接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dog实现了Sayer接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cat实现了Sayer接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cat)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="接口类型变量"><a href="#接口类型变量" class="headerlink" title="接口类型变量"></a>接口类型变量</h1><ul>
<li><p><strong>接口类型变量</strong> 能<strong>存储所有实现了该接口的实例</strong></p>
<ul>
<li><p>例如，<code>Sayer</code> 类型的变量能存储<code>dog</code>和<code>cat</code>类型的变量</p>
</li>
<li><p>```go<br>func main() {</p>
<pre><code>var x Sayer // 声明一个Sayer类型的变量x
a := cat&#123;&#125;  // 实例化一个cat
b := dog&#123;&#125;  // 实例化一个dog
x = a       // 可以把cat实例直接赋值给x
x.say()     // 喵喵喵
x = b       // 可以把dog实例直接赋值给x
x.say()     // 汪汪汪
</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* &#96;&#96;&#96;go</span><br><span class="line">  &#x2F;&#x2F; 摘自gin框架routergroup.go</span><br><span class="line">  type IRouter interface&#123; ... &#125;</span><br><span class="line">  </span><br><span class="line">  type RouterGroup struct &#123; ... &#125;</span><br><span class="line">  </span><br><span class="line">  var _ IRouter &#x3D; &amp;RouterGroup&#123;&#125;  &#x2F;&#x2F; 确保RouterGroup实现了接口IRouter</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>确保 <code>RouterGroup</code> 一定实现了<code>IRouter</code></p>
</li>
</ul>
<h1 id="值接收者-和-指针接收者-实现接口的区别"><a href="#值接收者-和-指针接收者-实现接口的区别" class="headerlink" title="值接收者 和 指针接收者 实现接口的区别"></a>值接收者 和 指针接收者 实现接口的区别</h1><ul>
<li><p>示例，一个<code>Mover</code> 接口和<code>dog</code> 结构体</p>
<ul>
<li>```go<br>type Mover interface {<pre><code>move()
</code></pre>
}type dog struct {}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 值接收者实现接口</span><br><span class="line"></span><br><span class="line">* dog 类型实现接口：</span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    func (d dog) move() &#123;</span><br><span class="line">    	fmt.Println(&quot;狗会动&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>```go<br>func main() {</p>
<pre><code>var x Mover
var wangcai = dog&#123;&#125; // 旺财是dog类型
x = wangcai         // x可以接收dog类型
var fugui = &amp;dog&#123;&#125;  // 富贵是*dog类型
x = fugui           // x可以接收*dog类型
x.move()
</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 使用值接收者实现接口 后，d**og 结构体和结构体指针类型的变量** 都可以赋值给该接口变量</span><br><span class="line">  </span><br><span class="line">  * 由于Go中有对指针类型变量求值的语法糖，指针类型内部会自动求值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 指针接收者实现接口</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;go</span><br><span class="line">func (d *dog) move() &#123;</span><br><span class="line">	fmt.Println(&quot;狗会动&quot;)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">	var x Mover</span><br><span class="line">	var wangcai &#x3D; dog&#123;&#125; &#x2F;&#x2F; 旺财是dog类型</span><br><span class="line">	x &#x3D; wangcai         &#x2F;&#x2F; x不可以接收dog类型</span><br><span class="line">	var fugui &#x3D; &amp;dog&#123;&#125;  &#x2F;&#x2F; 富贵是*dog类型</span><br><span class="line">	x &#x3D; fugui           &#x2F;&#x2F; x可以接收*dog类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时实现<code>Mover</code> 接口的是<code>*dog</code>类型，所以不能给 x 传入 dog类型的wangcai，此时x只能存储*dog类型的值</p>
</li>
</ul>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ul>
<li><p>能否通过编译</p>
</li>
<li><p>```go<br>type People interface {</p>
<pre><code>Speak(string) string
</code></pre>
<p>}</p>
<p>type Student struct{}</p>
<p>func (stu *Student) Speak(think string) (talk string) {</p>
<pre><code>if think == &quot;sb&quot; &#123;
    talk = &quot;你是个大帅比&quot;
&#125; else &#123;
    talk = &quot;您好&quot;
&#125;
return
</code></pre>
<p>}</p>
<p>func main() {</p>
<pre><code>var peo People = Student&#123;&#125;
think := &quot;bitch&quot;
fmt.Println(peo.Speak(think))
</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 不能。可能是因为&#96;var peo People &#x3D; Student&#123;&#125;&#96;</span><br><span class="line">  </span><br><span class="line">  * 实现People接口的是&#96;*Student&#96;类型</span><br><span class="line">* 将其修改后：&#96;您好&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 类型与接口的关系</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 一个类型实现多个接口</span><br><span class="line"></span><br><span class="line">* **一个类型**可以**同时实现多个接口**，而接口间彼此独立，不知道对方的实现</span><br><span class="line"></span><br><span class="line">  * 例如，狗可以叫，也可以动。定义&#96;Sayer&#96; 和&#96;Mover&#96; 接口：</span><br><span class="line"></span><br><span class="line">    * &#96;&#96;&#96;go</span><br><span class="line">      &#x2F;&#x2F; Sayer 接口</span><br><span class="line">      type Sayer interface &#123;</span><br><span class="line">      	say()</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      &#x2F;&#x2F; Mover 接口</span><br><span class="line">      type Mover interface &#123;</span><br><span class="line">      	move()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>对 dog 实现<code>Sayer</code> 和 <code>Mover</code> 接口</p>
<ul>
<li>```go<br>type dog struct {<pre><code>name string
</code></pre>
}// 实现Sayer接口<br>func (d dog) say() {<pre><code>fmt.Printf(&quot;%s会叫汪汪汪\n&quot;, d.name)
</code></pre>
}// 实现Mover接口<br>func (d dog) move() {<pre><code>fmt.Printf(&quot;%s会动\n&quot;, d.name)
</code></pre>
}func main() {<pre><code>var x Sayer
var y Mover

var a = dog&#123;name: &quot;旺财&quot;&#125;
x = a
y = a
x.say()
y.move()
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 多个类型实现统一接口</span><br><span class="line"></span><br><span class="line">* **不同的类型** 可以 **实现统一接口**</span><br><span class="line"></span><br><span class="line">  * 定义一个&#96;Mover&#96;接口，有一个 move 方法</span><br><span class="line"></span><br><span class="line">    * &#96;&#96;&#96;go</span><br><span class="line">      &#x2F;&#x2F; Mover 接口</span><br><span class="line">      type Mover interface &#123;</span><br><span class="line">      	move()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>多个类型实现<code>Mover</code>的方法<code>move</code></p>
<ul>
<li>```go<br>type dog struct {<pre><code>name string
</code></pre>
}type car struct {<pre><code>brand string
</code></pre>
}// dog类型实现Mover接口<br>func (d dog) move() {<pre><code>fmt.Printf(&quot;%s会跑\n&quot;, d.name)
</code></pre>
}// car类型实现Mover接口<br>func (c car) move() {<pre><code>fmt.Printf(&quot;%s速度70迈\n&quot;, c.brand)
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">* 在代码中，就可以把不同的类型，当成拥有同一特性的物体处理，不需要关注具体是什么，</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	var x Mover</span><br><span class="line">    	var a &#x3D; dog&#123;name: &quot;旺财&quot;&#125;</span><br><span class="line">    	var b &#x3D; car&#123;brand: &quot;保时捷&quot;&#125;</span><br><span class="line">    	x &#x3D; a</span><br><span class="line">    	x.move()</span><br><span class="line">    	x &#x3D; b</span><br><span class="line">    	x.move()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现</p>
<ul>
<li>```go<br>// WashingMachine 洗衣机<br>type WashingMachine interface {<pre><code>wash()
dry()
</code></pre>
}// 甩干器<br>type dryer struct{}// 实现WashingMachine接口的dry()方法<br>func (d dryer) dry() {<pre><code>fmt.Println(&quot;甩一甩&quot;)
</code></pre>
}// 海尔洗衣机<br>type haier struct {<pre><code>dryer //嵌入甩干器
</code></pre>
}// 实现WashingMachine接口的wash()方法<br>func (h haier) wash() {<pre><code>fmt.Println(&quot;洗刷刷&quot;)
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 接口嵌套</span><br><span class="line"></span><br><span class="line">* 接口与接口 间 可以通过 嵌套创造新的接口</span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    &#x2F;&#x2F; Sayer 接口</span><br><span class="line">    type Sayer interface &#123;</span><br><span class="line">    	say()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; Mover 接口</span><br><span class="line">    type Mover interface &#123;</span><br><span class="line">    	move()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 接口嵌套</span><br><span class="line">    type animal interface &#123;</span><br><span class="line">    	Sayer</span><br><span class="line">    	Mover</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>嵌套得到的接口 使用与普通接口一致，</p>
<ul>
<li>```go<br>type cat struct {<pre><code>name string
</code></pre>
}func (c cat) say() {<pre><code>fmt.Println(&quot;喵喵喵&quot;)
</code></pre>
}func (c cat) move() {<pre><code>fmt.Println(&quot;猫会动&quot;)
</code></pre>
}func main() {<pre><code>var x animal
x = cat&#123;name: &quot;花花&quot;&#125;
x.move()
x.say()
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 空接口</span><br><span class="line"></span><br><span class="line">## 空接口的定义</span><br><span class="line"></span><br><span class="line">* 没有指定任何方法的接口，**任何类型都实现了空接口**</span><br><span class="line"></span><br><span class="line">* **空接口类型的变量**可以**存储任意类型的变量**</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	&#x2F;&#x2F; 定义一个空接口x</span><br><span class="line">    	var x interface&#123;&#125;</span><br><span class="line">    	s :&#x3D; &quot;Hello 沙河&quot;</span><br><span class="line">    	x &#x3D; s</span><br><span class="line">    	fmt.Printf(&quot;type:%T value:%v\n&quot;, x, x)</span><br><span class="line">    	i :&#x3D; 100</span><br><span class="line">    	x &#x3D; i</span><br><span class="line">    	fmt.Printf(&quot;type:%T value:%v\n&quot;, x, x)</span><br><span class="line">    	b :&#x3D; true</span><br><span class="line">    	x &#x3D; b</span><br><span class="line">    	fmt.Printf(&quot;type:%T value:%v\n&quot;, x, x)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="空接口的应用"><a href="#空接口的应用" class="headerlink" title="空接口的应用"></a>空接口的应用</h2><h3 id="空接口作为函数的参数"><a href="#空接口作为函数的参数" class="headerlink" title="空接口作为函数的参数"></a>空接口作为函数的参数</h3><ul>
<li><p>使用空接口可以实现接受 <strong>任意类型的函数参数</strong></p>
<ul>
<li>```go<br>// 空接口作为函数参数<br>func show(a interface{}) {<pre><code>fmt.Printf(&quot;type:%T value:%v\n&quot;, a, a)
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 空接口作为 map 的值</span><br><span class="line"></span><br><span class="line">* 使用空接口实现 可以**保存任意值的字典**</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    &#x2F;&#x2F; 空接口作为map值</span><br><span class="line">    	var studentInfo &#x3D; make(map[string]interface&#123;&#125;)</span><br><span class="line">    	studentInfo[&quot;name&quot;] &#x3D; &quot;沙河娜扎&quot;</span><br><span class="line">    	studentInfo[&quot;age&quot;] &#x3D; 18</span><br><span class="line">    	studentInfo[&quot;married&quot;] &#x3D; false</span><br><span class="line">    	fmt.Println(studentInfo)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h1><ul>
<li>空接口实现，可以使得map存储任意类型的值，</li>
<li>如何获取存储的具体数据</li>
</ul>
<h2 id="接口值"><a href="#接口值" class="headerlink" title="接口值"></a>接口值</h2><ul>
<li><p>一个接口的值 <strong>简称为接口值</strong>。<del>废话</del></p>
</li>
<li><p><strong>接口值</strong> ： <code>一个具体的类型</code> 和 <code>具体类型的值</code> 组成</p>
<ul>
<li>称为 接口的<code>动态类型</code> 和 <code>动态值</code></li>
</ul>
</li>
<li><p><strong>示例：</strong></p>
<ul>
<li><p>```go<br>var w io.Writer<br>w = os.Stdout<br>w = new(bytes.Buffer)<br>w = nil</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * ![接口值图解](E:\LearningNotes\Go\14 接口.assets\interface.png)</span><br><span class="line"></span><br><span class="line">* **判断空接口中的值**，使用类型断言，格式</span><br><span class="line">  * &#96;x.(T)&#96;</span><br><span class="line">  * &#96;x&#96; : 表示类型为&#96;interface&#123;&#125;&#96; 的变量</span><br><span class="line">  * &#96;T &#96;：表示断言 x 可能是的类型</span><br><span class="line">* 该语法返回两个参数</span><br><span class="line">  * **第一个：**x 转化为 T 类型后的变量</span><br><span class="line">  * **第二个 ：**布尔值，若为&#96;true&#96; 表示断言成功</span><br><span class="line"></span><br><span class="line">* 示例：</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	var x interface&#123;&#125;</span><br><span class="line">    	x &#x3D; &quot;Hello 沙河&quot;</span><br><span class="line">    	v, ok :&#x3D; x.(string)</span><br><span class="line">    	if ok &#123;</span><br><span class="line">    		fmt.Println(v)</span><br><span class="line">    	&#125; else &#123;</span><br><span class="line">    		fmt.Println(&quot;类型断言失败&quot;)</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>switch</code> 语句实现：</p>
<ul>
<li>```go<br>func justifyType(x interface{}) {<pre><code>switch v := x.(type) &#123;
case string:
    fmt.Printf(&quot;x is a string，value is %v\n&quot;, v)
case int:
    fmt.Printf(&quot;x is a int is %v\n&quot;, v)
case bool:
    fmt.Printf(&quot;x is a bool is %v\n&quot;, v)
default:
    fmt.Println(&quot;unsupport type！&quot;)
&#125;
</code></pre>
}<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* &#x3D;&#x3D;空接口 可以存储任意类型值&#x3D;&#x3D;</span><br><span class="line">* **注意**：只有当两个以上的**具体类型必须以相同的方式处理**时，才需要定义接口</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 练习题</span><br><span class="line"></span><br><span class="line">* 使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库</span><br><span class="line"></span><br><span class="line">* &#96;os&#96; 和 &#96;io&#96; 包的学习：</span><br><span class="line"></span><br><span class="line">  * &#96;os&#96;</span><br><span class="line"></span><br><span class="line">  * &#96;io&#96;</span><br><span class="line"></span><br><span class="line">    * &#96;io.Writer&#96; ：表示一个编写器，从缓冲区读取数据，并将数据写入目标资源</span><br><span class="line"></span><br><span class="line">      * 必须实现&#96;io.Writer&#96;接口的唯一方法&#96;Write(p []byte)&#96; </span><br><span class="line"></span><br><span class="line">      * &#96;&#96;&#96;go</span><br><span class="line">        type Writer interface &#123;</span><br><span class="line">            Write(p []byte) (n int, err error) &#x2F;&#x2F;返回写入到目标资源的字节数，发生错误时的错误</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>-Go LearningNote</category>
      </categories>
  </entry>
  <entry>
    <title>13 包</title>
    <url>/p/9d9aaa60.html</url>
    <content><![CDATA[<h1 id="13-包"><a href="#13-包" class="headerlink" title="13 包"></a>13 包</h1><p>[toc]</p>
<ul>
<li>在工程化Go 开发项目中，Go 的源码复用建立在 包 基础之上</li>
<li>定义包、导出包内容、导入其他包</li>
</ul>
<h2 id="包介绍"><a href="#包介绍" class="headerlink" title="包介绍"></a>包介绍</h2><ul>
<li><code>package</code> 是多个Go 源码的集合，高级的代码复用方案</li>
<li>内置包：<code>fmt</code>, <code>os</code>,<code>io</code></li>
</ul>
<h2 id="定义包"><a href="#定义包" class="headerlink" title="定义包"></a>定义包</h2><ul>
<li><strong>一个包</strong> 简单理解为存放<code>.go</code>文件的<strong>文件夹</strong><ul>
<li>该文件夹下的所有<code>go</code>文件，都要在代码第一行添加<code>package 包名</code>,声明该文件归属的包</li>
</ul>
</li>
<li>==注意：==<ul>
<li>一个文件夹下，直接包含的文件只能归属于一个<code>package</code>, 同样一个<code>package</code>文件不能在多个文件夹下</li>
<li>包名不可以和文件夹名一样</li>
<li>包名为<code>main</code>的包，是程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含<code>main</code>包的源代码则不会得到可执行文件</li>
</ul>
</li>
</ul>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><ul>
<li><p>如果想在一个包中，引用另一个包里的 <strong>标识符</strong>，该标识符必须对外可见（<code>public</code>）,</p>
</li>
<li><p>Go 中只需要将标识符的首字母大写，即为<code>public</code></p>
</li>
<li><p>```go<br>package pkg2</p>
<p>import “fmt”</p>
<p>// 包变量可见性</p>
<p>var a = 100 // 首字母小写，外部包不可见，只能在当前包内使用</p>
<p>// 首字母大写外部包可见，可在其他包中使用<br>const Mode = 1</p>
<p>type person struct { // 首字母小写，外部包不可见，只能在当前包内使用</p>
<pre><code>name string
</code></pre>
<p>}</p>
<p>// 首字母大写，外部包可见，可在其他包中使用<br>func Add(x, y int) int {</p>
<pre><code>return x + y
</code></pre>
<p>}</p>
<p>func age() { // 首字母小写，外部包不可见，只能在当前包内使用</p>
<pre><code>var Age = 18 // 函数局部变量，外部包不可见，只能在当前函数内使用
fmt.Println(Age)
</code></pre>
<p>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 结构体的 **字段名和接口中的方法名** 如果**首字母都是大写**，外部包可以访问这些字段和方法</span><br><span class="line"></span><br><span class="line">  * &#96;&#96;&#96;go</span><br><span class="line">    type Student struct &#123;</span><br><span class="line">    	Name  string &#x2F;&#x2F;可在包外访问的方法</span><br><span class="line">    	class string &#x2F;&#x2F;仅限包内访问的字段</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    type Payer interface &#123;</span><br><span class="line">    	init() &#x2F;&#x2F;仅限包内访问的方法</span><br><span class="line">    	Pay()  &#x2F;&#x2F;可在包外访问的方法</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h2><ul>
<li>使用<code>import</code>关键字 导入包<ul>
<li><code>import &quot;包的路径&quot;</code></li>
</ul>
</li>
<li>注意：<ul>
<li>import 导入语句通常放在文件开头包声明语句下面</li>
<li>导入的包名需要使用双引号包裹</li>
<li>包名是从<code>$GOPATH/src/</code> 后开始的</li>
<li>禁止循环导入包</li>
</ul>
</li>
</ul>
<h3 id="单行导入"><a href="#单行导入" class="headerlink" title="单行导入"></a>单行导入</h3><ul>
<li><code>import &quot;&quot;</code></li>
<li><code>import &quot;&quot;</code></li>
</ul>
<h3 id="多行导入"><a href="#多行导入" class="headerlink" title="多行导入"></a>多行导入</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="自定义包名"><a href="#自定义包名" class="headerlink" title="自定义包名"></a>自定义包名</h2><ul>
<li>导入包名时，可以为导入的包设置别名<ul>
<li><code>import 别名 &quot;包的路径&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="匿名导入包"><a href="#匿名导入包" class="headerlink" title="匿名导入包"></a>匿名导入包</h2><ul>
<li>如果只希望导入包，不使用内部数据，可以使用匿名导入：<ul>
<li><code>import _ &quot;包的路径&quot;</code></li>
</ul>
</li>
<li>一样会被编译到可执行文件中</li>
</ul>
<h2 id="init-初始化函数"><a href="#init-初始化函数" class="headerlink" title="init() 初始化函数"></a>init() 初始化函数</h2><h3 id="init-函数介绍"><a href="#init-函数介绍" class="headerlink" title="init() 函数介绍"></a>init() 函数介绍</h3><ul>
<li><p>Go 语言程序执行时，导入包语句 会自动触发包内部<code>init()</code> 函数的调用</p>
</li>
<li><p><code>init()</code> 函数没有参数和返回值</p>
</li>
<li><p><code>init()</code>函数在程序运行时，<strong>会被自动调用执行</strong>，<strong>不能在代码中主动调用</strong></p>
</li>
<li><p>包中 <code>init()</code> 函数的执行时机</p>
<ul>
<li><img src="E:\LearningNotes\Go\包.assets\init01.png" alt="包中的init()执行时机"></li>
</ul>
</li>
</ul>
<h3 id="init-函数执行顺序"><a href="#init-函数执行顺序" class="headerlink" title="init() 函数执行顺序"></a>init() 函数执行顺序</h3><ul>
<li>Go 会从<code>main</code> 包开始检查其导入的所有包，每个包有可能导入了其他包</li>
<li>Go 编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码</li>
<li>在运行时，最后被导入的包 最先被初始化并调用其<code>init()</code> 函数<ul>
<li><img src="E:\LearningNotes\Go\包.assets\init02.png" alt="包之间的init()执行顺序"></li>
</ul>
</li>
</ul>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><ul>
<li>编写一个<code>calc</code>包实现加减乘除四个功能函数，在<code>snow</code>这个包中导入并使用加减乘除四个函数实现数学运算</li>
</ul>
]]></content>
      <categories>
        <category>-Go LearningNote</category>
      </categories>
  </entry>
  <entry>
    <title>12 结构体</title>
    <url>/p/9a7f2d8e.html</url>
    <content><![CDATA[<h1 id="12-结构体"><a href="#12-结构体" class="headerlink" title="12 结构体"></a>12 结构体</h1><p>[toc]</p>
<h1 id="12-结构体-1"><a href="#12-结构体-1" class="headerlink" title="12 结构体"></a>12 结构体</h1><ul>
<li>Go 中无 ·类·