<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>10 内置函数介绍</title>
    <url>/p/bacdba6b.html</url>
    <content><![CDATA[<h2 id="10-内置函数介绍"><a href="#10-内置函数介绍" class="headerlink" title="10 内置函数介绍"></a>10 内置函数介绍</h2><table>
<thead>
<tr>
<th>内置函数</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>close</td>
<td>关闭 channel</td>
</tr>
<tr>
<td>len</td>
<td>求长度(string, array, slice, map, channel)</td>
</tr>
<tr>
<td>new</td>
<td>分配内存，主要用来分配值类型，int，struct。返回的是指针</td>
</tr>
<tr>
<td>make</td>
<td>分配内存，主要用来分配引用类型，chan，map, slice</td>
</tr>
<tr>
<td>append</td>
<td>用来追加元素到数组、slice</td>
</tr>
<tr>
<td>panic, recover</td>
<td>做错误处理</td>
</tr>
</tbody></table>
<h4 id="panic-recover"><a href="#panic-recover" class="headerlink" title="panic/recover"></a>panic/recover</h4><ul>
<li><p>Go 无异常机制，但是使用 <code>panic/recover</code> 模式来处理错误</p>
</li>
<li><p><code>panic</code> 可在<strong>任何地方引发</strong>，但<code>recover</code> 只有在**<code>defer</code> 调用的函数中**有效</p>
<ul>
<li><p>例子：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcA</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;func A&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcB</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="built_in">panic</span>(<span class="string">&quot;panic in B&quot;</span>)		<span class="comment">//panic</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">funcC</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;func C&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	funcA()</span><br><span class="line">	funcB()</span><br><span class="line">	funcC()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>输出：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">A</span></span></span><br><span class="line"><span class="built_in">panic</span>: <span class="built_in">panic</span> in B</span><br><span class="line"></span><br><span class="line">goroutine <span class="number">1</span> [running]:</span><br><span class="line">main.funcB(...)</span><br><span class="line">	e:/LearningNotes/Go/_function/<span class="built_in">panic</span>.<span class="keyword">go</span>:<span class="number">10</span></span><br><span class="line">main.main()</span><br><span class="line">	e:/LearningNotes/Go/_function/<span class="built_in">panic</span>.<span class="keyword">go</span>:<span class="number">18</span> +<span class="number">0xa5</span></span><br><span class="line">exit status <span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li><p>调用函数 funcB 时，引发了<code>panic</code>导致程序崩溃异常退出</p>
</li>
<li><p>此时，我们可以使用 <code>recover</code> 将程序恢复，继续执行</p>
<ul>
<li>```go<br>func funcA() {<pre><code>fmt.Println(&quot;func A&quot;)
</code></pre>
}func funcB() {<pre><code>defer func() &#123;
    err := recover()
    //如果程序出出现了panic错误,可以通过recover恢复过来
    if err != nil &#123;
        fmt.Println(&quot;recover in B&quot;)
    &#125;
&#125;()
panic(&quot;panic in B&quot;)
</code></pre>
}func funcC() {<pre><code>fmt.Println(&quot;func C&quot;)
</code></pre>
}<br>func main() {<pre><code>funcA()
funcB()
funcC()
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * 注意：</span><br><span class="line"></span><br><span class="line">    * `recoer()` 必须搭配 `defer` 使用</span><br><span class="line">    * `defer` 一定要在可能引发 `panic` **的语句前定义**</span><br><span class="line"></span><br><span class="line">### 练习题</span><br><span class="line"></span><br><span class="line">* **分金币**</span><br><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  /*</span><br><span class="line">  你有50枚金币，需要分配给以下几个人：Matthew,Sarah,Augustus,Heidi,Emilie,Peter,Giana,Adriano,Aaron,Elizabeth。</span><br><span class="line">  分配规则如下：</span><br><span class="line">  a. 名字中每包含1个&#x27;e&#x27;或&#x27;E&#x27;分1枚金币</span><br><span class="line">  b. 名字中每包含1个&#x27;i&#x27;或&#x27;I&#x27;分2枚金币</span><br><span class="line">  c. 名字中每包含1个&#x27;o&#x27;或&#x27;O&#x27;分3枚金币</span><br><span class="line">  d: 名字中每包含1个&#x27;u&#x27;或&#x27;U&#x27;分4枚金币</span><br><span class="line">  写一个程序，计算每个用户分到多少金币，以及最后剩余多少金币？</span><br><span class="line">  程序结构如下，请实现 ‘dispatchCoin’ 函数</span><br><span class="line">  */</span><br><span class="line">  var (</span><br><span class="line">  	coins = 50</span><br><span class="line">  	users = []string&#123;</span><br><span class="line">  		&quot;Matthew&quot;, &quot;Sarah&quot;, &quot;Augustus&quot;, &quot;Heidi&quot;, &quot;Emilie&quot;, &quot;Peter&quot;, &quot;Giana&quot;, &quot;Adriano&quot;, &quot;Aaron&quot;, &quot;Elizabeth&quot;,</span><br><span class="line">  	&#125;</span><br><span class="line">  	distribution = make(map[string]int, len(users))</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	left := dispatchCoin()</span><br><span class="line">  	fmt.Println(&quot;剩下：&quot;, left)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>我的答案：</p>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	coins = <span class="number">50</span></span><br><span class="line">	users = []<span class="keyword">string</span>&#123;</span><br><span class="line">		<span class="string">&quot;Matthew&quot;</span>, <span class="string">&quot;Sarah&quot;</span>, <span class="string">&quot;Augustus&quot;</span>, <span class="string">&quot;Heidi&quot;</span>, <span class="string">&quot;Emilie&quot;</span>, <span class="string">&quot;Peter&quot;</span>, <span class="string">&quot;Giana&quot;</span>, <span class="string">&quot;Adriano&quot;</span>, <span class="string">&quot;Aaron&quot;</span>, <span class="string">&quot;Elizabeth&quot;</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	distribution = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="built_in">len</span>(users))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">dispatchCoin</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	ans := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line">	<span class="keyword">for</span> _, i := <span class="keyword">range</span> users &#123;</span><br><span class="line">		<span class="keyword">for</span> _, j := <span class="keyword">range</span> i &#123;</span><br><span class="line">			k := j</span><br><span class="line">			<span class="keyword">switch</span> k &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">				ans[i] += <span class="number">1</span></span><br><span class="line">				coins -= <span class="number">1</span></span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">				ans[i] += <span class="number">2</span></span><br><span class="line">				coins -= <span class="number">2</span></span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">				ans[i] += <span class="number">3</span></span><br><span class="line">				coins -= <span class="number">3</span></span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;U&#x27;</span>:</span><br><span class="line">				ans[i] += <span class="number">4</span></span><br><span class="line">				coins -= <span class="number">4</span></span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(ans)</span><br><span class="line">	<span class="keyword">return</span> (coins)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	left := dispatchCoin()</span><br><span class="line">	fmt.Println(<span class="string">&quot;剩下：&quot;</span>, left)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>1 变量和常量</title>
    <url>/p/1b6782a7.html</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="1-变量和常量"><a href="#1-变量和常量" class="headerlink" title="1 变量和常量"></a>1 变量和常量</h2>]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>11 指针</title>
    <url>/p/9b3b896b.html</url>
    <content><![CDATA[<h2 id="11-指针"><a href="#11-指针" class="headerlink" title="11 指针"></a>11 指针</h2><ul>
<li>与C/C++ 中的指针不同，Go 中的指针不能进行偏移和运算，是安全指针<ul>
<li>取地址符：<code>&amp;</code></li>
<li>根据指针取值：<code>*</code></li>
</ul>
</li>
<li>需要知道：指针地址、指针类型、指针取值</li>
</ul>
<h3 id="指针地址和指针类型"><a href="#指针地址和指针类型" class="headerlink" title="指针地址和指针类型"></a>指针地址和指针类型</h3><ul>
<li>每个变量运行时都有一个地址，代表变量在内存中的位置</li>
<li>指针类型：<code>*int</code>…</li>
<li>取变量指针的语法：<code>ptr := &amp;v</code><ul>
<li><code>v</code> : <strong>被取地址的变量</strong></li>
<li><code>ptr</code> ：<strong>接收地址的变量</strong>，ptr 的类型就为<code>*T</code>，称为T的指针类型</li>
</ul>
</li>
</ul>
<h3 id="指针取值"><a href="#指针取值" class="headerlink" title="指针取值"></a>指针取值</h3><ul>
<li>对普通变量使用 <code>&amp;</code> 取地址后，会获得这个变量的指针<ul>
<li>可以对指针使用<code>*</code>操作，对指针取值</li>
<li>根据指针去内存取值</li>
</ul>
</li>
</ul>
<p><strong>总结：</strong> 取地址操作符<code>&amp;</code>和取值操作符<code>*</code>是一对互补操作符，<code>&amp;</code>取出地址，<code>*</code>根据地址取出地址指向的值。</p>
<p><strong>变量、指针地址、指针变量、取地址、取值</strong>的相互关系和特性如下：</p>
<ul>
<li>对变量进行<strong>取地址（&amp;）操作</strong>，可以获得这个变量的<strong>指针变量</strong>。</li>
<li>指针变量的值是<strong>指针地址</strong>。</li>
<li>对指针变量进行<strong>取值（*）操作</strong>，可以获得指针变量指向的原变量的值。</li>
</ul>
<ul>
<li>定义函数时，可以传入地址，使用<strong>指针传值</strong></li>
</ul>
<h3 id="new-和-make"><a href="#new-和-make" class="headerlink" title="new 和 make"></a>new 和 make</h3><ul>
<li><p>Go 中对于<strong>引用类型的变量</strong>，我们在使用时，不仅要声明它，还要<strong>为其分配内存</strong>，否则其值无法存储</p>
</li>
<li><p>对于<strong>值类型的声明</strong>，不需要分配内存空间，因为他们在声明的时候，已经<strong>默认分配好了</strong>内存空间</p>
<ul>
<li>```go<br>func main() {<pre><code>var a *int
*a = 100
fmt.Println(*a)

var b map[string]int
b[&quot;沙河娜扎&quot;] = 100
fmt.Println(b)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* `new`, `make` 用来分配内存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### new</span><br><span class="line"></span><br><span class="line">* 内置函数</span><br><span class="line"></span><br><span class="line">* 函数原型：`func new(Type) *Type`</span><br><span class="line"></span><br><span class="line">  * Type : new 只接受一个参数，是一个类型</span><br><span class="line">  * *Type ：new函数返回一个指向该类型内存地址的指针</span><br><span class="line"></span><br><span class="line">* 使用`new`得到是一个指针，并且该指针对应的值，为**该类型的零值**</span><br><span class="line"></span><br><span class="line">  * 示例：</span><br><span class="line"></span><br><span class="line">    ```go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	a := new(int)</span><br><span class="line">    	b := new(bool)</span><br><span class="line">    	fmt.Printf(&quot;%T\n&quot;, a) // *int</span><br><span class="line">    	fmt.Printf(&quot;%T\n&quot;, b) // *bool</span><br><span class="line">    	fmt.Println(*a)       // 0</span><br><span class="line">    	fmt.Println(*b)       // false</span><br><span class="line">    &#125;	</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>对于<code>var a *int</code>: </p>
<ul>
<li>只是声明了一个指针变量，但未初始化, 不能被赋值</li>
<li>指针是引用类型，需要初始化才有内存空间</li>
<li></li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a *<span class="keyword">int</span></span><br><span class="line">a = <span class="built_in">new</span>(<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure>



<h4 id="make"><a href="#make" class="headerlink" title="make"></a>make</h4><ul>
<li><p>也是<strong>用于内存分配</strong>，</p>
</li>
<li><p>与 <code>new</code> 不同，只用于<code>slice</code> , <code>map</code> , <code>chan</code> 的内存创建</p>
</li>
<li><p>而且函数返回的类型就是类型本身, 而非指针类型，因为这三种类型就是引用类型，所以没必要返回他们的指针</p>
</li>
<li><p><code>make</code> 的原型：<code>func make(t Type, size ...InterType) Type</code></p>
</li>
<li><p>需要使用make 对<code>slice</code>, <code>map</code>,<code>channel</code> 进行初始化</p>
<ul>
<li><pre><code class="go">m := make(map[string]int,10)
</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="new-和-make-的区别"><a href="#new-和-make-的区别" class="headerlink" title="new 和 make 的区别"></a>new 和 make 的区别</h4><ul>
<li>二者都是用于内存分配</li>
<li><code>make</code> 只用于<code>slice</code>, <code>map</code>, <code>channel</code> 的初始化，并且返回的还是这<strong>三个引用类型的本身</strong></li>
<li><code>new</code> 用于类型的内存分配，并且内存对应的值为 该类型的零值，**返回的是指向该类型的指针</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>12 结构体</title>
    <url>/p/9a7f2d8e.html</url>
    <content><![CDATA[<h1 id="12-结构体"><a href="#12-结构体" class="headerlink" title="12 结构体"></a>12 结构体</h1><ul>
<li>Go 中无 ·类· 的概念，不支持类的继承等面向对象的概念</li>
<li>通过 <strong>结构体的内嵌再配合接口</strong> 比面向对象具有更高的扩展性和灵活性</li>
</ul>
<h2 id="类型别名和自定义类型"><a href="#类型别名和自定义类型" class="headerlink" title="类型别名和自定义类型"></a>类型别名和自定义类型</h2><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><ul>
<li>Go 中的基本数据类型：<code>string</code>, <code>int</code>… ,<code>浮点数</code>等</li>
<li>Go 可以使用<code>type</code> 关键字定义自定义类型</li>
<li>自定义类型：定义了一个全新的类型<ul>
<li>可以基于内置基本数据类型</li>
<li>可以通过struct定义</li>
</ul>
</li>
<li><code>type name T</code></li>
<li>name 就是一种新类型，具有 T类型的特性</li>
</ul>
<h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><ul>
<li><strong>类型别名</strong>规定：<code>type TypeAlias = Type</code><ul>
<li><code>TypeAlias</code> 只是<code>Type</code> 的<strong>别名</strong>，</li>
<li><strong>本质上是同一个类型</strong></li>
</ul>
</li>
<li><code>rune</code> 和 <code>byte</code> 就是类型别名：<ul>
<li><code>type rune = int32</code></li>
<li><code>type byte = uint8</code></li>
</ul>
</li>
</ul>
<h3 id="类型定义-和-类型别名的区别"><a href="#类型定义-和-类型别名的区别" class="headerlink" title="类型定义 和 类型别名的区别"></a>类型定义 和 类型别名的区别</h3><ul>
<li><code>type NewInt int</code> : <code>%T</code> : <code>main.NewInt</code></li>
<li><code>type MyInt = int</code>: <code>%T</code> : <code>int</code></li>
</ul>
<p>结果显示a的类型是<code>main.NewInt</code>，表示<strong>main包下定义</strong>的<code>NewInt</code>类型。</p>
<p>b的类型是<code>int</code>。<code>MyInt</code>类型只会在代码中存在，编译完成时并不会有<code>MyInt</code>类型。</p>
<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul>
<li><strong>基本数据类型</strong>可以表示一些事物的部分属性</li>
<li><strong>结构体</strong>可以封装多个基本数据类型，表达一个事物的全部属性<ul>
<li>本质上是一种聚合类型</li>
</ul>
</li>
<li>Go 通过struct实现面向对象</li>
</ul>
<h3 id="结构体的定义"><a href="#结构体的定义" class="headerlink" title="结构体的定义"></a>结构体的定义</h3><ul>
<li><p>使用<code>type</code> 和 <code>struct</code></p>
<ul>
<li>```go<br>type 类型名 struct{<pre><code>字段名 字段类型
字段名 字段类型
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * 类型名：同一个包内不能重复</span><br><span class="line"></span><br><span class="line">  * 字段名：字段名必须唯一，同样字段类型的字段名可写在同一行</span><br><span class="line"></span><br><span class="line">  * 字段类型：结构体字段的具体类型</span><br><span class="line"></span><br><span class="line">### 结构体实例化</span><br><span class="line"></span><br><span class="line">* 只有当结构体实例化时，才会真正的分配内存，才能使用结构体的字段</span><br><span class="line">* 使用关键字`var`声明：`var 结构体实例 结构体类型`</span><br><span class="line"></span><br><span class="line">#### 基本实例化</span><br><span class="line"></span><br><span class="line">* 声明后，使用操作符`.`访问结构体字段（成员变量）进行初始化</span><br><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  type person struct &#123;</span><br><span class="line">  	name string</span><br><span class="line">  	city string</span><br><span class="line">  	age  int8</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	var p1 person</span><br><span class="line">  	p1.name = &quot;沙河娜扎&quot;</span><br><span class="line">  	p1.city = &quot;北京&quot;</span><br><span class="line">  	p1.age = 18</span><br><span class="line">  	fmt.Printf(&quot;p1=%v\n&quot;, p1)  //p1=&#123;沙河娜扎 北京 18&#125;</span><br><span class="line">  	fmt.Printf(&quot;p1=%#v\n&quot;, p1) //p1=main.person&#123;name:&quot;沙河娜扎&quot;, city:&quot;北京&quot;, age:18&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="匿名结构体"><a href="#匿名结构体" class="headerlink" title="匿名结构体"></a>匿名结构体</h4><ul>
<li><p>定义一些临时数据结构，使用匿名结构体</p>
<p><code>var user struct&#123;Name string; Age int&#125;</code></p>
</li>
</ul>
<h4 id="创建指针类型结构体"><a href="#创建指针类型结构体" class="headerlink" title="创建指针类型结构体"></a>创建指针类型结构体</h4><ul>
<li><p>可以使用<code>new</code> 对结构体进行实例化，得到结构体的地址</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">new</span>(person)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>,p2) <span class="comment">//*main.person</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v&quot;</span>,p2) <span class="comment">//&amp;main.person(..)</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>p2</code> 是一个结构体指针</p>
</li>
<li><p>注意：Go 支持<strong>对结构体指针</strong>直接使用<code>.</code>访问结构体成员</p>
</li>
</ul>
<h4 id="取结构体的地址实例化"><a href="#取结构体的地址实例化" class="headerlink" title="取结构体的地址实例化"></a>取结构体的地址实例化</h4><ul>
<li><p>使用<code>&amp;</code> 对结构体进行取地址操作，相当于对该结构体类型 进行了一次<code>new</code>实例化操作</p>
</li>
<li><p>```go<br>p3 := &amp;person()<br>p3.name = “qimi”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* `p3.name = &quot;qimi&quot;` 在底层 是`(*p3).name = &quot;qimi&quot;`</span><br><span class="line"></span><br><span class="line">  * 是 Go 帮我们实现的语法糖</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 结构体初始化</span><br><span class="line"></span><br><span class="line">* **未初始化的结构体**，其成员变量都是对应其类型的零值</span><br><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  type person struct &#123;</span><br><span class="line">  	name string</span><br><span class="line">  	city string</span><br><span class="line">  	age  int8</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	var p4 person</span><br><span class="line">  	fmt.Printf(&quot;p4=%#v\n&quot;, p4) //p4=main.person&#123;name:&quot;&quot;, city:&quot;&quot;, age:0&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="使用键值对初始化"><a href="#使用键值对初始化" class="headerlink" title="使用键值对初始化"></a>使用键值对初始化</h4><ul>
<li><p>键对应结构体的字段</p>
</li>
<li><p>值对应该字段的初始值</p>
<ul>
<li>```go<br>p5 := person{<pre><code>name : &quot;小王子&quot;,
city : &quot;beijing&quot;,
age : 18,
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 对结构体指针进行键值对初始化：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    p6 := &amp;person&#123;</span><br><span class="line">    	name: &quot;小王子&quot;,</span><br><span class="line">    	city: &quot;北京&quot;,</span><br><span class="line">    	age:  18,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>未指定初始值的字段的值为该字段类型的零值</p>
<ul>
<li><p>```go<br>p7 := &amp;person{</p>
<pre><code>city: &quot;北京&quot;,
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 使用值得列表初始化</span><br><span class="line"></span><br><span class="line">* 初始化结构体时，直接写值：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    p8 := &amp;person&#123;</span><br><span class="line">    	&quot;沙河娜扎&quot;,</span><br><span class="line">    	&quot;北京&quot;,</span><br><span class="line">    	28,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>必须要初始化结构体的所有字段</p>
</li>
<li><p>初始值的填充顺序必须与字段，在结构体中的声明顺序一致</p>
</li>
<li><p>不能和键值对初始化混用</p>
</li>
</ul>
</li>
</ul>
<h3 id="结构体内存布局"><a href="#结构体内存布局" class="headerlink" title="结构体内存布局"></a>结构体内存布局</h3><ul>
<li>结构体占用一块 <strong>连续的内存</strong></li>
</ul>
<h4 id="空结构体"><a href="#空结构体" class="headerlink" title="空结构体"></a>空结构体</h4><ul>
<li>空结构体不占用空间</li>
</ul>
<p><code>fmt.Printf(unsafe.Sizeof(v))</code> //0</p>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">	name <span class="keyword">string</span></span><br><span class="line">	age  <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]*student)</span><br><span class="line">	stus := []student&#123;</span><br><span class="line">		&#123;name: <span class="string">&quot;小王子&quot;</span>, age: <span class="number">18</span>&#125;,</span><br><span class="line">		&#123;name: <span class="string">&quot;娜扎&quot;</span>, age: <span class="number">23</span>&#125;,</span><br><span class="line">		&#123;name: <span class="string">&quot;大王八&quot;</span>, age: <span class="number">9000</span>&#125;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> _, stu := <span class="keyword">range</span> stus &#123;</span><br><span class="line">        m[stu.name] = &amp;stu  <span class="comment">//m : &quot;小王子&quot;：&amp;student&#123;name: &quot;小王子&quot;, age: 18&#125;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">		fmt.Println(k, <span class="string">&quot;=&gt;&quot;</span>, v.name)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>执行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">小王子 =&gt; 小王子</span><br><span class="line">娜扎 =&gt; 娜扎</span><br><span class="line">大王八 =&gt; 大王八</span><br></pre></td></tr></table></figure></li>
<li><p>运行结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">大王八 =&gt; 大王八</span><br><span class="line">小王子 =&gt; 大王八</span><br><span class="line">娜扎 =&gt; 大王八</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li><p>Go 结构体没有构造函数，需要<strong>自己实现</strong></p>
</li>
<li><p><code>struct</code> 是值类型，值拷贝性能开销比较大，所以<strong>构造函数返回的是结构体指针类型</strong></p>
<ul>
<li>```go<br>func newPerson(name, city string, age int8) *person {<pre><code>return &amp;person&#123;
    name: name,
    city: city,
    age:  age,
&#125;
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 调用：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    p9 := newPerson(&quot;张三&quot;, &quot;沙河&quot;, 90)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="方法和接收者"><a href="#方法和接收者" class="headerlink" title="方法和接收者"></a>方法和接收者</h3><ul>
<li><p>Go 中的<strong>方法（Method）</strong>：一种作用于<strong>特定类型变量</strong>的函数</p>
<ul>
<li>这种特定类型变量叫做<code>接收者Receiver</code></li>
<li>接收者的概念类似于<code>this</code>, <code>self</code></li>
</ul>
</li>
<li><p>方法的<strong>定义格式</strong>：</p>
<ul>
<li>```go<br>func (接收者变量 接收者类型) 方法名(参数列表) (返回参数) {<pre><code>函数体
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  * **接收者变量：**接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是`self`、`this`之类的命名</span><br><span class="line">  * **接收者类型：**接收者类型和参数类似，可以是**指针类型和非指针类型**</span><br><span class="line">  * **方法名、参数列表、返回参数：** 与函数定义相同</span><br><span class="line">  </span><br><span class="line">* 示例：</span><br><span class="line"></span><br><span class="line">  ```go</span><br><span class="line">  //Person 结构体</span><br><span class="line">  type Person struct &#123;</span><br><span class="line">  	name string</span><br><span class="line">  	age  int8</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //NewPerson 构造函数</span><br><span class="line">  func NewPerson(name string, age int8) *Person &#123;</span><br><span class="line">  	return &amp;Person&#123;</span><br><span class="line">  		name: name,</span><br><span class="line">  		age:  age,</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //Dream Person做梦的方法</span><br><span class="line">  func (p Person) Dream() &#123;</span><br><span class="line">  	fmt.Printf(&quot;%s的梦想是学好Go语言！\n&quot;, p.name)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	p1 := NewPerson(&quot;小王子&quot;, 25)</span><br><span class="line">  	p1.Dream()</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>方法与函数的区别：</p>
<ul>
<li>函数<strong>不属于任何类型</strong></li>
<li>方法<strong>属于特定类型</strong></li>
</ul>
</li>
</ul>
<h4 id="指针类型的接收者"><a href="#指针类型的接收者" class="headerlink" title="指针类型的接收者"></a>指针类型的接收者</h4><ul>
<li><p>指针类型的接收者 ： 结构体的指针</p>
</li>
<li><p>调用方法时，修改接收者指针的任意成员变量，都是有效的</p>
<ul>
<li>接近于其他面向对象中的<code>this</code>, <code>self</code></li>
</ul>
</li>
<li><p>示例：一个方法：修改实例变量的年龄</p>
<ul>
<li>```go<br>// SetAge 设置p的年龄<br>// 使用指针接收者<br>func (p *Person) SetAge(newAge int8) {<pre><code>p.age = newAge
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  func main() &#123;</span><br><span class="line">  	p1 := NewPerson(&quot;小王子&quot;, 25)</span><br><span class="line">  	fmt.Println(p1.age) // 25</span><br><span class="line">  	p1.SetAge(30)</span><br><span class="line">  	fmt.Println(p1.age) // 30</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="值类型的接收者"><a href="#值类型的接收者" class="headerlink" title="值类型的接收者"></a>值类型的接收者</h4><ul>
<li><p>方法作用于 值类型接收者时，Go 会在运行前将<strong>接收者的值复制一份</strong></p>
</li>
<li><p>在值类型接收者的方法中，可以获取接收者的成员值，但无法修改接收者变量本身</p>
<ul>
<li>```go<br>// SetAge2 设置p的年龄<br>// 使用值接收者<br>func (p Person) SetAge2(newAge int8) {<pre><code>p.age = newAge
</code></pre>
}func main() {<pre><code>p1 := NewPerson(&quot;小王子&quot;, 25)
p1.Dream()
fmt.Println(p1.age) // 25
p1.SetAge2(30) // (*p1).SetAge2(30)
fmt.Println(p1.age) // 25
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 何时使用 指针类型的接收者</span><br><span class="line"></span><br><span class="line">* 需要修改接收者的成员值</span><br><span class="line">* 接收者是 拷贝代价比较大的大对象</span><br><span class="line">* 保证一致性，若有个方法使用了指针接收者，其他也应该同步</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 任意类型添加方法</span><br><span class="line"></span><br><span class="line">* 在Go中，**任何类型**都可以拥有方法，**接收者可以是任何类型**</span><br><span class="line"></span><br><span class="line">  * 例如：将内置类型`int` 使用关键字type，定义为新的自定义类型，可以为其添加方法</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    //MyInt 将int定义为自定义MyInt类型</span><br><span class="line">    type MyInt int</span><br><span class="line">    </span><br><span class="line">    //SayHello 为MyInt添加一个SayHello的方法</span><br><span class="line">    func (m MyInt) SayHello() &#123;</span><br><span class="line">    	fmt.Println(&quot;Hello, 我是一个int。&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	var m1 MyInt</span><br><span class="line">    	m1.SayHello() //Hello, 我是一个int。</span><br><span class="line">    	m1 = 100</span><br><span class="line">    	fmt.Printf(&quot;%#v  %T\n&quot;, m1, m1) //100  main.MyInt</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>注意：不能给其他包的 类型定义方法</p>
</li>
</ul>
<h3 id="结构体的匿名字段"><a href="#结构体的匿名字段" class="headerlink" title="结构体的匿名字段"></a>结构体的匿名字段</h3><ul>
<li><p>结构体 允许 其成员字段在声明时，<strong>没有字段名，只有类型</strong></p>
</li>
<li><p>==注意：==Go 会默认采用类型名作为字段名，<strong>结构体要求字段名称必须唯一</strong></p>
<ul>
<li>因此，一个结构体中，同种类型的匿名字段只能有一个</li>
</ul>
</li>
<li><p>```go<br>//Person 结构体Person类型<br>type Person struct {</p>
<pre><code>string
int
</code></pre>
<p>}</p>
<p>func main() {</p>
<pre><code>p1 := Person&#123;
    &quot;小王子&quot;,
    18,
&#125;
fmt.Printf(&quot;%#v\n&quot;, p1)        //main.Person&#123;string:&quot;北京&quot;, int:18&#125;
fmt.Println(p1.string, p1.int) //北京 18
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* </span><br><span class="line"></span><br><span class="line">### 嵌套结构体</span><br><span class="line"></span><br><span class="line">* 结构体中，可以**嵌套包含** 另一个结构体或结构体指针</span><br><span class="line"></span><br><span class="line">  * 示例</span><br><span class="line"></span><br><span class="line">    ```go</span><br><span class="line">    //Address 地址结构体</span><br><span class="line">    type Address struct &#123;</span><br><span class="line">    	Province string</span><br><span class="line">    	City     string</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //User 用户结构体</span><br><span class="line">    type User struct &#123;</span><br><span class="line">    	Name    string</span><br><span class="line">    	Gender  string</span><br><span class="line">    	Address Address</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	user1 := User&#123;</span><br><span class="line">    		Name:   &quot;小王子&quot;,</span><br><span class="line">    		Gender: &quot;男&quot;,</span><br><span class="line">    		Address: Address&#123;</span><br><span class="line">    			Province: &quot;山东&quot;,</span><br><span class="line">    			City:     &quot;威海&quot;,</span><br><span class="line">    		&#125;,</span><br><span class="line">    	&#125;</span><br><span class="line">    	fmt.Printf(&quot;user1=%#v\n&quot;, user1)//user1=main.User&#123;Name:&quot;小王子&quot;, Gender:&quot;男&quot;, Address:main.Address&#123;Province:&quot;山东&quot;, City:&quot;威海&quot;&#125;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="嵌套匿名字段"><a href="#嵌套匿名字段" class="headerlink" title="嵌套匿名字段"></a>嵌套匿名字段</h4><ul>
<li><p>嵌套的结构体也可采用匿名字段：</p>
<ul>
<li>```go<br>//Address 地址结构体<br>type Address struct {<pre><code>Province string
City     string
</code></pre>
}//User 用户结构体<br>type User struct {<pre><code>Name    string
Gender  string
Address //匿名字段
</code></pre>
}func main() {<pre><code>var user2 User
user2.Name = &quot;小王子&quot;
user2.Gender = &quot;男&quot;
user2.Address.Province = &quot;山东&quot;    // 匿名字段默认使用类型名作为字段名
user2.City = &quot;威海&quot;                // 匿名字段可以省略
fmt.Printf(&quot;user2=%#v\n&quot;, user2) //user2=main.User&#123;Name:&quot;小王子&quot;, Gender:&quot;男&quot;, Address:main.Address&#123;Province:&quot;山东&quot;, City:&quot;威海&quot;&#125;&#125;
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 当访问结构体成员时，现在结构体中查找该字段，再去嵌套的匿名字段找</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 嵌套结构体的字段名冲突</span><br><span class="line"></span><br><span class="line">* 嵌套结构体内部可能存在相同的字段名。在这种情况下为了避免歧义需要通过指定具体的内嵌结构体字段名。</span><br><span class="line"></span><br><span class="line">  ```go</span><br><span class="line">  //Address 地址结构体</span><br><span class="line">  type Address struct &#123;</span><br><span class="line">  	Province   string</span><br><span class="line">  	City       string</span><br><span class="line">  	CreateTime string</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //Email 邮箱结构体</span><br><span class="line">  type Email struct &#123;</span><br><span class="line">  	Account    string</span><br><span class="line">  	CreateTime string</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //User 用户结构体</span><br><span class="line">  type User struct &#123;</span><br><span class="line">  	Name   string</span><br><span class="line">  	Gender string</span><br><span class="line">  	Address</span><br><span class="line">  	Email</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	var user3 User</span><br><span class="line">  	user3.Name = &quot;沙河娜扎&quot;</span><br><span class="line">  	user3.Gender = &quot;男&quot;</span><br><span class="line">  	// user3.CreateTime = &quot;2019&quot; //ambiguous selector user3.CreateTime</span><br><span class="line">  	user3.Address.CreateTime = &quot;2000&quot; //指定Address结构体中的CreateTime</span><br><span class="line">  	user3.Email.CreateTime = &quot;2000&quot;   //指定Email结构体中的CreateTime</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="结构体的-“继承”"><a href="#结构体的-“继承”" class="headerlink" title="结构体的 “继承”"></a>结构体的 “继承”</h3><ul>
<li><p>Go 中使用结构体，可以实现其他面向对象中的 继承</p>
<ul>
<li>```go<br>//Animal 动物<br>type Animal struct {<pre><code>name string
</code></pre>
}func (a *Animal) move() {<pre><code>fmt.Printf(&quot;%s会动！\n&quot;, a.name)
</code></pre>
}//Dog 狗<br>type Dog struct {<pre><code>Feet    int8
*Animal //通过嵌套匿名结构体实现继承
</code></pre>
}func (d *Dog) wang() {<pre><code>fmt.Printf(&quot;%s会汪汪汪~\n&quot;, d.name)
</code></pre>
}func main() {<pre><code>d1 := &amp;Dog&#123;
    Feet: 4,
    Animal: &amp;Animal&#123; //注意嵌套的是结构体指针
        name: &quot;乐乐&quot;,
    &#125;,
&#125;
d1.wang() //乐乐会汪汪汪~
d1.move() //乐乐会动！
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 结构体字段的可见性</span><br><span class="line"></span><br><span class="line">* 结构体中：</span><br><span class="line">  * **大写**开头表示**可公开访问**</span><br><span class="line">  * **小写**表示**私有**(仅在定义当前结构体的包中访问)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 结构体 与 JSON 序列化</span><br><span class="line"></span><br><span class="line">* `JSON` ：`JavaScript Object Notation`</span><br><span class="line"></span><br><span class="line">  * 轻量级的**数据交换格式**</span><br><span class="line">  * 易于 阅读和编写</span><br><span class="line">  * 易于 机器解析和生成</span><br><span class="line"></span><br><span class="line">* JSON 键值对：用于保存 JS 对象的一种方式</span><br><span class="line"></span><br><span class="line">  * 键/值对 格式：`&quot;键名&quot; : 值, `</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    //Student 学生</span><br><span class="line">    type Student struct &#123;</span><br><span class="line">    	ID     int</span><br><span class="line">    	Gender string</span><br><span class="line">    	Name   string</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //Class 班级</span><br><span class="line">    type Class struct &#123;</span><br><span class="line">    	Title    string</span><br><span class="line">    	Students []*Student</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	c := &amp;Class&#123;</span><br><span class="line">    		Title:    &quot;101&quot;,</span><br><span class="line">    		Students: make([]*Student, 0, 200),</span><br><span class="line">    	&#125;</span><br><span class="line">    	for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">    		stu := &amp;Student&#123;</span><br><span class="line">    			Name:   fmt.Sprintf(&quot;stu%02d&quot;, i),</span><br><span class="line">    			Gender: &quot;男&quot;,</span><br><span class="line">    			ID:     i,</span><br><span class="line">    		&#125;</span><br><span class="line">    		c.Students = append(c.Students, stu)</span><br><span class="line">    	&#125;</span><br><span class="line">    	//JSON序列化：结构体--&gt;JSON格式的字符串</span><br><span class="line">    	data, err := json.Marshal(c)</span><br><span class="line">    	if err != nil &#123;</span><br><span class="line">    		fmt.Println(&quot;json marshal failed&quot;)</span><br><span class="line">    		return</span><br><span class="line">    	&#125;</span><br><span class="line">    	fmt.Printf(&quot;json:%s\n&quot;, data)</span><br><span class="line">    	//JSON反序列化：JSON格式的字符串--&gt;结构体</span><br><span class="line">    	str := `&#123;&quot;Title&quot;:&quot;101&quot;,&quot;Students&quot;:[&#123;&quot;ID&quot;:0,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu00&quot;&#125;,&#123;&quot;ID&quot;:1,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu01&quot;&#125;,&#123;&quot;ID&quot;:2,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu02&quot;&#125;,&#123;&quot;ID&quot;:3,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu03&quot;&#125;,&#123;&quot;ID&quot;:4,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu04&quot;&#125;,&#123;&quot;ID&quot;:5,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu05&quot;&#125;,&#123;&quot;ID&quot;:6,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu06&quot;&#125;,&#123;&quot;ID&quot;:7,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu07&quot;&#125;,&#123;&quot;ID&quot;:8,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu08&quot;&#125;,&#123;&quot;ID&quot;:9,&quot;Gender&quot;:&quot;男&quot;,&quot;Name&quot;:&quot;stu09&quot;&#125;]&#125;`</span><br><span class="line">    	c1 := &amp;Class&#123;&#125;</span><br><span class="line">    	err = json.Unmarshal([]byte(str), c1)</span><br><span class="line">    	if err != nil &#123;</span><br><span class="line">    		fmt.Println(&quot;json unmarshal failed!&quot;)</span><br><span class="line">    		return</span><br><span class="line">    	&#125;</span><br><span class="line">    	fmt.Printf(&quot;%#v\n&quot;, c1)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="结构体标签-Tag"><a href="#结构体标签-Tag" class="headerlink" title="结构体标签(Tag)"></a>结构体标签(Tag)</h3><ul>
<li><p><code>Tag</code> 是结构体中的 <strong>元信息</strong>，运行的时候通过反射机制读取出来</p>
<ul>
<li><p><code>Tag</code> 在<strong>结构体字段的后方</strong>定义，用==反引号==包裹</p>
</li>
<li><p>```<br><code>key1:&quot;balue1&quot; key2:&quot;value2&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 结构体`tag` 有一个或多个键值对组成</span><br><span class="line"></span><br><span class="line">  * 键与值是用冒号分隔，值使用双引号括起来</span><br><span class="line">  * 同一个结构体字段可以设置多个键值对，不同键值对使用空格分隔</span><br><span class="line"></span><br><span class="line">* ==注意： ==为结构体编写`Tag`时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如**不要在key和value之间添加空格。**</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 示例：每个字段定义json序列化时使用的 Tag</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    //Student 学生</span><br><span class="line">    type Student struct &#123;</span><br><span class="line">    	ID     int    `json:&quot;id&quot;` //通过指定tag实现json序列化该字段时的key</span><br><span class="line">    	Gender string //json序列化是默认使用字段名作为key</span><br><span class="line">    	name   string //私有不能被json包访问</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	s1 := Student&#123;</span><br><span class="line">    		ID:     1,</span><br><span class="line">    		Gender: &quot;男&quot;,</span><br><span class="line">    		name:   &quot;沙河娜扎&quot;,</span><br><span class="line">    	&#125;</span><br><span class="line">    	data, err := json.Marshal(s1)</span><br><span class="line">    	if err != nil &#123;</span><br><span class="line">    		fmt.Println(&quot;json marshal failed!&quot;)</span><br><span class="line">    		return</span><br><span class="line">    	&#125;</span><br><span class="line">    	fmt.Printf(&quot;json str:%s\n&quot;, data) //json str:&#123;&quot;id&quot;:1,&quot;Gender&quot;:&quot;男&quot;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="结构体和方法补充知识点"><a href="#结构体和方法补充知识点" class="headerlink" title="结构体和方法补充知识点"></a>结构体和方法补充知识点</h3><ul>
<li><p>slice 和 map都包含了指向底层数据的指针，在复制时需要特别注意</p>
<ul>
<li><p>```go<br>type Person struct {</p>
<pre><code>name   string
age    int8
dreams []string
</code></pre>
<p>}</p>
<p>func (p *Person) SetDreams(dreams []string) {</p>
<pre><code>p.dreams = dreams
</code></pre>
<p>}</p>
<p>func main() {</p>
<pre><code>p1 := Person&#123;name: &quot;小王子&quot;, age: 18&#125;
data := []string&#123;&quot;吃饭&quot;, &quot;睡觉&quot;, &quot;打豆豆&quot;&#125;
p1.SetDreams(data)

// 你真的想要修改 p1.dreams 吗？
data[1] = &quot;不睡觉&quot;
fmt.Println(p1.dreams)  // ?
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 正确的做法：在方法中使用传入的 slice 的拷贝，进行结构体赋值</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func (p *Person) SetDreams(dreams []string) &#123;</span><br><span class="line">    	p.dreams = make([]string, len(dreams))</span><br><span class="line">    	copy(p.dreams, dreams)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>同样的问题：返回值 slice 和 map情况</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>13 包</title>
    <url>/p/9d9aaa60.html</url>
    <content><![CDATA[<h1 id="13-包"><a href="#13-包" class="headerlink" title="13 包"></a>13 包</h1><ul>
<li>在工程化Go 开发项目中，Go 的源码复用建立在 包 基础之上</li>
<li>定义包、导出包内容、导入其他包</li>
</ul>
<h2 id="包介绍"><a href="#包介绍" class="headerlink" title="包介绍"></a>包介绍</h2><ul>
<li><code>package</code> 是多个Go 源码的集合，高级的代码复用方案</li>
<li>内置包：<code>fmt</code>, <code>os</code>,<code>io</code></li>
</ul>
<h2 id="定义包"><a href="#定义包" class="headerlink" title="定义包"></a>定义包</h2><ul>
<li><strong>一个包</strong> 简单理解为存放<code>.go</code>文件的<strong>文件夹</strong><ul>
<li>该文件夹下的所有<code>go</code>文件，都要在代码第一行添加<code>package 包名</code>,声明该文件归属的包</li>
</ul>
</li>
<li>==注意：==<ul>
<li>一个文件夹下，直接包含的文件只能归属于一个<code>package</code>, 同样一个<code>package</code>文件不能在多个文件夹下</li>
<li>包名不可以和文件夹名一样</li>
<li>包名为<code>main</code>的包，是程序的入口包，这种包编译后会得到一个可执行文件，而编译不包含<code>main</code>包的源代码则不会得到可执行文件</li>
</ul>
</li>
</ul>
<h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><ul>
<li><p>如果想在一个包中，引用另一个包里的 <strong>标识符</strong>，该标识符必须对外可见（<code>public</code>）,</p>
</li>
<li><p>Go 中只需要将标识符的首字母大写，即为<code>public</code></p>
</li>
<li><p>```go<br>package pkg2</p>
<p>import “fmt”</p>
<p>// 包变量可见性</p>
<p>var a = 100 // 首字母小写，外部包不可见，只能在当前包内使用</p>
<p>// 首字母大写外部包可见，可在其他包中使用<br>const Mode = 1</p>
<p>type person struct { // 首字母小写，外部包不可见，只能在当前包内使用</p>
<pre><code>name string
</code></pre>
<p>}</p>
<p>// 首字母大写，外部包可见，可在其他包中使用<br>func Add(x, y int) int {</p>
<pre><code>return x + y
</code></pre>
<p>}</p>
<p>func age() { // 首字母小写，外部包不可见，只能在当前包内使用</p>
<pre><code>var Age = 18 // 函数局部变量，外部包不可见，只能在当前函数内使用
fmt.Println(Age)
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 结构体的 **字段名和接口中的方法名** 如果**首字母都是大写**，外部包可以访问这些字段和方法</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    type Student struct &#123;</span><br><span class="line">    	Name  string //可在包外访问的方法</span><br><span class="line">    	class string //仅限包内访问的字段</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    type Payer interface &#123;</span><br><span class="line">    	init() //仅限包内访问的方法</span><br><span class="line">    	Pay()  //可在包外访问的方法</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h2><ul>
<li>使用<code>import</code>关键字 导入包<ul>
<li><code>import &quot;包的路径&quot;</code></li>
</ul>
</li>
<li>注意：<ul>
<li>import 导入语句通常放在文件开头包声明语句下面</li>
<li>导入的包名需要使用双引号包裹</li>
<li>包名是从<code>$GOPATH/src/</code> 后开始的</li>
<li>禁止循环导入包</li>
</ul>
</li>
</ul>
<h3 id="单行导入"><a href="#单行导入" class="headerlink" title="单行导入"></a>单行导入</h3><ul>
<li><code>import &quot;&quot;</code></li>
<li><code>import &quot;&quot;</code></li>
</ul>
<h3 id="多行导入"><a href="#多行导入" class="headerlink" title="多行导入"></a>多行导入</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;&quot;</span></span><br><span class="line">	<span class="string">&quot;&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="自定义包名"><a href="#自定义包名" class="headerlink" title="自定义包名"></a>自定义包名</h2><ul>
<li>导入包名时，可以为导入的包设置别名<ul>
<li><code>import 别名 &quot;包的路径&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="匿名导入包"><a href="#匿名导入包" class="headerlink" title="匿名导入包"></a>匿名导入包</h2><ul>
<li>如果只希望导入包，不使用内部数据，可以使用匿名导入：<ul>
<li><code>import _ &quot;包的路径&quot;</code></li>
</ul>
</li>
<li>一样会被编译到可执行文件中</li>
</ul>
<h2 id="init-初始化函数"><a href="#init-初始化函数" class="headerlink" title="init() 初始化函数"></a>init() 初始化函数</h2><h3 id="init-函数介绍"><a href="#init-函数介绍" class="headerlink" title="init() 函数介绍"></a>init() 函数介绍</h3><ul>
<li><p>Go 语言程序执行时，导入包语句 会自动触发包内部<code>init()</code> 函数的调用</p>
</li>
<li><p><code>init()</code> 函数没有参数和返回值</p>
</li>
<li><p><code>init()</code>函数在程序运行时，<strong>会被自动调用执行</strong>，<strong>不能在代码中主动调用</strong></p>
</li>
<li><p>包中 <code>init()</code> 函数的执行时机</p>
<ul>
<li><img src="E:\LearningNotes\Go\包.assets\init01.png" alt="包中的init()执行时机"></li>
</ul>
</li>
</ul>
<h3 id="init-函数执行顺序"><a href="#init-函数执行顺序" class="headerlink" title="init() 函数执行顺序"></a>init() 函数执行顺序</h3><ul>
<li>Go 会从<code>main</code> 包开始检查其导入的所有包，每个包有可能导入了其他包</li>
<li>Go 编译器由此构建出一个树状的包引用关系，再根据引用顺序决定编译顺序，依次编译这些包的代码</li>
<li>在运行时，最后被导入的包 最先被初始化并调用其<code>init()</code> 函数<ul>
<li><img src="E:\LearningNotes\Go\包.assets\init02.png" alt="包之间的init()执行顺序"></li>
</ul>
</li>
</ul>
<h2 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h2><ul>
<li>编写一个<code>calc</code>包实现加减乘除四个功能函数，在<code>snow</code>这个包中导入并使用加减乘除四个函数实现数学运算</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>14 接口</title>
    <url>/p/f9eadfe2.html</url>
    <content><![CDATA[<h1 id="14-接口"><a href="#14-接口" class="headerlink" title="14 接口"></a>14 接口</h1><ul>
<li><code>Interface</code> 定义了<strong>一个对象的行为规范</strong>，</li>
<li>只定义规范而不实现，由<strong>具体的对象来实现规范的细节</strong></li>
</ul>
<h1 id="接口类型"><a href="#接口类型" class="headerlink" title="接口类型"></a>接口类型</h1><ul>
<li>`Interface ·是一种抽象的类型</li>
<li><code>Interface</code>  是一组 <code>method</code>的集合，是 <code>duck-type programming</code>的一种体现</li>
<li>接口的作用：定义一个协定(规则)，<ul>
<li>不用关心其数据，和方法具体是什么</li>
</ul>
</li>
<li>`Interface· 是一种类型</li>
</ul>
<h1 id="为什么使用接口"><a href="#为什么使用接口" class="headerlink" title="为什么使用接口"></a>为什么使用接口</h1><ul>
<li><p>```go<br>type Cat struct{}</p>
<p>func (c Cat) Say() string { return “喵喵喵” }</p>
<p>type Dog struct{}</p>
<p>func (d Dog) Say() string { return “汪汪汪” }</p>
<p>func main() {</p>
<pre><code>c := Cat&#123;&#125;
fmt.Println(&quot;猫:&quot;, c.Say())
d := Dog&#123;&#125;
fmt.Println(&quot;狗:&quot;, d.Say())
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 共同特点：都会叫</span><br><span class="line"></span><br><span class="line">  * 有重复代码</span><br><span class="line">* 为了解决 有共同特点而导致的代码重复，设计了接口</span><br><span class="line">* 接口是一种抽象的类型，</span><br><span class="line"></span><br><span class="line">  * 看到一个接口，只知道通过它的方法能做什么</span><br><span class="line"></span><br><span class="line"># 接口的定义</span><br><span class="line"></span><br><span class="line">* Go 提倡面向接口编程</span><br><span class="line">* 每个接口由数个方法组成，定义格式:</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    type 接口类型名 interface&#123;</span><br><span class="line">        方法名1(参数列表) 返回值列表</span><br><span class="line">        方法名2(参数列表) 返回值列表</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>接口名</strong>：自定义的类型名</p>
<ul>
<li>一般命名时，在单词后 <code>er</code> , 接口名最好能突出该接口的类型含义</li>
</ul>
</li>
<li><p><strong>方法名：</strong>当接口名首字母是大写，并且方法名首字母也是大写时，方法可以被接口是所在的包 之外的代码访问</p>
</li>
<li><p><strong>参数列表、返回值列表：</strong>其中的参数变量名可以省略</p>
</li>
</ul>
</li>
</ul>
<h1 id="实现接口的条件"><a href="#实现接口的条件" class="headerlink" title="实现接口的条件"></a>实现接口的条件</h1><ul>
<li><p>接口 是一个<strong>需要实现的方法列表</strong></p>
</li>
<li><p>实现了接口中所有方法，就实现了这个接口</p>
</li>
<li><p>示例：</p>
<ul>
<li><p>定义 <code>Sayer</code> 接口：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Sayer <span class="keyword">interface</span>&#123;</span><br><span class="line">	say()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义结构体</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"><span class="keyword">type</span> cat <span class="keyword">struct</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>需要<strong>对dog和cat</strong>分别实现 <code>say</code>方法，即可实现Sayer接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dog实现了Sayer接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;汪汪汪&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// cat实现了Sayer接口</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c cat)</span> <span class="title">say</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;喵喵喵&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="接口类型变量"><a href="#接口类型变量" class="headerlink" title="接口类型变量"></a>接口类型变量</h1><ul>
<li><p><strong>接口类型变量</strong> 能<strong>存储所有实现了该接口的实例</strong></p>
<ul>
<li>例如，<code>Sayer</code> 类型的变量能存储 <code>dog</code>和 <code>cat</code>类型的变量</li>
<li>```go<br>func main() {<pre><code>var x Sayer // 声明一个Sayer类型的变量x
a := cat&#123;&#125;  // 实例化一个cat
b := dog&#123;&#125;  // 实例化一个dog
x = a       // 可以把cat实例直接赋值给x
x.say()     // 喵喵喵
x = b       // 可以把dog实例直接赋值给x
x.say()     // 汪汪汪
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* ```go</span><br><span class="line">  // 摘自gin框架routergroup.go</span><br><span class="line">  type IRouter interface&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">  type RouterGroup struct &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">  var _ IRouter = &amp;RouterGroup&#123;&#125;  // 确保RouterGroup实现了接口IRouter</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>确保 <code>RouterGroup</code> 一定实现了 <code>IRouter</code></p>
</li>
</ul>
<h1 id="值接收者-和-指针接收者-实现接口的区别"><a href="#值接收者-和-指针接收者-实现接口的区别" class="headerlink" title="值接收者 和 指针接收者 实现接口的区别"></a>值接收者 和 指针接收者 实现接口的区别</h1><ul>
<li><p>示例，一个 <code>Mover</code> 接口和 <code>dog</code> 结构体</p>
<ul>
<li><p>```go<br>type Mover interface {</p>
<pre><code>move()
</code></pre>
<p>}</p>
<p>type dog struct {}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 值接收者实现接口</span><br><span class="line"></span><br><span class="line">* dog 类型实现接口：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func (d dog) move() &#123;</span><br><span class="line">    	fmt.Println(&quot;狗会动&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>```go<br>func main() {</p>
<pre><code>var x Mover
var wangcai = dog&#123;&#125; // 旺财是dog类型
x = wangcai         // x可以接收dog类型
var fugui = &amp;dog&#123;&#125;  // 富贵是*dog类型
x = fugui           // x可以接收*dog类型
x.move()
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 使用值接收者实现接口 后，d**og 结构体和结构体指针类型的变量** 都可以赋值给该接口变量</span><br><span class="line"></span><br><span class="line">  * 由于Go中有对指针类型变量求值的语法糖，指针类型内部会自动求值</span><br><span class="line"></span><br><span class="line">### 指针接收者实现接口</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">func (d *dog) move() &#123;</span><br><span class="line">	fmt.Println(&quot;狗会动&quot;)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">	var x Mover</span><br><span class="line">	var wangcai = dog&#123;&#125; // 旺财是dog类型</span><br><span class="line">	x = wangcai         // x不可以接收dog类型</span><br><span class="line">	var fugui = &amp;dog&#123;&#125;  // 富贵是*dog类型</span><br><span class="line">	x = fugui           // x可以接收*dog类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>此时实现 <code>Mover</code> 接口的是 <code>*dog</code>类型，所以不能给 x 传入 dog类型的wangcai，此时x只能存储*dog类型的值</p>
</li>
</ul>
<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ul>
<li><p>能否通过编译</p>
</li>
<li><p>```go<br>type People interface {</p>
<pre><code>Speak(string) string
</code></pre>
<p>}</p>
<p>type Student struct{}</p>
<p>func (stu *Student) Speak(think string) (talk string) {</p>
<pre><code>if think == &quot;sb&quot; &#123;
    talk = &quot;你是个大帅比&quot;
&#125; else &#123;
    talk = &quot;您好&quot;
&#125;
return
</code></pre>
<p>}</p>
<p>func main() {</p>
<pre><code>var peo People = Student&#123;&#125;
think := &quot;bitch&quot;
fmt.Println(peo.Speak(think))
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 不能。可能是因为 `var peo People = Student&#123;&#125;`</span><br><span class="line"></span><br><span class="line">  * 实现People接口的是 `*Student`类型</span><br><span class="line">* 将其修改后：`您好`</span><br><span class="line"></span><br><span class="line"># 类型与接口的关系</span><br><span class="line"></span><br><span class="line">## 一个类型实现多个接口</span><br><span class="line"></span><br><span class="line">* **一个类型**可以**同时实现多个接口**，而接口间彼此独立，不知道对方的实现</span><br><span class="line"></span><br><span class="line">  * 例如，狗可以叫，也可以动。定义 `Sayer` 和 `Mover` 接口：</span><br><span class="line"></span><br><span class="line">    * ```go</span><br><span class="line">      // Sayer 接口</span><br><span class="line">      type Sayer interface &#123;</span><br><span class="line">      	say()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // Mover 接口</span><br><span class="line">      type Mover interface &#123;</span><br><span class="line">      	move()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>对 dog 实现 <code>Sayer</code> 和 <code>Mover</code> 接口</p>
<ul>
<li><p>```go<br>type dog struct {</p>
<pre><code>name string
</code></pre>
<p>}</p>
<p>// 实现Sayer接口<br>func (d dog) say() {</p>
<pre><code>fmt.Printf(&quot;%s会叫汪汪汪\n&quot;, d.name)
</code></pre>
<p>}</p>
<p>// 实现Mover接口<br>func (d dog) move() {</p>
<pre><code>fmt.Printf(&quot;%s会动\n&quot;, d.name)
</code></pre>
<p>}</p>
<p>func main() {</p>
<pre><code>var x Sayer
var y Mover

var a = dog&#123;name: &quot;旺财&quot;&#125;
x = a
y = a
x.say()
y.move()
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 多个类型实现统一接口</span><br><span class="line"></span><br><span class="line">* **不同的类型** 可以 **实现统一接口**</span><br><span class="line"></span><br><span class="line">  * 定义一个 `Mover`接口，有一个 move 方法</span><br><span class="line"></span><br><span class="line">    * ```go</span><br><span class="line">      // Mover 接口</span><br><span class="line">      type Mover interface &#123;</span><br><span class="line">      	move()</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>多个类型实现 <code>Mover</code>的方法 <code>move</code></p>
<ul>
<li><p>```go<br>type dog struct {</p>
<pre><code>name string
</code></pre>
<p>}</p>
<p>type car struct {</p>
<pre><code>brand string
</code></pre>
<p>}</p>
<p>// dog类型实现Mover接口<br>func (d dog) move() {</p>
<pre><code>fmt.Printf(&quot;%s会跑\n&quot;, d.name)
</code></pre>
<p>}</p>
<p>// car类型实现Mover接口<br>func (c car) move() {</p>
<pre><code>fmt.Printf(&quot;%s速度70迈\n&quot;, c.brand)
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 在代码中，就可以把不同的类型，当成拥有同一特性的物体处理，不需要关注具体是什么，</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	var x Mover</span><br><span class="line">    	var a = dog&#123;name: &quot;旺财&quot;&#125;</span><br><span class="line">    	var b = car&#123;brand: &quot;保时捷&quot;&#125;</span><br><span class="line">    	x = a</span><br><span class="line">    	x.move()</span><br><span class="line">    	x = b</span><br><span class="line">    	x.move()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现</p>
<ul>
<li><p>```go<br>// WashingMachine 洗衣机<br>type WashingMachine interface {</p>
<pre><code>wash()
dry()
</code></pre>
<p>}</p>
<p>// 甩干器<br>type dryer struct{}</p>
<p>// 实现WashingMachine接口的dry()方法<br>func (d dryer) dry() {</p>
<pre><code>fmt.Println(&quot;甩一甩&quot;)
</code></pre>
<p>}</p>
<p>// 海尔洗衣机<br>type haier struct {</p>
<pre><code>dryer //嵌入甩干器
</code></pre>
<p>}</p>
<p>// 实现WashingMachine接口的wash()方法<br>func (h haier) wash() {</p>
<pre><code>fmt.Println(&quot;洗刷刷&quot;)
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 接口嵌套</span><br><span class="line"></span><br><span class="line">* 接口与接口 间 可以通过 嵌套创造新的接口</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    // Sayer 接口</span><br><span class="line">    type Sayer interface &#123;</span><br><span class="line">    	say()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Mover 接口</span><br><span class="line">    type Mover interface &#123;</span><br><span class="line">    	move()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 接口嵌套</span><br><span class="line">    type animal interface &#123;</span><br><span class="line">    	Sayer</span><br><span class="line">    	Mover</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>嵌套得到的接口 使用与普通接口一致，</p>
<ul>
<li><p>```go<br>type cat struct {</p>
<pre><code>name string
</code></pre>
<p>}</p>
<p>func (c cat) say() {</p>
<pre><code>fmt.Println(&quot;喵喵喵&quot;)
</code></pre>
<p>}</p>
<p>func (c cat) move() {</p>
<pre><code>fmt.Println(&quot;猫会动&quot;)
</code></pre>
<p>}</p>
<p>func main() {</p>
<pre><code>var x animal
x = cat&#123;name: &quot;花花&quot;&#125;
x.move()
x.say()
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"># 空接口</span><br><span class="line"></span><br><span class="line">## 空接口的定义</span><br><span class="line"></span><br><span class="line">* 没有指定任何方法的接口，**任何类型都实现了空接口**</span><br><span class="line">* **空接口类型的变量**可以**存储任意类型的变量**</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	// 定义一个空接口x</span><br><span class="line">    	var x interface&#123;&#125;</span><br><span class="line">    	s := &quot;Hello 沙河&quot;</span><br><span class="line">    	x = s</span><br><span class="line">    	fmt.Printf(&quot;type:%T value:%v\n&quot;, x, x)</span><br><span class="line">    	i := 100</span><br><span class="line">    	x = i</span><br><span class="line">    	fmt.Printf(&quot;type:%T value:%v\n&quot;, x, x)</span><br><span class="line">    	b := true</span><br><span class="line">    	x = b</span><br><span class="line">    	fmt.Printf(&quot;type:%T value:%v\n&quot;, x, x)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="空接口的应用"><a href="#空接口的应用" class="headerlink" title="空接口的应用"></a>空接口的应用</h2><h3 id="空接口作为函数的参数"><a href="#空接口作为函数的参数" class="headerlink" title="空接口作为函数的参数"></a>空接口作为函数的参数</h3><ul>
<li><p>使用空接口可以实现接受 <strong>任意类型的函数参数</strong></p>
<ul>
<li>```go<br>// 空接口作为函数参数<br>func show(a interface{}) {<pre><code>fmt.Printf(&quot;type:%T value:%v\n&quot;, a, a)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 空接口作为 map 的值</span><br><span class="line"></span><br><span class="line">* 使用空接口实现 可以**保存任意值的字典**</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    // 空接口作为map值</span><br><span class="line">    	var studentInfo = make(map[string]interface&#123;&#125;)</span><br><span class="line">    	studentInfo[&quot;name&quot;] = &quot;沙河娜扎&quot;</span><br><span class="line">    	studentInfo[&quot;age&quot;] = 18</span><br><span class="line">    	studentInfo[&quot;married&quot;] = false</span><br><span class="line">    	fmt.Println(studentInfo)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h1><ul>
<li>空接口实现，可以使得map存储任意类型的值，</li>
<li>如何获取存储的具体数据</li>
</ul>
<h2 id="接口值"><a href="#接口值" class="headerlink" title="接口值"></a>接口值</h2><ul>
<li><p>一个接口的值 <strong>简称为接口值</strong>。<del>废话</del></p>
</li>
<li><p><strong>接口值</strong> ： <code>一个具体的类型</code> 和 <code>具体类型的值</code> 组成</p>
<ul>
<li>称为 接口的 <code>动态类型</code> 和 <code>动态值</code></li>
</ul>
</li>
<li><p><strong>示例：</strong></p>
<ul>
<li><p>```go<br>var w io.Writer<br>w = os.Stdout<br>w = new(bytes.Buffer)<br>w = nil</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  * ![接口值图解](E:\LearningNotes\Go\14 接口.assets\interface.png)</span><br><span class="line">* **判断空接口中的值**，使用类型断言，格式</span><br><span class="line"></span><br><span class="line">  * `x.(T)`</span><br><span class="line">  * `x` : 表示类型为 `interface&#123;&#125;` 的变量</span><br><span class="line">  * `T `：表示断言 x 可能是的类型</span><br><span class="line">* 该语法返回两个参数</span><br><span class="line"></span><br><span class="line">  * **第一个：**x 转化为 T 类型后的变量</span><br><span class="line">  * **第二个 ：**布尔值，若为 `true` 表示断言成功</span><br><span class="line">* 示例：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	var x interface&#123;&#125;</span><br><span class="line">    	x = &quot;Hello 沙河&quot;</span><br><span class="line">    	v, ok := x.(string)</span><br><span class="line">    	if ok &#123;</span><br><span class="line">    		fmt.Println(v)</span><br><span class="line">    	&#125; else &#123;</span><br><span class="line">    		fmt.Println(&quot;类型断言失败&quot;)</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用 <code>switch</code> 语句实现：</p>
<ul>
<li>```go<br>func justifyType(x interface{}) {<pre><code>switch v := x.(type) &#123;
case string:
    fmt.Printf(&quot;x is a string，value is %v\n&quot;, v)
case int:
    fmt.Printf(&quot;x is a int is %v\n&quot;, v)
case bool:
    fmt.Printf(&quot;x is a bool is %v\n&quot;, v)
default:
    fmt.Println(&quot;unsupport type！&quot;)
&#125;
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* ==空接口 可以存储任意类型值==</span><br><span class="line">* **注意**：只有当两个以上的**具体类型必须以相同的方式处理**时，才需要定义接口</span><br><span class="line"></span><br><span class="line"># 练习题</span><br><span class="line"></span><br><span class="line">* 使用接口的方式实现一个既可以往终端写日志也可以往文件写日志的简易日志库</span><br><span class="line">* `os` 和 `io` 包的学习：</span><br><span class="line"></span><br><span class="line">  * `os`</span><br><span class="line">  * `io`</span><br><span class="line"></span><br><span class="line">    * `io.Writer` ：表示一个编写器，从缓冲区读取数据，并将数据写入目标资源</span><br><span class="line"></span><br><span class="line">      * 必须实现 `io.Writer`接口的唯一方法 `Write(p []byte)`</span><br><span class="line">      * ```go</span><br><span class="line">        type Writer interface &#123;</span><br><span class="line">            Write(p []byte) (n int, err error) //返回写入到目标资源的字节数，发生错误时的错误</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>15 反射</title>
    <url>/p/16e69ce4.html</url>
    <content><![CDATA[<h1 id="15-反射"><a href="#15-反射" class="headerlink" title="15 反射"></a>15 反射</h1><h1 id="变量的内在机制"><a href="#变量的内在机制" class="headerlink" title="变量的内在机制"></a>变量的内在机制</h1><ul>
<li>Go 的变量分为两部分<ul>
<li><strong>类型信息</strong>：预先定义好的元信息</li>
<li><strong>值信息</strong>：程序运行过程中可动态变化的</li>
</ul>
</li>
</ul>
<h1 id="反射介绍"><a href="#反射介绍" class="headerlink" title="反射介绍"></a>反射介绍</h1><ul>
<li><strong>程序运行时</strong> <strong>对程序本身进行访问和修改</strong>的能力<ul>
<li>一般，程序在编译时，变量被转换成内存地址，变量名不会被编译器写道可执行部分</li>
<li>在运行程序时，程序无法获取自身的信息</li>
</ul>
</li>
<li>但对于<strong>支持反射的语言</strong>，在程序<strong>编译时</strong>会将变量的<strong>反射信息</strong>（字段名、类型信息、结构体信息等）整合到可执行文件中，并给程序提供 <strong>接口</strong> 访问反射信息</li>
<li>Go 在运行期间 使用 <strong>reflect包</strong> 访问程序的<strong>反射信息</strong></li>
</ul>
<h1 id="reflect-包"><a href="#reflect-包" class="headerlink" title="reflect 包"></a>reflect 包</h1><ul>
<li>在 Go 的反射机制中，<strong>任何接口值</strong> 都是由<code>一个具体类型</code> 和 <code>具体类型的值</code> 两部分组成</li>
<li>反射相关功能由 内置 reflect 包提供，<ul>
<li>任意接口值在反射中都可以理解为<code>reflect.Type</code> 和 <code>reflect.Value</code> 两部分，</li>
<li>reflect 包提供了<code>reflect.TypeOf</code> <code>reflect.ValueOf</code> 获取任意对象的 Value 和 Type</li>
</ul>
</li>
</ul>
<h2 id="TypeOf"><a href="#TypeOf" class="headerlink" title="TypeOf"></a>TypeOf</h2><ul>
<li><p>使用<code>reflect.TypeOf()</code> 可以获得任意值的<strong>类型对象<code>(reflect.Type)</code></strong>, 程序通过类型对象可以访问任意值的类型信息</p>
<ul>
<li><p>```go<br>package main</p>
<p>import (</p>
<pre><code>&quot;fmt&quot;
&quot;reflect&quot;
</code></pre>
<p>)</p>
<p>func reflectType(x interface{}) {</p>
<pre><code>v := reflect.TypeOf(x)
fmt.Printf(&quot;type:%v\n&quot;, v)
</code></pre>
<p>}<br>func main() {</p>
<pre><code>var a float32 = 3.14
reflectType(a) // type:float32
var b int64 = 100
reflectType(b) // type:int64
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### type name 和 type kind</span><br><span class="line"></span><br><span class="line">* 在反射中，关于类型还划分为两种：`类型Type` 和 `种类Kind`</span><br><span class="line"></span><br><span class="line">* `type` 关键字，使我们可以构造很多自定义类型</span><br><span class="line"></span><br><span class="line">* `kind` 指底层的类型</span><br><span class="line"></span><br><span class="line">* 在反射中，需要区分 指针、结构体等大品种的类型时，会用到`kind`</span><br><span class="line"></span><br><span class="line">* 示例：定义 指针类型和结构体类型：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    package main</span><br><span class="line">    </span><br><span class="line">    import (</span><br><span class="line">    	&quot;fmt&quot;</span><br><span class="line">    	&quot;reflect&quot;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    type myInt int64</span><br><span class="line">    </span><br><span class="line">    func reflectType(x interface&#123;&#125;) &#123;</span><br><span class="line">    	t := reflect.TypeOf(x)</span><br><span class="line">    	fmt.Printf(&quot;type:%v kind:%v\n&quot;, t.Name(), t.Kind())</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	var a *float32 // 指针</span><br><span class="line">    	var b myInt    // 自定义类型</span><br><span class="line">    	var c rune     // 类型别名</span><br><span class="line">    	reflectType(a) // type: kind:ptr</span><br><span class="line">    	reflectType(b) // type:myInt kind:int64</span><br><span class="line">    	reflectType(c) // type:int32 kind:int32</span><br><span class="line">    </span><br><span class="line">    	type person struct &#123;</span><br><span class="line">    		name string</span><br><span class="line">    		age  int</span><br><span class="line">    	&#125;</span><br><span class="line">    	type book struct&#123; title string &#125;</span><br><span class="line">    	var d = person&#123;</span><br><span class="line">    		name: &quot;沙河小王子&quot;,</span><br><span class="line">    		age:  18,</span><br><span class="line">    	&#125;</span><br><span class="line">    	var e = book&#123;title: &quot;《跟小王子学Go语言》&quot;&#125;</span><br><span class="line">    	reflectType(d) // type:person kind:struct</span><br><span class="line">    	reflectType(e) // type:book kind:struct</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Go 的反射中，像数组、切片、Map、指针等类型变量，他们的<code>.Name()</code>返回空</p>
</li>
</ul>
</li>
<li><p><code>reflect</code> 包中，定义的 Kind 类型：</p>
<ul>
<li>```go<br>type Kind uint<br>const (<pre><code>Invalid Kind = iota  // 非法类型
Bool                 // 布尔型
Int                  // 有符号整型
Int8                 // 有符号8位整型
Int16                // 有符号16位整型
Int32                // 有符号32位整型
Int64                // 有符号64位整型
Uint                 // 无符号整型
Uint8                // 无符号8位整型
Uint16               // 无符号16位整型
Uint32               // 无符号32位整型
Uint64               // 无符号64位整型
Uintptr              // 指针
Float32              // 单精度浮点数
Float64              // 双精度浮点数
Complex64            // 64位复数类型
Complex128           // 128位复数类型
Array                // 数组
Chan                 // 通道
Func                 // 函数
Interface            // 接口
Map                  // 映射
Ptr                  // 指针
Slice                // 切片
String               // 字符串
Struct               // 结构体
UnsafePointer        // 底层指针
</code></pre>
)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## ValueOf</span><br><span class="line"></span><br><span class="line">* `reflect.ValueOf()` 返回的是 `reflect.Value` 类型，包含了**原始值**的值信息</span><br><span class="line"></span><br><span class="line">* `reflect.Value` 与**原始值**之间可以**相互转换**</span><br><span class="line"></span><br><span class="line">* `reflect.Value` 提供获取原始值的方法：</span><br><span class="line"></span><br><span class="line">  * |             方法             |                             说明                             |</span><br><span class="line">    | :--------------------------: | :----------------------------------------------------------: |</span><br><span class="line">    | Interface() **interface &#123;&#125;** | 将值以 interface&#123;&#125; 类型返回，可以通过类型断言转换为指定类型  |</span><br><span class="line">    |         Int() int64          |     将值以 int 类型返回，所有有符号整型均可以此方式返回      |</span><br><span class="line">    |        Uint() uint64         |     将值以 uint 类型返回，所有无符号整型均可以此方式返回     |</span><br><span class="line">    |       Float() float64        | 将值以双精度（float64）类型返回，所有浮点数（float32、float64）均可以此方式返回 |</span><br><span class="line">    |         Bool() bool          |                     将值以 bool 类型返回                     |</span><br><span class="line">    |       Bytes() []bytes        |               将值以字节数组 []bytes 类型返回                |</span><br><span class="line">    |       String() string        |                     将值以字符串类型返回                     |</span><br><span class="line"></span><br><span class="line">### 通过反射获取值</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">func reflectValue(x interface&#123;&#125;) &#123;</span><br><span class="line">	v := reflect.ValueOf(x)</span><br><span class="line">	k := v.Kind()</span><br><span class="line">	switch k &#123;</span><br><span class="line">	case reflect.Int64:</span><br><span class="line">		// v.Int()从反射中获取整型的原始值，然后通过int64()强制类型转换</span><br><span class="line">		fmt.Printf(&quot;type is int64, value is %d\n&quot;, int64(v.Int()))</span><br><span class="line">	case reflect.Float32:</span><br><span class="line">		// v.Float()从反射中获取浮点型的原始值，然后通过float32()强制类型转换</span><br><span class="line">		fmt.Printf(&quot;type is float32, value is %f\n&quot;, float32(v.Float()))</span><br><span class="line">	case reflect.Float64:</span><br><span class="line">		// v.Float()从反射中获取浮点型的原始值，然后通过float64()强制类型转换</span><br><span class="line">		fmt.Printf(&quot;type is float64, value is %f\n&quot;, float64(v.Float()))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">	var a float32 = 3.14</span><br><span class="line">	var b int64 = 100</span><br><span class="line">	reflectValue(a) // type is float32, value is 3.140000</span><br><span class="line">	reflectValue(b) // type is int64, value is 100</span><br><span class="line">	// 将int类型的原始值转换为reflect.Value类型</span><br><span class="line">	c := reflect.ValueOf(10)</span><br><span class="line">	fmt.Printf(&quot;type c :%T\n&quot;, c) // type c :reflect.Value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="通过反射设置变量的值"><a href="#通过反射设置变量的值" class="headerlink" title="通过反射设置变量的值"></a>通过反射设置变量的值</h3><ul>
<li><p>在函数中通过反射修改变量的值，需要<strong>传递变量地址</strong>才能修改变量值</p>
</li>
<li><p>反射中，使用专有的<code>Elem()</code>方法<strong>可以获取指针对应的值</strong></p>
<ul>
<li>```go<br>package mainimport (<pre><code>&quot;fmt&quot;
&quot;reflect&quot;
</code></pre>
)func reflectSetValue1(x interface{}) {<pre><code>v := reflect.ValueOf(x)
if v.Kind() == reflect.Int64 &#123;
    v.SetInt(200) //修改的是副本，reflect包会引发panic
&#125;
</code></pre>
}<br>func reflectSetValue2(x interface{}) {<pre><code>v := reflect.ValueOf(x)
// 反射中使用 Elem()方法获取指针对应的值
if v.Elem().Kind() == reflect.Int64 &#123;
    v.Elem().SetInt(200)
&#125;
</code></pre>
}<br>func main() {<pre><code>var a int64 = 100
// reflectSetValue1(a) //panic: reflect: reflect.Value.SetInt using unaddressable value
reflectSetValue2(&amp;a)
fmt.Println(a)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### IsNil() 和 IsValid</span><br><span class="line"></span><br><span class="line">#### IsNil()</span><br><span class="line"></span><br><span class="line">* 函数原型：`func (v Value) IsNil() bool`</span><br><span class="line"></span><br><span class="line">* 判断 v 持有的值是否为`Nil`</span><br><span class="line">  * v 持有的值的分类必须是通道、函数、接口、映射、指针、切片之一，</span><br><span class="line">  * 否则`IsNil`函数会导致 panic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### IsValid</span><br><span class="line"></span><br><span class="line">* 函数原型：`func (v Value) IsValid() bool`</span><br><span class="line"></span><br><span class="line">* 判断 v 是否持有一个值，如果 v 是**Value零值**，返回假，此时v除了IsValid , String, Kind 之外的方法都会导致 panic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 示例</span><br><span class="line"></span><br><span class="line">* `IsNil` 常用于判断指针是否为空</span><br><span class="line">* `IsValid` 常用于判断返回值是否有效</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">func main() &#123;</span><br><span class="line">	// *int类型空指针</span><br><span class="line">	var a *int</span><br><span class="line">	fmt.Println(&quot;var a *int IsNil:&quot;, reflect.ValueOf(a).IsNil())</span><br><span class="line">	// nil值</span><br><span class="line">	fmt.Println(&quot;nil IsValid:&quot;, reflect.ValueOf(nil).IsValid())</span><br><span class="line">	// 实例化一个匿名结构体</span><br><span class="line">	b := struct&#123;&#125;&#123;&#125;</span><br><span class="line">	// 尝试从结构体中查找&quot;abc&quot;字段</span><br><span class="line">	fmt.Println(&quot;不存在的结构体成员:&quot;, reflect.ValueOf(b).FieldByName(&quot;abc&quot;).IsValid())</span><br><span class="line">	// 尝试从结构体中查找&quot;abc&quot;方法</span><br><span class="line">	fmt.Println(&quot;不存在的结构体方法:&quot;, reflect.ValueOf(b).MethodByName(&quot;abc&quot;).IsValid())</span><br><span class="line">	// map</span><br><span class="line">	c := map[string]int&#123;&#125;</span><br><span class="line">	// 尝试从map中查找一个不存在的键</span><br><span class="line">	fmt.Println(&quot;map中不存在的键：&quot;, reflect.ValueOf(c).MapIndex(reflect.ValueOf(&quot;娜扎&quot;)).IsValid())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="结构体反射"><a href="#结构体反射" class="headerlink" title="结构体反射"></a>结构体反射</h1><h2 id="与结构体相关的方法"><a href="#与结构体相关的方法" class="headerlink" title="与结构体相关的方法"></a>与结构体相关的方法</h2><h2 id="结构体反射示例"><a href="#结构体反射示例" class="headerlink" title="结构体反射示例"></a>结构体反射示例</h2><h1 id="反射是把双刃剑"><a href="#反射是把双刃剑" class="headerlink" title="反射是把双刃剑"></a>反射是把双刃剑</h1><ul>
<li>反射式一个强大并富有表现力的工具，能使得我们写出灵活的代码<ul>
<li>基于反射的代码十分脆弱，反射中类型错误会在真正运行的时候才会引发 panic ，那很可能是在代码写完的很长时间之后</li>
<li>大量使用反射的代码通常难以理解</li>
<li>反射的性能低下</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>16 并发</title>
    <url>/p/a4216756.html</url>
    <content><![CDATA[<h1 id="16-并发"><a href="#16-并发" class="headerlink" title="16 并发"></a>16 并发</h1><p>[toc]</p>
<p>Go 语言 <strong>在语言层面天生支持并发</strong></p>
<h1 id="并发-与-并行"><a href="#并发-与-并行" class="headerlink" title="并发 与 并行"></a>并发 与 并行</h1><ul>
<li><strong>并发</strong>：在<strong>同一时间段</strong>内执行多个任务<ul>
<li>用微信和两个人聊天</li>
</ul>
</li>
<li><strong>并行</strong>：<strong>同一时刻</strong>执行多个任务<ul>
<li>我和朋友都在用微信别人聊天</li>
</ul>
</li>
<li><strong>Go 的并发</strong>通过<code>goroutine</code> 实现<ul>
<li><code>goroutin</code> <strong>类似于线程</strong>，属于用户态的线程，可以创建许多个<code>goroutine</code> 并发工作</li>
<li><code>goroutine</code> 是 由Go 语言运行时，调度完成，而线程是由操作系统调度完成</li>
</ul>
</li>
<li>Go 还提供<code>channel</code> 在多个<code>goroutine</code> 间进行通信</li>
<li><code>goroutine</code> 和 <code>channel</code> 是Go 语言秉承的 <strong><code>CSP(Communicating Sequential Process)</code> 并发模式</strong>的重要实现基础</li>
</ul>
<h1 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h1><ul>
<li><p><code>java/c++ </code>中实现并发编程：耗费大量心智</p>
<ul>
<li>需要自己维护一个线程池，</li>
<li>需要自己去包装一个又一个任务</li>
<li>需要自己去调度线程执行任务并维护上下文切换</li>
</ul>
</li>
<li><p>Go 中<code>goroutine</code> 机制：程序员自己定义多个任务，让系统帮助我们将任务分配到 CPU 上实现并发</p>
</li>
<li><p><code>goroutine</code> :类似于线程，由Go 在 runtime 时调度和管理</p>
</li>
<li><p>Go 程序会智能地将 goroutine 中的任务合理地分配给每个CPU</p>
</li>
<li><p><strong>现代化的编程语言</strong>：在语言层面已经<strong>内置了调度和上下文切换的机制</strong></p>
</li>
<li><p>Go 中不需要自己写进程、线程、协程，只需要<code>goroutine</code>，</p>
</li>
<li><p>当需要<strong>让某个任务并发执行</strong>的时候，只需要将这个任务 <strong>包装成一个函数</strong>，开启一个<code>goroutine</code> 去执行这个函数就可以</p>
</li>
</ul>
<h2 id="使用-goroutine"><a href="#使用-goroutine" class="headerlink" title="使用 goroutine"></a>使用 goroutine</h2><ul>
<li>Go 中使用<code>goroutine</code> ：<ul>
<li>再调用函数的时候前面加关键字<code>go</code> ，即可为函数创建一个<code>goroutine</code></li>
</ul>
</li>
<li>一个<code>goroutine</code> 必定对应一个函数，可以创建多个<code>goroutine</code> 去执行相同的函数</li>
</ul>
<h2 id="启动单个-goroutine"><a href="#启动单个-goroutine" class="headerlink" title="启动单个 goroutine"></a>启动单个 goroutine</h2><ul>
<li><p>在匿名函数或者普通函数前<code>go</code> </p>
</li>
<li><p>示例</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hello</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Hello Goroutine!&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	hello()</span><br><span class="line">	fmt.Println(<span class="string">&quot;main goroutine done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>示例中，hello( ) 和 main() 是串行执行的<br>结果</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Hello Goroutine!</span><br><span class="line">main goroutine done!</span><br></pre></td></tr></table></figure></li>
<li><p>在函数hello前加关键字<code>go</code> ，启动一个goroutine去执行hello函数</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> hello() <span class="comment">// 启动另外一个goroutine去执行hello函数</span></span><br><span class="line">	fmt.Println(<span class="string">&quot;main goroutine done!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>执行结果纸打印了<code>main goroutine done!</code></p>
<ul>
<li>因为程序启动当时，Go 程序会为<code>main()</code>函数创建一个默认的<code>goroutine</code></li>
<li>当main() 返回时，该<code>goroutine</code> 就结束了，所有在<code>main()</code> 中启动的<code>goroutine</code> 会一同结束，<code>main</code> 所在的<code>goroutine</code> 是夜王，而其他<code>goroutine</code> 是异鬼</li>
</ul>
</li>
<li><p>让main函数等hello函数：<code>time.Sleep</code></p>
<ul>
<li>```go<br>func main() {<pre><code>go hello() // 启动另外一个goroutine去执行hello函数
fmt.Println(&quot;main goroutine done!&quot;)
time.Sleep(time.Second)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 执行结果：先打印`main goroutine done!` , 在打印`Hello Goroutine!`</span><br><span class="line">* 在创建`goroutine` 时需要花费时间，此时main函数所在的`goroutine` 是继续执行的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 启动多个 goroutine</span><br><span class="line"></span><br><span class="line">* 使用`sysnc.WaitGroup` 实现`goroutine` 的同步</span><br><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  var wg sync.WaitGroup</span><br><span class="line">  </span><br><span class="line">  func hello(i int) &#123;</span><br><span class="line">  	defer wg.Done() // goroutine结束就登记-1</span><br><span class="line">  	fmt.Println(&quot;Hello Goroutine!&quot;, i)</span><br><span class="line">  &#125;</span><br><span class="line">  func main() &#123;</span><br><span class="line">  </span><br><span class="line">  	for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">  		wg.Add(1) // 启动一个goroutine就登记+1</span><br><span class="line">  		go hello(i)</span><br><span class="line">  	&#125;</span><br><span class="line">  	wg.Wait() // 等待所有登记的goroutine都结束</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>多次执行，打印的顺序不一致，</p>
<ul>
<li>因为10<code>goroutine</code> 是并发执行的，而<code>goroutine</code> 的调度是随机的</li>
</ul>
</li>
</ul>
<h1 id="goroutine-与-线程"><a href="#goroutine-与-线程" class="headerlink" title="goroutine 与 线程"></a>goroutine 与 线程</h1><h2 id="可增长的栈"><a href="#可增长的栈" class="headerlink" title="可增长的栈"></a>可增长的栈</h2><ul>
<li>OS 线程一般都有固定的栈内存(通常为2 MB)</li>
<li>一个<code>goroutine</code> 的栈在其生命周期开始时只有很小的栈（一般为2 KB），<code>goroutine</code> 的栈不是固定的，按需增大和缩小，<code>goroutine</code> 的栈大小最大为<code>1 GB</code>，</li>
<li>因此一次创建十万<code>groutine</code> 也可以</li>
</ul>
<h2 id="goroutine-调度"><a href="#goroutine-调度" class="headerlink" title="goroutine 调度"></a>goroutine 调度</h2><ul>
<li><p><strong><code>GPM</code></strong> 是Go<strong>运行时(runtime) 层面的实现</strong>，是G<strong>o自己实现的一套调度系统</strong>，区别于操作系统调度OS线程</p>
<ul>
<li><strong><code>G</code>:</strong> 一个<code>goroutine</code> , 存放着本<strong>共routine信息</strong>，和<strong>与所在<code>P</code>的绑定</strong></li>
<li><strong><code>P</code></strong>: <strong>管理着一组 goroutine 队列</strong>，<ul>
<li>P 中存储着当前 goroutine 运行的上下文环境（函数指针、堆栈地址、地址边界）</li>
<li>P 对自己管理的 goroutine 队列做出一些调度（例如将占用CPU时间长的 goroutine 暂停、运行后续的goroutine等）</li>
<li>当自己的队列消费完后，就去全局队列里取，若全局队列也消费完了，去其他P的队列里抢任务</li>
</ul>
</li>
<li><strong><code>M(machine)</code></strong>: Go 运行时（runtime）对 <strong>操作系统内核线程的虚拟</strong>，<em>M 与内核线程</em>一般是<strong>一一映射</strong>的关系，<strong>一个 goroutine 最终是要放到 M 上执行</strong>的</li>
</ul>
</li>
<li><p><strong><code>P</code> 和 <code>M</code></strong> 也是一一对应：</p>
<ul>
<li><strong>P 管理着一组 G 挂载 在M上运行</strong></li>
<li>当一个 G 长久阻塞在一个 M 上时，<strong>runtime</strong> 会新建一个 M，<strong>阻塞G</strong> 所在的P会把其他的 G 挂载在新建的 M 上</li>
<li>当旧 的 <strong>G阻塞完成或者认为其已经死掉</strong>时，回收旧的 M</li>
</ul>
</li>
<li><p>P 的个数通过<code>runtime.GOMAXPROCS</code>设定，最大256，<code>Go1.5</code> 后<strong>默认</strong>为<strong>物理线程数</strong></p>
<ul>
<li>在<strong>并发量大时</strong>，会增加一些 P 和 M，不会太多</li>
</ul>
</li>
<li><p>==注意==</p>
<ul>
<li><strong>从线程调度看，Go语言与其它语言相比的优势</strong>：<ul>
<li><strong>OS线程</strong>是由<strong>OS内核</strong>来调度的，<strong>goroutine</strong> 则是由Go运行时（runtime）<strong>自己的调度器</strong>调度的，<strong>调度器</strong>使用一个称为**<code>m:n</code>调度<strong>的技术（</strong>复用/调度 m 个goroutine到 n 个OS线程**）<ul>
<li>一大特点： goroutine 的调度在<strong>用户态</strong>完成，不涉及内核态与用户台的频繁切换，包括<strong>内存的分配与释放</strong>，都是在<strong>用户态维护着一块内存池</strong>，不直接调用系统的     <code>malloc</code> 函数，成本比调度OS线程低很多</li>
<li>另一方面，充分利用了<strong>多核的硬件资源</strong>，近似地把若干 goroutine 均分在物理线程上，再加上<strong>goroutine的超轻量</strong>，都能保证go调度方面的性能</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="GOMAXPROCS"><a href="#GOMAXPROCS" class="headerlink" title="GOMAXPROCS"></a>GOMAXPROCS</h2><ul>
<li><p>Go <strong>运行时的调度器</strong>使用<code>GOMAXPROCS</code>参数，确定使用多少个 <strong>OS 线程</strong> 来同时执行 Go 代码</p>
<ul>
<li><strong>默认值</strong>是机器上的 <strong>CPU 核心数</strong></li>
<li>例如：一个8 核心的机器上，调度器会把 Go 代码同时调度到 8 个OS线程上</li>
<li>8 即为 <code>m:n</code> 调度中的n</li>
</ul>
</li>
<li><p>Go 中通过<code>runtime.GOMAXPROCS()</code>函数 设置当前程序 并发时 <strong>占用的CPU逻辑核心数</strong></p>
</li>
<li><p><code>Go 1.5</code>之前，默认使用 单核心 执行，<code>Go 1.5</code> 之后，默认使用全部的CPU逻辑核心数</p>
</li>
<li><p>可以通过 <strong>将任务分配到不同的CPU逻辑核心</strong> 上实现 <strong>并行</strong> 的效果：</p>
<ul>
<li>```go<br>func a() {<pre><code>for i := 1; i &lt; 10; i++ &#123;
    fmt.Println(&quot;A:&quot;, i)
&#125;
</code></pre>
}func b() {<pre><code>for i := 1; i &lt; 10; i++ &#123;
    fmt.Println(&quot;B:&quot;, i)
&#125;
</code></pre>
}func main() {<pre><code>runtime.GOMAXPROCS(1)
go a()
go b()
time.Sleep(time.Second)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 两个任务只有一个逻辑核心，此时是做完一个任务再做另一个任务。</span><br><span class="line"></span><br><span class="line">* 将逻辑核心数设为 2，此时两个任务并行执行：</span><br><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  func a() &#123;</span><br><span class="line">  	for i := 1; i &lt; 10; i++ &#123;</span><br><span class="line">  		fmt.Println(&quot;A:&quot;, i)</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func b() &#123;</span><br><span class="line">  	for i := 1; i &lt; 10; i++ &#123;</span><br><span class="line">  		fmt.Println(&quot;B:&quot;, i)</span><br><span class="line">  	&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	runtime.GOMAXPROCS(2)</span><br><span class="line">  	go a()</span><br><span class="line">  	go b()</span><br><span class="line">  	time.Sleep(time.Second)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>Go 中的 <strong>操作系统线程</strong> 和 <strong>goroutine</strong> 的关系</p>
<ul>
<li>一个 <strong>OS线程</strong> 对应 <strong>用户态多个goroutine</strong></li>
<li>go 程序可以<strong>同时使用多个</strong> <strong>OS线程</strong></li>
<li><strong>goroutine</strong> 和 <strong>OS线程</strong> 是多对多的关系即**<code>m:n</code>**</li>
</ul>
</li>
</ul>
<h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><ul>
<li><p>单纯的将函数并发执行无意义，<strong>函数与函数间 交换数据</strong>才能体现<strong>并发执行函数的意义</strong></p>
</li>
<li><p>可以使用<strong>共享内存</strong>进行数据交换，但是共享内存在不同的<code>goroutine</code>中容易发生竞争</p>
<ul>
<li>为了 数据交换 的正确性，必须使用 <strong>互斥量</strong> <strong>对内存进行加锁</strong>，这种做法会有<strong>性能问题</strong></li>
</ul>
</li>
<li><p><strong>Go 的并发模型</strong>：**<code>CSP(Communicating Sequential Process)</code>**, 提倡通过 <strong>通信共享内存</strong> 而不是 通过共享内存而实现通信</p>
</li>
<li><p><code>goroutine</code> 是Go 并发执行的<strong>执行体</strong>，<code>channel</code> 是他们之间的<strong>连接</strong></p>
<ul>
<li><code>channel</code> 可以让一个<code>goroutine</code> 发送特定值到另一个<code>goroutine</code>的通信机制</li>
</ul>
</li>
<li><p><code>channel</code> 是特殊的类型，像一个传送带或者<strong>队列</strong>，总是遵循先入先出的规则，以保证收发数据的顺序</p>
<ul>
<li><strong>每一个通道是一个具体类型的导管</strong>，即在声明channel时需要指定其元素类型</li>
</ul>
</li>
</ul>
<h2 id="channel-类型"><a href="#channel-类型" class="headerlink" title="channel 类型"></a>channel 类型</h2><ul>
<li><p><code>channel</code> 是一种<strong>引用类型</strong></p>
</li>
<li><p>声明 <code>channel</code> 类型的格式：<code>var 变量 chan 元素类型</code></p>
</li>
<li><p>```go<br>var ch1 chan int   // 声明一个传递整型的通道<br>var ch2 chan bool  // 声明一个传递布尔型的通道<br>var ch3 chan []int // 声明一个传递int切片的通道</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 创建 channel</span><br><span class="line"></span><br><span class="line">* channel 是**引用类型**，**空值**是`nil`</span><br><span class="line"></span><br><span class="line">* 声明的通道需要使用`make` 初始化才能使用</span><br><span class="line"></span><br><span class="line">* 创建 channel 的格式：`make(chan 元素类型，缓冲区大小)`</span><br><span class="line"></span><br><span class="line">  * 缓冲区大小可选</span><br><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  ch4 := make(chan int)</span><br><span class="line">  ch5 := make(chan bool)</span><br><span class="line">  ch6 := make(chan []int)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="channel-操作"><a href="#channel-操作" class="headerlink" title="channel 操作"></a>channel 操作</h2><ul>
<li>channel操作:<ul>
<li><strong>发送：send</strong></li>
<li><strong>接收：receive</strong></li>
<li><strong>关闭：close</strong></li>
</ul>
</li>
<li>发送 和 接收：使用<code>&lt;-</code> 符号</li>
<li>定义一个通道<code>ch := make(chan int)</code></li>
</ul>
<h3 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h3><ul>
<li>将一个值发送到通道中</li>
<li><code>ch &lt;- 10</code></li>
</ul>
<h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><ul>
<li><p>从一个通道中接收值</p>
</li>
<li><p>```go<br>x := &lt;- ch //从ch通道中接收值并赋值给变量x<br>&lt;- ch        //从ch中接收值，忽略结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 关闭</span><br><span class="line"></span><br><span class="line">* 调用内置函数`close` 关闭通道</span><br><span class="line">* `close(ch)`</span><br><span class="line">* ==注意：==</span><br><span class="line">  * 只有在通知接收方 goroutine **所有的数据都发送完毕**时，才需要关闭通道</span><br><span class="line">  * **通道可以被垃圾回收机制回收**的，和关闭文件不一样（必须做），关闭通道不一定要做</span><br><span class="line">* 关闭后的通道的==特点==</span><br><span class="line">  * 对一个关闭的通道 再发送值就会导致 panic</span><br><span class="line">  * 对一个关闭的通道进行接收会一直获取值，直到通道为空</span><br><span class="line">  * 对一个关闭且没有值的通道执行接受操作，会得到对应类型的零值</span><br><span class="line">  * 关闭一个已经关闭的通道会导致 panic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 无缓冲的通道</span><br><span class="line"></span><br><span class="line">* 无缓冲的通道（阻塞的通道）</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	ch := make(chan int)</span><br><span class="line">    	ch &lt;- 10</span><br><span class="line">    	fmt.Println(&quot;发送成功&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编译能通过，但执行会报错：</p>
<ul>
<li><p>```<br>fatal error: all goroutines are asleep - deadlock!</p>
<p>goroutine 1 [chan send]:<br>main.main()</p>
<pre><code>e:/LearningNotes/Go/goroutine/zuse.go:7 +0x5f
</code></pre>
<p>exit status 2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * `deadlock`: </span><br><span class="line"></span><br><span class="line">  * 因为`ch:=make(chan int)` 创建的是**无缓冲区的通道**，无缓冲区的通道只有在**有人 接受值 的时候**才能发送值</span><br><span class="line"></span><br><span class="line">  * 上面代码阻塞于`ch &lt;- 10`，形成死锁</span><br><span class="line"></span><br><span class="line">* **一种方法**：启用一个`goroutine`接收值</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func recv(c chan int) &#123;</span><br><span class="line">    	ret := &lt;-c</span><br><span class="line">    	fmt.Println(&quot;接收成功&quot;, ret)</span><br><span class="line">    &#125;</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	ch := make(chan int)</span><br><span class="line">    	go recv(ch) // 启用goroutine从通道接收值</span><br><span class="line">    	ch &lt;- 10</span><br><span class="line">    	fmt.Println(&quot;发送成功&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>无缓冲通道</strong> 上的 <strong>发送操作</strong> 会阻塞，直到另一个<code>goroutine</code> 在该通道上执行 <strong>接收操作</strong>，才能发送成功，两个<code>goroutine</code> 会继续执行</p>
</li>
<li><p>相反，若 <strong>接受操作</strong> 先执行，接收方的<code>goroutine</code> 将阻塞，直到另一个<code>goroutine</code> 在该通道上发送一个值</p>
</li>
</ul>
</li>
<li><p>使用 <strong>无缓冲通道</strong> 进行通信将导致发送和接收的<code>goroutine</code> <strong>同步化</strong></p>
</li>
<li><p>因此 <strong>无缓冲通道</strong> 被称为<code>同步通道</code></p>
</li>
</ul>
<h2 id="有缓冲的通道"><a href="#有缓冲的通道" class="headerlink" title="有缓冲的通道"></a>有缓冲的通道</h2><ul>
<li><p>解决上面的问题<strong>，另一种方法：</strong> 使用有缓冲的通道</p>
</li>
<li><p><strong>有缓冲的通道</strong>：使用 make初始化 的时候为其<strong>指定容量：</strong></p>
<ul>
<li>```go<br>func main() {<pre><code>ch := make(chan int, 1) // 创建一个容量为1的有缓冲区通道
ch &lt;- 10
fmt.Println(&quot;发送成功&quot;)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 只要通道容量大于零，该通道就是**有缓冲的通道**，容量表示通道中能存放元素的数量</span><br><span class="line">* 若满则阻塞</span><br><span class="line">* 可以使用内置函数`len`获取通道内元素的数量，使用`cap`获取通道的容量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## for range 从通道循环取值</span><br><span class="line"></span><br><span class="line">* 向通道发送完数据后，可以通过 `close` 关闭通道</span><br><span class="line"></span><br><span class="line">* 通道被关闭时，在向通道发送值 会引发`panic`，从该通道取值的操作会先取完通道内的值，然后一直取得都是**对应类型的零值**</span><br><span class="line"></span><br><span class="line">* 判断通道是否被关闭：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    // channel 练习</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	ch1 := make(chan int)</span><br><span class="line">    	ch2 := make(chan int)</span><br><span class="line">    	// 开启goroutine将0~100的数发送到ch1中</span><br><span class="line">    	go func() &#123;</span><br><span class="line">    		for i := 0; i &lt; 100; i++ &#123;</span><br><span class="line">    			ch1 &lt;- i</span><br><span class="line">    		&#125;</span><br><span class="line">    		close(ch1)</span><br><span class="line">    	&#125;()</span><br><span class="line">    	// 开启goroutine从ch1中接收值，并将该值的平方发送到ch2中</span><br><span class="line">    	go func() &#123;</span><br><span class="line">    		for &#123;</span><br><span class="line">    			i, ok := &lt;-ch1 // 通道关闭后再取值ok=false</span><br><span class="line">    			if !ok &#123;</span><br><span class="line">    				break</span><br><span class="line">    			&#125;</span><br><span class="line">    			ch2 &lt;- i * i</span><br><span class="line">    		&#125;</span><br><span class="line">    		close(ch2)</span><br><span class="line">    	&#125;()</span><br><span class="line">    	// 在主goroutine中从ch2中接收值打印</span><br><span class="line">    	for i := range ch2 &#123; // 通道关闭后会退出for range循环</span><br><span class="line">    		fmt.Println(i)</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>有两种方式在接收值时，判断该通道是否被关闭</p>
<ul>
<li>```go<br>for {<pre><code>        i, ok := &lt;-ch1 // 通道关闭后再取值ok=false
        if !ok &#123;
            break
        &#125;
        ch2 &lt;- i * i
    &#125;
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  for i := range ch2 &#123; // 通道关闭后会退出for range循环</span><br><span class="line">  		fmt.Println(i)</span><br><span class="line">  	&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h2 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h2><ul>
<li><p>可以将通道作为 <strong>参数</strong> 在 <strong>多个任务函数间</strong> 传递</p>
</li>
<li><p>可以在<strong>不同的任务函数</strong>中，对使用的通道进行<strong>限制</strong>：<strong>只能发送</strong> 或 <strong>只能接收</strong></p>
</li>
<li><p>Go 提供了 <strong>单向通道</strong> ：</p>
<ul>
<li>```go<br>func counter(out chan&lt;- int) {<pre><code>for i := 0; i &lt; 100; i++ &#123;
    out &lt;- i
&#125;
close(out)
</code></pre>
}func squarer(out chan&lt;- int, in &lt;-chan int) {<pre><code>for i := range in &#123;
    out &lt;- i * i
&#125;
close(out)
</code></pre>
}<br>func printer(in &lt;-chan int) {<pre><code>for i := range in &#123;
    fmt.Println(i)
&#125;
</code></pre>
}func main() {<pre><code>ch1 := make(chan int)
ch2 := make(chan int)
go counter(ch1)
go squarer(ch2, ch1)
printer(ch2)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * `chan&lt;- int` 是一个**只写单向通道**（只能对其写入int类型），可以对其**发送操作**，但不能执行接收操作</span><br><span class="line">  * `&lt;-chan int` 是一个**只读单向通道**（只能对其读取int类型），可以对其执行**接收操作**，但不能执行发送操作</span><br><span class="line"></span><br><span class="line">* 在函数传参，以及任何赋值操作中，可以**将双向通道转换成单向通道**，不能反之；</span><br><span class="line"></span><br><span class="line">## 通道总结</span><br><span class="line"></span><br><span class="line">* channel **异常总结**：</span><br><span class="line">  * ![channel异常总结](https://www.liwenzhou.com/images/Go/concurrence/channel01.png)</span><br><span class="line"></span><br><span class="line">* 关闭已关闭 的`channel` 会引发`panic`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># worker pool(goroutine 池)</span><br><span class="line"></span><br><span class="line">* 通常会使用 可以指定启动的 `goroutine` 数量- `worker pool` 模式，以控制`goroutine` 的数量，防止`goroutine` 的泄露和暴涨</span><br><span class="line"></span><br><span class="line">* 简易 `worker pool` 示例：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func worker(id int, jobs &lt;-chan int, results chan&lt;- int) &#123;</span><br><span class="line">    	for j := range jobs &#123;</span><br><span class="line">    		fmt.Printf(&quot;worker:%d start job:%d\n&quot;, id, j)</span><br><span class="line">    		time.Sleep(time.Second)</span><br><span class="line">    		fmt.Printf(&quot;worker:%d end job:%d\n&quot;, id, j)</span><br><span class="line">    		results &lt;- j * 2</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	jobs := make(chan int, 100)</span><br><span class="line">    	results := make(chan int, 100)</span><br><span class="line">    	// 开启3个goroutine</span><br><span class="line">    	for w := 1; w &lt;= 3; w++ &#123;</span><br><span class="line">    		go worker(w, jobs, results)</span><br><span class="line">    	&#125;</span><br><span class="line">    	// 5个任务</span><br><span class="line">    	for j := 1; j &lt;= 5; j++ &#123;</span><br><span class="line">    		jobs &lt;- j</span><br><span class="line">    	&#125;</span><br><span class="line">    	close(jobs)</span><br><span class="line">    	// 输出结果</span><br><span class="line">    	for a := 1; a &lt;= 5; a++ &#123;</span><br><span class="line">    		&lt;-results</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h1 id="select-多路复用"><a href="#select-多路复用" class="headerlink" title="select 多路复用"></a>select 多路复用</h1><ul>
<li><p>通道在 接收数据 时，若没有数据可以接收会发生 阻塞</p>
</li>
<li><p>若需要同时从多个通道接收数据，则更有可能发生上述阻塞</p>
</li>
<li><p>例如：</p>
<ul>
<li>```go<br>for{<pre><code>// 尝试从ch1接收值
data, ok := &lt;-ch1
// 尝试从ch2接收值
data, ok := &lt;-ch2
…
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * 这种遍历方式，可以实现从多个通道接收值，但运行性能很差</span><br><span class="line"></span><br><span class="line">* 为了解决上述问题：Go 内置了`select` 关键字，可以同时响应多个通道的操作</span><br><span class="line"></span><br><span class="line">* `select` 的使用类似于`switch` 语句，有一系列`case` 分支和一个默认分支</span><br><span class="line"></span><br><span class="line">  * 每个`case` 会对应一个通道的通信过程（send or receive）</span><br><span class="line">  * `select` 会一直等待，知道某个`case` 的通信操作完成，会执行`case` 分支对应的语句</span><br><span class="line"></span><br><span class="line">* 格式：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    select&#123;</span><br><span class="line">        case &lt;-ch1:</span><br><span class="line">            ...</span><br><span class="line">        case data := &lt;-ch2:</span><br><span class="line">            ...</span><br><span class="line">        case ch3&lt;-data:</span><br><span class="line">            ...</span><br><span class="line">        default:</span><br><span class="line">            默认操作</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li>```go<br>func main() {<pre><code>ch := make(chan int, 1)
for i := 0; i &lt; 10; i++ &#123;
    select &#123;
    case x := &lt;-ch:
        fmt.Println(x)
    case ch &lt;- i:
    &#125;
&#125;
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 使用`select` 语句增加代码可读性：</span><br><span class="line">  * 可处理一个或多个 channel 的发送/接受操作</span><br><span class="line">  * 如果多个`case` 同时满足，`select` 会随机选择一个</span><br><span class="line">  * 对于没有`case` 的`select&#123;&#125;` 会一直等待，可用于阻塞`main` 函数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 并发安全和锁</span><br><span class="line"></span><br><span class="line">* Go 中，可能会存在多个`goroutine` 同时操作一个资源（临界区），这种情况会发生`竞态问题` 数据竞争</span><br><span class="line"></span><br><span class="line">* 示例：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    var x int64</span><br><span class="line">    var wg sync.WaitGroup</span><br><span class="line">    </span><br><span class="line">    func add() &#123;</span><br><span class="line">    	for i := 0; i &lt; 5000; i++ &#123;</span><br><span class="line">    		x = x + 1</span><br><span class="line">    	&#125;</span><br><span class="line">    	wg.Done()</span><br><span class="line">    &#125;</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	wg.Add(2)</span><br><span class="line">    	go add()</span><br><span class="line">    	go add()</span><br><span class="line">    	wg.Wait()</span><br><span class="line">    	fmt.Println(x)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>开启两个<code>goroutine</code> 去累加 x 的值，这两个<code>goroutine</code> 在访问和修改<code>x</code> 时会存在数据竞争，导致结果与期待不符</p>
</li>
<li><p>package <code>time</code></p>
<ul>
<li><code>time.Sleep(time.Second)</code> : 主线程等到所有的 goroutine 都运行完毕，使得主线程睡眠一会，等待其他线程充分运行</li>
<li><code>sync.WaitGroup</code> : 内部有个计时器，最初从零开始。有三个方法控制计数器的数量<ul>
<li><code>Add()</code> : 将计数器设置为n</li>
<li><code>Done()</code> : 每次将计数器 -1</li>
<li><code>Wait()</code> : 会阻塞代码运行，直到计数器的值减少为0</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><ul>
<li><p><strong>互斥锁</strong>：常用的控制共享资源访问的方法，能保证同时只有一个<code>goroutine</code> 可以访问共享资源</p>
</li>
<li><p>Go 中使用<code>sync</code> 和 <code>Mutex</code> 包实现互斥锁</p>
<ul>
<li>```go<br>var x int64<br>var wg sync.WaitGroup<br>var lock sync.Mutexfunc add() {<pre><code>for i := 0; i &lt; 5000; i++ &#123;
    lock.Lock() // 加锁
    x = x + 1
    lock.Unlock() // 解锁
&#125;
wg.Done()
</code></pre>
}<br>func main() {<pre><code>wg.Add(2)
go add()
go add()
wg.Wait()
fmt.Println(x)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 使用 **互斥锁** 能保证同一时间有且只有一个`goroutine` 进入 **临界区**，其他的`goroutine` 则在等待锁</span><br><span class="line">* 当互斥锁释放后，等待的`goroutine` 才可以获取锁进入临界区</span><br><span class="line">  </span><br><span class="line">  * 当多个`goroutine` 同时等待一个锁时，唤醒的策略是随机的</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 读写互斥锁</span><br><span class="line"></span><br><span class="line">* 互斥锁 是 **完全互斥** 的</span><br><span class="line"></span><br><span class="line">* 并发的读取一个资源时，不涉及修改资源不需要加锁，这时使用读写锁更好</span><br><span class="line"></span><br><span class="line">* **读写锁** 在 Go 中：`sync` 包 中的`RWMutex`</span><br><span class="line"></span><br><span class="line">* 读写锁：读锁 和 写锁</span><br><span class="line"></span><br><span class="line">  * 当一个 `goroutine ` 获取读锁后，其他的`goroutine` 若获取读锁会继续获得锁，若获取写锁会等待</span><br><span class="line">  * 当一个`goroutine` 获取写锁之后，其他的`goroutine` 无论是获取读锁还是写锁都会等待</span><br><span class="line"></span><br><span class="line">* 示例</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    var (</span><br><span class="line">    	x      int64</span><br><span class="line">    	wg     sync.WaitGroup</span><br><span class="line">    	lock   sync.Mutex</span><br><span class="line">    	rwlock sync.RWMutex</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    func write() &#123;</span><br><span class="line">    	// lock.Lock()   // 加互斥锁</span><br><span class="line">    	rwlock.Lock() // 加写锁</span><br><span class="line">    	x = x + 1</span><br><span class="line">    	time.Sleep(10 * time.Millisecond) // 假设写操作耗时10毫秒</span><br><span class="line">    	rwlock.Unlock()                   // 解写锁</span><br><span class="line">    	// lock.Unlock()                     // 解互斥锁</span><br><span class="line">    	wg.Done()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func read() &#123;</span><br><span class="line">    	// lock.Lock()                  // 加互斥锁</span><br><span class="line">    	rwlock.RLock()               // 加读锁</span><br><span class="line">    	time.Sleep(time.Millisecond) // 假设读操作耗时1毫秒</span><br><span class="line">    	rwlock.RUnlock()             // 解读锁</span><br><span class="line">    	// lock.Unlock()                // 解互斥锁</span><br><span class="line">    	wg.Done()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	start := time.Now()</span><br><span class="line">    	for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">    		wg.Add(1)</span><br><span class="line">    		go write()</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	for i := 0; i &lt; 1000; i++ &#123;</span><br><span class="line">    		wg.Add(1)</span><br><span class="line">    		go read()</span><br><span class="line">    	&#125;</span><br><span class="line">    </span><br><span class="line">    	wg.Wait()</span><br><span class="line">    	end := time.Now()</span><br><span class="line">    	fmt.Println(end.Sub(start))</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>读写锁</strong> 适合 读多写少的场景</p>
</li>
</ul>
<h2 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h2><ul>
<li><p>Go 中 使用<code>sync.WaitGroup</code> 来实现并发任务的同步。<code>sync.WaitGroup</code> 的方法：</p>
<ul>
<li><table>
<thead>
<tr>
<th>方法名</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>(wg *WaitGroup) Add(delta int)</td>
<td>计数器+delta</td>
</tr>
<tr>
<td>(wg *WaitGroup) Done()</td>
<td>计数器-1</td>
</tr>
<tr>
<td>(wg *WaitGroup) Wait()</td>
<td>阻塞 直到计数器变为0</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><code>sync.WaitGroup</code> 内部维护这一个<strong>计数器</strong>，计数器的值可以增加和减少</p>
<ul>
<li>当启动了 N 个并发任务时，就将计数器值增加N</li>
<li>每个任务完成时，通过调用Done() 将计数器减 1 </li>
<li>通过调用 Wait() 来等待并发任务执行完，当计数器值为0时，表示所有并发任务已经完成</li>
</ul>
</li>
<li><p><code>sync.WaitGroup</code>示例：</p>
<ul>
<li>```go<br>var wg sync.WaitGroupfunc hello() {<pre><code>defer wg.Done()
fmt.Println(&quot;Hello Goroutine!&quot;)
</code></pre>
}<br>func main() {<pre><code>wg.Add(1)
go hello() // 启动另外一个goroutine去执行hello函数
fmt.Println(&quot;main goroutine done!&quot;)
wg.Wait()
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 注意：`sync.WaitGroup` 是一个结构体，传递的时候需要传递指针</span><br><span class="line"></span><br><span class="line">## sync.Once</span><br><span class="line"></span><br><span class="line">* 在许多场景，确保某些操作在高并发的场景下只执行一次</span><br><span class="line">  * 例如 只加载一次配置文件，只i关闭一次通道</span><br><span class="line"></span><br><span class="line">### 加载配置文件示例</span><br><span class="line"></span><br><span class="line">### 并发安全的单例模式</span><br><span class="line"></span><br><span class="line">## sync.Map</span><br><span class="line"></span><br><span class="line">* Go 中的内置map 不是并发安全：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    var m = make(map[string]int)</span><br><span class="line">    </span><br><span class="line">    func get(key string) int &#123;</span><br><span class="line">    	return m[key]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func set(key string, value int) &#123;</span><br><span class="line">    	m[key] = value</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	wg := sync.WaitGroup&#123;&#125;</span><br><span class="line">    	for i := 0; i &lt; 20; i++ &#123;</span><br><span class="line">    		wg.Add(1)</span><br><span class="line">    		go func(n int) &#123;</span><br><span class="line">    			key := strconv.Itoa(n)</span><br><span class="line">    			set(key, n)</span><br><span class="line">    			fmt.Printf(&quot;k=:%v,v:=%v\n&quot;, key, get(key))</span><br><span class="line">    			wg.Done()</span><br><span class="line">    		&#125;(i)</span><br><span class="line">    	&#125;</span><br><span class="line">    	wg.Wait()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>当并发多了之后，会报<code>fatal error: concurrent map writes</code> 错误</p>
</li>
<li><p>需要为 map 加锁来保证并发的安全性，Go 的<code>sync</code> 包中提供了一个开箱即用的并发安全版 map <code>sync.Map</code></p>
<ul>
<li>开箱即用 不需要像内置 map 一样使用make初始化才能使用</li>
<li><code>sync.Map</code> 内置了<code>Store</code>,  <code>Load</code>, <code>LoadOrStore</code>, <code>Delete</code>, <code>Range</code> 等方法</li>
</ul>
</li>
<li><p>```go<br>var m = sync.Map{}</p>
<p>func main() {</p>
<pre><code>wg := sync.WaitGroup&#123;&#125;
for i := 0; i &lt; 20; i++ &#123;
    wg.Add(1)
    go func(n int) &#123;
        key := strconv.Itoa(n)
        m.Store(key, n)
        value, _ := m.Load(key)
        fmt.Printf(&quot;k=:%v,v:=%v\n&quot;, key, value)
        wg.Done()
    &#125;(i)
&#125;
wg.Wait()
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 原子操作</span><br><span class="line"></span><br><span class="line">* 加锁操作：涉及内核态的上下文切换，会比较耗时、代价比较高</span><br><span class="line">* 针对**基本数据类型**，使用**原子操作**保证并发安全</span><br><span class="line">  * 原子操作 是Go提供的方法，在用户态完成，性能比加锁更好</span><br><span class="line">  * Go 中原子操作由内置标准库`sync/atomic` 提供</span><br><span class="line"></span><br><span class="line">## atomic包</span><br><span class="line"></span><br><span class="line">* **方法：**</span><br><span class="line">  * 读取操作：`LoadInt`</span><br><span class="line">  * 写入操作: `StoreInt`</span><br><span class="line">  * 修改操作 : `AddInt`</span><br><span class="line">  * 交换操作 : `SwapInt`</span><br><span class="line">  * 比较并交换操作 : `CompareAndSwapPointer`</span><br><span class="line"></span><br><span class="line">## 示例</span><br><span class="line"></span><br><span class="line">* 比较互斥锁和原子操作的性能</span><br><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  package main</span><br><span class="line">  </span><br><span class="line">  import (</span><br><span class="line">  	&quot;fmt&quot;</span><br><span class="line">  	&quot;sync&quot;</span><br><span class="line">  	&quot;sync/atomic&quot;</span><br><span class="line">  	&quot;time&quot;</span><br><span class="line">  )</span><br><span class="line">  </span><br><span class="line">  type Counter interface &#123;</span><br><span class="line">  	Inc()</span><br><span class="line">  	Load() int64</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 普通版</span><br><span class="line">  type CommonCounter struct &#123;</span><br><span class="line">  	counter int64</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (c CommonCounter) Inc() &#123;</span><br><span class="line">  	c.counter++</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (c CommonCounter) Load() int64 &#123;</span><br><span class="line">  	return c.counter</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 互斥锁版</span><br><span class="line">  type MutexCounter struct &#123;</span><br><span class="line">  	counter int64</span><br><span class="line">  	lock    sync.Mutex</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (m *MutexCounter) Inc() &#123;</span><br><span class="line">  	m.lock.Lock()</span><br><span class="line">  	defer m.lock.Unlock()</span><br><span class="line">  	m.counter++</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (m *MutexCounter) Load() int64 &#123;</span><br><span class="line">  	m.lock.Lock()</span><br><span class="line">  	defer m.lock.Unlock()</span><br><span class="line">  	return m.counter</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // 原子操作版</span><br><span class="line">  type AtomicCounter struct &#123;</span><br><span class="line">  	counter int64</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (a *AtomicCounter) Inc() &#123;</span><br><span class="line">  	atomic.AddInt64(&amp;a.counter, 1)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func (a *AtomicCounter) Load() int64 &#123;</span><br><span class="line">  	return atomic.LoadInt64(&amp;a.counter)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func test(c Counter) &#123;</span><br><span class="line">  	var wg sync.WaitGroup</span><br><span class="line">  	start := time.Now()</span><br><span class="line">  	for i := 0; i &lt; 1000; i++ &#123;</span><br><span class="line">  		wg.Add(1)</span><br><span class="line">  		go func() &#123;</span><br><span class="line">  			c.Inc()</span><br><span class="line">  			wg.Done()</span><br><span class="line">  		&#125;()</span><br><span class="line">  	&#125;</span><br><span class="line">  	wg.Wait()</span><br><span class="line">  	end := time.Now()</span><br><span class="line">  	fmt.Println(c.Load(), end.Sub(start))</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	c1 := CommonCounter&#123;&#125; // 非并发安全</span><br><span class="line">  	test(c1)</span><br><span class="line">  	c2 := MutexCounter&#123;&#125; // 使用互斥锁实现并发安全</span><br><span class="line">  	test(&amp;c2)</span><br><span class="line">  	c3 := AtomicCounter&#123;&#125; // 并发安全且比互斥锁效率更高</span><br><span class="line">  	test(&amp;c3)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>atomic</code> 包提供了底层的原子级内存操作，对于同步算法的实现很有用</p>
</li>
<li></li>
</ul>
<h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><ol>
<li><p>使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goroutine</span><br></pre></td></tr></table></figure>

<p>和</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">channel</span><br></pre></td></tr></table></figure>

<p>实现一个计算int64随机数各位数和的程序。</p>
<ol>
<li>开启一个<code>goroutine</code>循环生成int64类型的随机数，发送到<code>jobChan</code></li>
<li>开启24个<code>goroutine</code>从<code>jobChan</code>中取出随机数计算各位数的和，将结果发送到<code>resultChan</code></li>
<li>主<code>goroutine</code>从<code>resultChan</code>取出结果并打印到终端输出</li>
</ol>
</li>
<li><p>为了保证业务代码的执行性能将之前写的日志库改写为异步记录日志方式。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>17 网络编程</title>
    <url>/p/527606cb.html</url>
    <content><![CDATA[<h1 id="17-网络编程"><a href="#17-网络编程" class="headerlink" title="17 网络编程"></a>17 网络编程</h1><ul>
<li><p>使得<strong>程序相互通信</strong></p>
</li>
<li><p>演示使用<code>net</code> 包进行<code>TCP</code> 和<code>UDP</code> 通信</p>
</li>
</ul>
<h1 id="互联网协议介绍"><a href="#互联网协议介绍" class="headerlink" title="互联网协议介绍"></a>互联网协议介绍</h1><ul>
<li>互联网的核心是<strong>一系列协议</strong>，总称为<code>互联网协议</code> <strong>(Internet Protocol Suite)</strong> <ul>
<li>这一系列协议规定了电脑如何<strong>连接和组网</strong></li>
</ul>
</li>
</ul>
<h2 id="互联网分层模型"><a href="#互联网分层模型" class="headerlink" title="互联网分层模型"></a>互联网分层模型</h2><ul>
<li><p>互联网的逻辑实现：</p>
<ul>
<li>![osi七层模型](E:\LearningNotes\Go\17 网络编程.assets\osi.png)</li>
</ul>
</li>
<li><p>互联网按照不同的模型划分为不同的分层</p>
</li>
<li><p>无论按照什么模型划分：越往上的层越 靠近<strong>用户</strong>，越往下的层越 靠近<strong>硬件</strong></p>
</li>
</ul>
<h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><ul>
<li>电脑与外界互联网通信<ul>
<li>先把电脑连接网络：使用 双绞线、光纤、无线电波 等方式</li>
</ul>
</li>
<li><strong>实物理层</strong>：把电脑连接起来的物理手段</li>
<li>主要是<strong>规定了网络的一些电气特性</strong>，作用是负责传送 0 和 1 的电信号</li>
</ul>
<h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><ul>
<li>功能：规定解读电信号的方式，确定了物理层传输的 0 和 1 的分组方式及代表意义<ul>
<li>例如：多少电信号算一组？每个信号位有何意义</li>
</ul>
</li>
<li><strong>以太网 (Ethernet) 的协议</strong>占据了主导地位</li>
</ul>
<ul>
<li>以太网 规定，<strong>一组电信号</strong>构成一个<strong>数据包</strong>，叫做 <code>帧Frame</code> <ul>
<li><strong>一个帧</strong>：<code>标头Head</code> 和 <code>数据Data</code> 组成</li>
<li><strong>标头 ：</strong>包含数据包的一些<strong>说明项</strong>：如发送者、接收者、数据类型等<ul>
<li>长度：固定 18 字节</li>
</ul>
</li>
<li><strong>数据 ：</strong>数据包的<strong>具体内容</strong><ul>
<li>长度：最短 46 字节，最长 1500 字节</li>
</ul>
</li>
<li>若数据很长，必须分割成多个帧发送</li>
</ul>
</li>
</ul>
<ul>
<li>标识 发送者 和 接收者：</li>
<li>以太网协议 规定：连入网络的所有设备 必须具有 网卡接口<ul>
<li>数据包必须是从一块网卡，传送到另一块网卡</li>
<li>网卡地址，就是数据包的发送地址和接收地址，这就是<strong>MAC地址</strong></li>
</ul>
</li>
<li>每块网卡拥有独一无二的<strong>MAC地址</strong>，长度是 48 个二进制位，通常用 12 个十六进制数表示<ul>
<li>前 6 个十六进制数 是厂商编号</li>
<li>后 6 个是该厂商的网卡流水号</li>
</ul>
</li>
<li>MAC 地址：定位网卡和数据包的路径</li>
</ul>
<ul>
<li>通过 ARP 协议获取接收方的 MAC地址，</li>
<li>以太网采用<code>广播broadcasting</code> 发送方式<ul>
<li>向本网络内所有计算机都发送数据包</li>
<li>每台计算机读取这个包的 <code>标头</code> ，找到接收方的MAC地址，</li>
<li>然后与自身的MAC地址相比较，若相同就接受这个包；否则就丢弃</li>
</ul>
</li>
</ul>
<h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><ul>
<li>根据以太网协议，可以依靠 <strong>MAC 地址</strong> 向外发送数据</li>
<li>以太网采用广播方式发送数据包 重大缺陷：<ul>
<li>所有成员人手一包，不仅效率低</li>
<li>而且发送的数据只能局限在 发送者 所在的子网络</li>
</ul>
</li>
</ul>
<ul>
<li>区别哪些 MAC 地址属于同一个子网络<ul>
<li>若是同一个字网络，就采用广播方式发送</li>
<li>否则就采用<code>路由</code> 方式发送</li>
</ul>
</li>
<li>针对该问题，导致了网络层的诞生，</li>
<li>网络层的作用：引进一套新的地址，区分不同的计算机是否属于同一个子网络<ul>
<li>这套地址 即网络地址，简称 网址</li>
</ul>
</li>
</ul>
<ul>
<li>至此，每台计算机拥有两种地址：<ul>
<li><strong>MAC 地址</strong>：将数据包 送到该子网络（网络地址确定的）中的目标网卡<ul>
<li>绑定于网卡</li>
</ul>
</li>
<li><strong>网络地址</strong>：帮助我们确定计算机所在的子网络<ul>
<li>网络管理员分配的</li>
</ul>
</li>
<li>两者无任何联系</li>
</ul>
</li>
<li>先处理网络地址，在处理MAC地址</li>
</ul>
<ul>
<li><strong>IP 协议</strong>：规定网络地址的协议<ul>
<li>所定义的地址：IP 地址</li>
</ul>
</li>
<li>目前，广泛采用 <code>IPv4</code> , IP 协议第四版<ul>
<li>网络地址：32 个二进制位组成</li>
<li>习惯用<strong>分成四段</strong>的十进制数表示 IP 地址：从<code>0.0.0.0到255.255.255.255</code></li>
</ul>
</li>
</ul>
<ul>
<li>IP 数据包：根据 IP 协议发送的数据<ul>
<li><strong>标头</strong>：版本、长度、IP 地址<ul>
<li>长度：20 - 60字节</li>
</ul>
</li>
<li><strong>数据：</strong>IP 数据包的具体内容</li>
<li>整个数据包的总长度最大为 65535 字节</li>
</ul>
</li>
</ul>
<h3 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h3><ul>
<li>有了 MAC 地址 和 IP 地址，可以在互联网上的 任意两台主机建立通信</li>
<li>同一台主机上的许多程序 需要使用网络收发数据包，该如何区分数据包的归属</li>
<li>使用参数 <code>端口Port</code> 表示数据包供哪个进程使用<ul>
<li>Port 是每一个使用网卡的程序的编号</li>
<li>每一个数据包都发到主机的特定端口</li>
</ul>
</li>
</ul>
<ul>
<li>端口 是<code>0-65535</code> 的一个整数，使用16 个二进制位表示<ul>
<li><code>0-1023</code> 的端口被系统占用</li>
<li>用户只能选用大于 1023 的端口</li>
</ul>
</li>
<li>有了 IP 和 端口，可以唯一确定互联网上一个程序，进而实现网络间的程序通信</li>
</ul>
<ul>
<li>必须在数据包中加入 端口信息，因此需要新的协议<ul>
<li><code>UDP</code> 协议：在数据前加上端口号，总长度不超过<code>65535</code> 字节<ul>
<li>缺陷：无法确定对方是否收到</li>
<li>标头：发出端口，接收端口<ul>
<li>8个字节</li>
</ul>
</li>
<li>数据：具体内容</li>
</ul>
</li>
<li><code>TCP</code> 协议：保证数据不丢失<ul>
<li>缺陷：过程复杂，实现困难，消耗较多的资源</li>
<li>无长度限制</li>
<li>通常长度不超过 IP 数据包的长度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><ul>
<li>应用程序收到 传输层数据，需要对数据进行解包：（需要事先规定好通信的数据格式）</li>
<li>应用层的作用：规定应用程序使用的数据格式<ul>
<li>例如：TCP协议之上的 Email，HTTP，FTP等协议</li>
<li>这些协议组成了互联网协议的应用层</li>
</ul>
</li>
<li>发送方的<code>HTTP</code> 数据，经过互联网的传输过程中，会依次添加各层协议的标头信息，接收方收到数据包后， 再依次根据协议解包得到数据<ul>
<li>![HTTP数据传输图解](E:\LearningNotes\Go\17 网络编程.assets\httptcpip.png)</li>
</ul>
</li>
</ul>
<h1 id="socket-编程"><a href="#socket-编程" class="headerlink" title="socket 编程"></a>socket 编程</h1><ul>
<li>Socket 是 BSD UNIX 的进程通信机制，称作<code>套接字</code></li>
<li>作用：描述 IP 地址和端口，一个通信链的句柄</li>
<li>可以理解为 <code>TCP/IP</code> 网络的 API ，定义了许多函数和例程，程序员可以用它们开发<code>TCP/IP</code> 网络上的应用程序</li>
<li>电脑上运行的应用程序，通常通过<code>套接字</code>向网络发出请求或者应答请求</li>
</ul>
<h2 id="socket-图解"><a href="#socket-图解" class="headerlink" title="socket 图解"></a>socket 图解</h2><ul>
<li><code>Socket</code> 是应用层与<code>TCP/IP</code> 协议族通信的中间软件抽象层</li>
<li>将复杂的<code>TCP/IP</code> 协议族 隐藏在<code>Socket</code> 后，<ul>
<li>用户只需调用Socket相关函数，</li>
<li>让Socket去组织符合指定的协议数据，然后进行通信</li>
</ul>
</li>
<li>![socket图解](E:\LearningNotes\Go\17 网络编程.assets\socket.png)</li>
</ul>
<h2 id="Go-语言实现-TCP-通信"><a href="#Go-语言实现-TCP-通信" class="headerlink" title="Go 语言实现 TCP 通信"></a>Go 语言实现 TCP 通信</h2><h3 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h3><h3 id="TCP-服务端"><a href="#TCP-服务端" class="headerlink" title="TCP 服务端"></a>TCP 服务端</h3><h3 id="TCP-客户端"><a href="#TCP-客户端" class="headerlink" title="TCP 客户端"></a>TCP 客户端</h3><h2 id="TCP-黏包"><a href="#TCP-黏包" class="headerlink" title="TCP 黏包"></a>TCP 黏包</h2><h3 id="黏包示例"><a href="#黏包示例" class="headerlink" title="黏包示例"></a>黏包示例</h3><h3 id="为什么会出现黏包"><a href="#为什么会出现黏包" class="headerlink" title="为什么会出现黏包"></a>为什么会出现黏包</h3><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h2 id="Go-语言实现UDP通信"><a href="#Go-语言实现UDP通信" class="headerlink" title="Go 语言实现UDP通信"></a>Go 语言实现UDP通信</h2><h3 id="UDP-协议"><a href="#UDP-协议" class="headerlink" title="UDP 协议"></a>UDP 协议</h3><h3 id="UDP-服务端"><a href="#UDP-服务端" class="headerlink" title="UDP 服务端"></a>UDP 服务端</h3><h3 id="UDP-客户端"><a href="#UDP-客户端" class="headerlink" title="UDP 客户端"></a>UDP 客户端</h3><p>304301980</p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>2 基本数据类型</title>
    <url>/p/2fa3346a.html</url>
    <content><![CDATA[<h2 id="2-基本数据类型"><a href="#2-基本数据类型" class="headerlink" title="2 基本数据类型"></a>2 基本数据类型</h2><p>整型、浮点型、布尔型、字符串</p>
<p>数组、切片、结构体、函数、map、通道等</p>
<h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p>分为两个大类：</p>
<ul>
<li><strong>长度</strong>：<code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code><ul>
<li><code>int16</code>: short类型</li>
<li><code>int64</code>: long 类型</li>
</ul>
</li>
<li><strong>无符号</strong>：<code>uint8</code>，<code>uint16</code>, <code>uint32</code>, <code>uint64</code><ul>
<li><code>uint8</code>: <code>byte</code>型</li>
</ul>
</li>
</ul>
<h4 id="2-1-1-特殊整型"><a href="#2-1-1-特殊整型" class="headerlink" title="2.1.1 特殊整型"></a>2.1.1 特殊整型</h4><ul>
<li>特殊整型<ul>
<li><code>uint</code>  : 32为操作系统上是<code>uint32</code></li>
<li><code>int</code> : 32位操作系统上是<code>int32</code></li>
<li><code>uintptr</code> : 无符号整型，用于存放一个指针</li>
</ul>
</li>
<li>注意：使用<code>int</code>和<code>uint</code>需要考虑不同平台的差异</li>
<li>注意：获取对象的长度的内建<code>len()</code>函数，返回的长度可以根据不同的平台的字节长度变化<ul>
<li>实际使用中，切片或map元素数量可以用<code>int</code>表示</li>
<li>涉及二进制传输、读写文件的结构描述时，不要使用<code>int</code>和<code>uint</code></li>
</ul>
</li>
</ul>
<h4 id="2-1-2-数字字面量语法-Number-literals-syntax"><a href="#2-1-2-数字字面量语法-Number-literals-syntax" class="headerlink" title="2.1.2 数字字面量语法(Number literals syntax)"></a>2.1.2 数字字面量语法(Number literals syntax)</h4><p>便于开发者<strong>以二进制、八进制、十六进制浮点数的格式</strong> <strong>定义</strong>数字</p>
<ul>
<li><code>v := 0b001</code>: 二进制的<code>001</code></li>
<li><code>v := 0o77</code>: 八进制的77</li>
<li><code>v := 0xff</code>: 十六进制的ff</li>
</ul>
<p>允许使用<code>_</code>分隔数字：<code>v := 12_3</code></p>
<p>允许开发者使用<strong>相应的占位符</strong>以二进制<code>%b</code>、八进制<code>%o</code>、十进制<code>%d</code>、十六进制<code>%x</code>输出：</p>
<ul>
<li>由以上两个性质，我们可以将任意进制数字 以任意进制形式输出</li>
</ul>
<p><strong>示例:</strong></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//定义</span></span><br><span class="line">    <span class="keyword">var</span> x <span class="keyword">int</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="keyword">int</span> = <span class="number">077</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="keyword">int</span> = <span class="number">0xff</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="keyword">var</span> a <span class="keyword">int</span> = <span class="number">15</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, a) <span class="comment">//以十进制形式输出</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%b\n&quot;</span>, a) <span class="comment">//以二进制形式输出</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%o\n&quot;</span>, a) <span class="comment">//以八进制形式输出</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%x\n&quot;</span>, a) <span class="comment">//以十六进制形式输出</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><p>两种浮点型：都遵循<code>IEEE 754</code>标准</p>
<ul>
<li><code>float32</code> : 最大范围<code>3.4e38</code>, 可使用常量定义：<code>math.MaxFloat32</code></li>
<li><code>float64</code>：最大范围<code>1.8e308</code> ,<code>math.MaxFloat64</code></li>
</ul>
<p>打印浮点数，使用占位符<code>%f</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%f\n&quot;</span>,math.Pi)</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%.2f\n&quot;</span>,math.Pi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h3><p>两种：都由 实部与虚部 组成各占一半</p>
<ul>
<li><code>complex64</code> : 实部未 32 位，虚部为 32 位</li>
<li><code>complex128</code></li>
</ul>
<p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c <span class="keyword">complex64</span> = <span class="number">1</span> + <span class="number">2i</span></span><br><span class="line">    fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><p><code>bool</code> 型两个值：<code>true</code> 、 <code>false</code></p>
<p>==注意：==</p>
<ul>
<li>默认值：<code>false</code></li>
<li><strong>不允许</strong>将整型强制转换为bool</li>
<li>bool 无法参与数值运算，无法与其他类型转换</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Go 中的字符串以原生数据类型出现</p>
<ul>
<li>注意：Go 语言的字符串内部实现使用<code>UTF-8</code>编码</li>
<li>字符串的值为 双引号 中的内容</li>
<li>可以在Go的源码中直接添加非<code>ASCII</code>码字符<ul>
<li><code>s1 := &quot;hello&quot;</code></li>
<li><code>s2 := &quot;你好&quot;</code></li>
</ul>
</li>
</ul>
<h4 id="字符串转义符"><a href="#字符串转义符" class="headerlink" title="字符串转义符"></a>字符串转义符</h4><table>
<thead>
<tr>
<th>转义符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>\r</td>
<td>回车符（返回行首</td>
</tr>
<tr>
<td>\n</td>
<td>换行符（直接跳到下一行的同列位置</td>
</tr>
<tr>
<td>\t</td>
<td>制表符</td>
</tr>
<tr>
<td><code>\&#39;</code></td>
<td>单引号</td>
</tr>
<tr>
<td><code>\&quot;</code></td>
<td>双引号</td>
</tr>
<tr>
<td><code>\\</code></td>
<td>反斜杠，例如文件路径</td>
</tr>
</tbody></table>
<h4 id="多行字符串"><a href="#多行字符串" class="headerlink" title="多行字符串"></a>多行字符串</h4><p>Go 定义一个多行字符串，必须使用反引号` 字符：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := <span class="string">`line1</span></span><br><span class="line"><span class="string">lin2</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">fmt.Println(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a>字符串常用操作</h4><table>
<thead>
<tr>
<th align="left">方法</th>
<th align="center">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">len(str)</td>
<td align="center">求长度</td>
</tr>
<tr>
<td align="left"><code>+</code> 或者 fmt.Sprintf</td>
<td align="center">拼接字符串</td>
</tr>
<tr>
<td align="left">strings.Split</td>
<td align="center">分割</td>
</tr>
<tr>
<td align="left">strings.contains</td>
<td align="center">判断是否包含</td>
</tr>
<tr>
<td align="left">strings.HasPrefix, strings.HasSuffix</td>
<td align="center">前缀/后缀判断</td>
</tr>
<tr>
<td align="left">strings.Index(), strings.LastIndex()</td>
<td align="center">字串出现的位置</td>
</tr>
<tr>
<td align="left">strings.Join(a[]stirng, sep string)</td>
<td align="center">join操作</td>
</tr>
</tbody></table>
<h3 id="byte-和-rune-类型"><a href="#byte-和-rune-类型" class="headerlink" title="byte 和 rune 类型"></a>byte 和 rune 类型</h3><p><strong>字符串的每个元素</strong>是 字符 ，字符用单引号包裹</p>
<p>可以通过 <strong>遍历</strong> 或 <strong>单个获取字符串元素</strong> 获得字符</p>
<p>Go 的字符 有<strong>两种</strong>：</p>
<ul>
<li><p><code>uint8</code>, 或叫<code>byte</code>型，代表<code>ASCII</code>码的一个字符</p>
</li>
<li><p><code>int32</code>, 或叫<code>rune</code>类型，代表一个<code>UTF-8</code>码的一个字符</p>
</li>
<li></li>
<li><p>处理中文、日文或者其他符合字符：用到<code>rune</code>类型，实际上是一个<code>int32</code></p>
</li>
<li><p>Go 使用特殊的 rune 类型处理 Unicode，让基于Unicode的文本处理更方便，也可以使用byte型进行默认字符串处理，性能和扩展性都有照顾：</p>
<ul>
<li><p>示例：</p>
</li>
<li><p>```Go<br>package main</p>
<p>import “fmt”</p>
<p>func main() {</p>
<pre><code>s := &quot;hello, 世界&quot;

//byte
for i := 0; i &lt; len(s); i++ &#123;
    fmt.Printf(&quot;%v %c\n&quot;, s[i], s[i])
&#125;

//rune
for _, r := range s &#123;
    fmt.Printf(&quot;%v %c\n&quot;, r, r)
&#125;
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 输出：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>104 h<br>101 e<br>108 l<br>108 l<br>111 o<br>44 ,<br>32<br>228 ä<br>184 ¸<br>150 <br>231 ç<br>149 <br>140 <br>104 h<br>101 e<br>108 l<br>108 l<br>111 o<br>44 ,<br>32<br>19990 世<br>30028 界</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* ==注意：==</span><br><span class="line"></span><br><span class="line">  * `UTF-8` 编码下 一个汉字，由三至四个字节组成，所以不能简单按照字节去遍历 一个包含汉子的字符串</span><br><span class="line">    * rune 用来表示`UTF-8`字符，一个rune 字符由一个或多个byte组成</span><br><span class="line">  * ==字符串底层==：一个`byte`数组，所以可以和`[]byte`类型相互转换</span><br><span class="line">  * 字符串是==不能 直接修改== 的</span><br><span class="line">  * ==字符串长度==：`byte`数组的长度</span><br><span class="line"></span><br><span class="line">* `for _,r := range s`</span><br><span class="line"></span><br><span class="line">  * </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 修改字符串</span><br><span class="line"></span><br><span class="line">* 需要将字符串转换成`[]rune`或`[]byte`</span><br><span class="line"></span><br><span class="line">  * 在转换成`string`</span><br><span class="line"></span><br><span class="line">* 转换，都会重新分配内存，并复制字节数组</span><br><span class="line"></span><br><span class="line">* 示例</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    package main</span><br><span class="line">    </span><br><span class="line">    import &quot;fmt&quot;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	s := &quot;hello world&quot;</span><br><span class="line">    </span><br><span class="line">    	//强制类型转换</span><br><span class="line">    	bytes := []byte(s)</span><br><span class="line">    	bytes[0] = &#x27;p&#x27;</span><br><span class="line">    	fmt.Println(string(bytes))</span><br><span class="line">    </span><br><span class="line">    	s2 := &quot;你好，世界&quot;</span><br><span class="line">    	runes2 := []rune(s2)</span><br><span class="line">    	runes2[0] = &#x27;我&#x27;</span><br><span class="line">    	fmt.Println(string(runes2))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ul>
<p>`</p>
</li>
</ul>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Go 中只有 强制类型转换，无 隐式类型转换</p>
<p>只在两个类型之间支持相互转换的时候使用</p>
<ul>
<li><p>语法：<code>T(expression)</code></p>
<ul>
<li>T: 要转换的的类型</li>
<li>表达式：包括变量、复杂算子、函数返回值等</li>
</ul>
</li>
<li><p>Sqrt 所接受的参数是<code>float64</code>类型</p>
</li>
<li><p>示例：</p>
<ul>
<li>```go<br>package mainimport (<pre><code>&quot;fmt&quot;
&quot;math&quot;
</code></pre>
)func main() {<pre><code>var a, b = 3, 4
var c int
c = int(math.Sqrt(float64(a*a + b*b)))
fmt.Println(c)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">### 练习题</span><br><span class="line"></span><br><span class="line">#### 练习一</span><br><span class="line"></span><br><span class="line">* 编写代码分别定义一个整型、浮点型、布尔型、字符串型变量，使用`fmt.Printf()`搭配`%T`分别打印出上述变量的值和类型</span><br><span class="line"></span><br><span class="line">* ```Go</span><br><span class="line">  package main</span><br><span class="line">  </span><br><span class="line">  import &quot;fmt&quot;</span><br><span class="line">  </span><br><span class="line">  func main() &#123;</span><br><span class="line">  	s := &quot;hello&quot;</span><br><span class="line">  	i := 10</span><br><span class="line">  	f := 3.14</span><br><span class="line">  	var b bool = true</span><br><span class="line">  	fmt.Printf(&quot;%s %T\n&quot;, s, s)</span><br><span class="line">  	fmt.Printf(&quot;%d %T\n&quot;, i, i)</span><br><span class="line">  	fmt.Printf(&quot;%f %T\n&quot;, f, f)	</span><br><span class="line">  	fmt.Printf(&quot;%t %T\n&quot;, b, b)	\\bool 的占位符：`%t`</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h4><ul>
<li><p>编写代码统计出字符串<code>&quot;hello沙河小王子&quot;</code>中汉字的数量。</p>
</li>
<li><pre><code class="go">package main

import &quot;fmt&quot;

func main() &#123;
    s := &quot;hello沙河小王子&quot;
    count := 0

    for _, i := range s &#123;            //range
        if len(string(i)) &gt; 1 &#123;        //
            count++
        &#125;
    &#125;
    fmt.Println(count)
&#125;
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>4 流程控制</title>
    <url>/p/9de48019.html</url>
    <content><![CDATA[<h2 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4 流程控制"></a>4 流程控制</h2><ul>
<li>流程控制是每种语言控制逻辑走向和执行次序的重要部分</li>
<li>Go 中有<code>if</code> 和 <code>for</code>, 而<code>switch</code> 和 <code>goto</code>主要是为了简化代码、降低重复代码而生，属于扩展类的流程控制</li>
</ul>
<h3 id="if-else分支结构"><a href="#if-else分支结构" class="headerlink" title="if else分支结构"></a>if else分支结构</h3><h4 id="if-条件判断的基本写法"><a href="#if-条件判断的基本写法" class="headerlink" title="if 条件判断的基本写法"></a>if 条件判断的基本写法</h4><ul>
<li><p>if 条件判断格式</p>
<ul>
<li>```go<br>if expr1{<pre><code>block1
</code></pre>
}else if expr2{<pre><code>block2
</code></pre>
}else {<pre><code>block3
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * ==注意：==Go 规定，`if`的**左括号**必须与`if expr`放于同一行；**右括号必须与下一个语句在同一行**</span><br><span class="line"></span><br><span class="line">#### if 条件判断特殊写法</span><br><span class="line"></span><br><span class="line">* 可以在 if 表达式前添加一个执行语句，再根据变量值判断</span><br><span class="line"></span><br><span class="line">  * 示例：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    package main</span><br><span class="line">    </span><br><span class="line">    import &quot;fmt&quot;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    </span><br><span class="line">    	if score := 65; score &gt;= 90 &#123;</span><br><span class="line">    		fmt.Println(&quot;A&quot;)</span><br><span class="line">    	&#125; else if score &gt; 75 &#123;</span><br><span class="line">    		fmt.Println(&quot;B&quot;)</span><br><span class="line">    	&#125; else &#123;</span><br><span class="line">    		fmt.Println(&quot;C&quot;)</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>思考：区别可能就是作用域不同</p>
</li>
</ul>
<h3 id="for-循环结构"><a href="#for-循环结构" class="headerlink" title="for 循环结构"></a>for 循环结构</h3><ul>
<li><p>Go 语言中的所有循环类型都可以使用关键字 <code>for</code> 完成</p>
</li>
<li><p>基本格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for 初始语句; 循环条件表达式; 结束语句&#123;</span><br><span class="line">	循环体</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li><p>当<code>循环条件表达式</code> 为<code>true</code> 时进行循环，直到为<code>false</code></p>
</li>
<li><p>for 循环的 <code>初始语句</code> 可以被省略，但是<strong>分号必须要写</strong></p>
<ul>
<li><code>for ;i&lt;10;i++</code></li>
</ul>
</li>
<li><p>for 循环的初始语句和结束语句都可以被省略, 此时不需要分号</p>
<ul>
<li>类似于C中的关键词<code>while</code></li>
<li><code>for i&lt;10 </code></li>
</ul>
</li>
</ul>
<h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><ul>
<li><p>```<br>for {</p>
<pre><code>循环体
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 可以通过关键字`break` `goto` `return`  `panic`强制退出循环</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### for range 键值循环</span><br><span class="line"></span><br><span class="line">* 可以使用 `for range` 遍历 数组、切片、字符串、map以及通道</span><br><span class="line">  * 数组、切片、字符串 返回 `索引`和`值`</span><br><span class="line">  * map 返回`键`和`值`</span><br><span class="line">  * 通道 只返回`通道内的值`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### switch case</span><br><span class="line"></span><br><span class="line">* 对大量值进行条件判断</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    i := 1</span><br><span class="line">    switch(i)&#123;</span><br><span class="line">    	case 1:</span><br><span class="line">    		block1</span><br><span class="line">    	case 2:</span><br><span class="line">    		block2</span><br><span class="line">    	default :</span><br><span class="line">    		block3</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Go 规定，只能有一个<code>default</code>分支</p>
</li>
<li><p>一个分支可以有多个值，多个case值使用逗号分开</p>
</li>
<li><p><code>case 1, 3, 5:</code></p>
</li>
<li><p>分支可以使用表达式判断：</p>
<ul>
<li><code>case age&lt;25:</code></li>
</ul>
</li>
<li><p><code>fallthrough</code>语法可以执行满足条件的 case 的下一个 case，为了兼容 C 中的case</p>
<ul>
<li>```go<br>func switchDemo5() {<pre><code> s := &quot;a&quot;
 switch &#123;
 case s == &quot;a&quot;:
     fmt.Println(&quot;a&quot;)
     fallthrough
 case s == &quot;b&quot;:
     fmt.Println(&quot;b&quot;)
 case s == &quot;c&quot;:
     fmt.Println(&quot;c&quot;)
 default:
     fmt.Println(&quot;...&quot;)
 &#125;
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  a</span><br><span class="line">  b</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="goto-跳转到指定标签"><a href="#goto-跳转到指定标签" class="headerlink" title="goto 跳转到指定标签"></a>goto 跳转到指定标签</h3><ul>
<li><code>goto</code>通过标签进行代码间的无条件跳转</li>
<li>可以在快速跳出循环、避免重复退出上有一定的帮助<br>* </li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gotoDemo2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> j == <span class="number">2</span> &#123;</span><br><span class="line">				<span class="comment">// 设置退出标签</span></span><br><span class="line">				<span class="keyword">goto</span> breakTag</span><br><span class="line">			&#125;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%v-%v\n&quot;</span>, i, j)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">	<span class="comment">// 标签</span></span><br><span class="line">breakTag:</span><br><span class="line">	fmt.Println(<span class="string">&quot;结束for循环&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="break-跳出循环"><a href="#break-跳出循环" class="headerlink" title="break 跳出循环"></a>break 跳出循环</h3><ul>
<li><p>结束<code>for</code>、<code>switch</code>、<code>select</code> 的代码块</p>
</li>
<li><p>可以在<code>break</code>语句后面添加标签：退出某个标签对应的代码块</p>
<ul>
<li><p>标签必须定义在对应的<code>for</code>、<code>switch</code>、<code>select</code> 的代码块上</p>
<ul>
<li>```go<br>func breakDemo1() {<br>BREAKDEMO1:<pre><code>for i := 0; i &lt; 10; i++ &#123;
    for j := 0; j &lt; 10; j++ &#123;
        if j == 2 &#123;
            break BREAKDEMO1
        &#125;
        fmt.Printf(&quot;%v-%v\n&quot;, i, j)
    &#125;
&#125;
fmt.Println(&quot;...&quot;)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">### continue 继续下次循环</span><br><span class="line"></span><br><span class="line">* continue 语句: 结束当前循环，开始下一次循环，仅限在`for`循环内使用</span><br><span class="line"></span><br><span class="line">* 在`continue` 语句后添加标签时，表示开始标签对应的循环</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func continueDemo() &#123;</span><br><span class="line">    forloop1:</span><br><span class="line">    	for i := 0; i &lt; 5; i++ &#123;</span><br><span class="line">    		// forloop2:</span><br><span class="line">    		for j := 0; j &lt; 5; j++ &#123;</span><br><span class="line">    			if i == 2 &amp;&amp; j == 2 &#123;</span><br><span class="line">    				continue forloop1</span><br><span class="line">    			&#125;</span><br><span class="line">    			fmt.Printf(&quot;%v-%v\n&quot;, i, j)</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><ul>
<li><p>编写代码打印 99 乘法表</p>
<ul>
<li><pre><code class="go">package main

import &quot;fmt&quot;

func main() &#123;
    for i := 1; i &lt;= 10; i++ &#123;
        for j := 1; j &lt;= 10; j++ &#123;
            fmt.Printf(&quot;%d * %d = %d &quot;, i, j, i*j)
        &#125;
        fmt.Println()
    &#125;
&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>5 Array</title>
    <url>/p/c6746613.html</url>
    <content><![CDATA[<h2 id="5-Array-数组"><a href="#5-Array-数组" class="headerlink" title="5 Array 数组"></a>5 Array 数组</h2><ul>
<li>同一种数据类型的集合</li>
<li>Go 中，数组从声明时就确定，使用时可以修改数组成员，但是<strong>数组大小不可变</strong><ul>
<li>语法：<code>var a [3]int</code></li>
</ul>
</li>
</ul>
<h3 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h3><ul>
<li><code>var name [size]T</code><ul>
<li>size 必须是常量</li>
<li>长度是数组类型的一部分，定义后不可变</li>
<li>不同长度，不可相互赋值</li>
</ul>
</li>
<li>数组可以使用下标访问，<code>0 - size-1</code></li>
<li>若越界，会触发访问越界，panic</li>
</ul>
<h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><ul>
<li><p>可以使用 初始化列表 设置数组元素的值</p>
<ul>
<li>```go<br>var a [3]int                        //数组元素初始化为int类型的0<br>var b = [3]int{1,2}                    //使用指定的初始值完成成初始化<br>var c = [3]string{“北京”,”上海”}     //指定的值完成初始化<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">#### 方法二</span><br><span class="line"></span><br><span class="line">* 我们可以让编译器根据初始值的个数自行推断长度</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    var a = [...]int&#123;1,2&#125;</span><br><span class="line">    var b = [...]string&#123;&quot;ss&quot;&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><ul>
<li>使用指定索引值的方式，初始化数组<br>* </li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>:<span class="number">1</span>, <span class="number">3</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="comment">//[0 1 0 5]</span></span><br><span class="line"><span class="comment">//type : [4]int</span></span><br></pre></td></tr></table></figure>



<h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><p>两种方法</p>
<ul>
<li><p>for循环</p>
<ul>
<li>```go<br>a := […]string{“x”, “y”}<br>for i:=0; i&lt;len(a); i++{<pre><code>fmt.Println(a[i])
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* for range键值循环</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    a := [...]string&#123;&quot;x&quot;, &quot;y&quot;&#125;</span><br><span class="line">    for index, value := range a&#123;</span><br><span class="line">        fmt.Println(index,value)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><ul>
<li>Go 支持多维数组，数组中嵌套数组</li>
</ul>
<h4 id="二维数组的定义"><a href="#二维数组的定义" class="headerlink" title="二维数组的定义"></a>二维数组的定义</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := [<span class="number">3</span>][<span class="number">2</span>]<span class="keyword">string</span>&#123;</span><br><span class="line">	&#123;<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;z&quot;</span>, <span class="string">&quot;j&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(a[<span class="number">2</span>][<span class="number">1</span>]) <span class="comment">//支持索引取值</span></span><br></pre></td></tr></table></figure>



<h4 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历"></a>二维数组的遍历</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> _, i := <span class="keyword">range</span> a&#123;</span><br><span class="line">    <span class="keyword">for</span> _, j := <span class="keyword">range</span> i&#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;%s\t\n&quot;</span>,j)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>==注意==：多维数组只有第一层可以使用<code>...</code> 来让编译器推导数组的长度</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := [...][<span class="number">2</span>]&#123;</span><br><span class="line">    &#123;<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;z&quot;</span>, <span class="string">&quot;j&quot;</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="数组是值类型"><a href="#数组是值类型" class="headerlink" title="数组是值类型"></a>数组是值类型</h3><ul>
<li>数组的<strong>赋值和传参</strong>会 <strong>复制整个数组</strong>，改变副本的值不会影响到本身</li>
<li>==注意：==<ul>
<li>数组支持<code>==</code> <code>!=</code>操作符，因为<strong>内存总是被初始化过的</strong></li>
<li><code>[n]*T</code>表示<strong>指针数组</strong>，<code>*[n]T</code>表示<strong>数组指针</strong></li>
</ul>
</li>
</ul>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><h4 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h4><ul>
<li>求数组<code>[1, 3, 5, 7, 8]</code>所有元素的和</li>
</ul>
<h4 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h4><ul>
<li><p>找出数组中和为指定值的两个元素的下标，比如从数组<code>[1, 3, 5, 7, 8]</code>中找出和为8的两个元素的下标分别为<code>(0,3)</code>和<code>(1,2)</code>。</p>
</li>
<li><pre><code class="go">package main

import &quot;fmt&quot;

func main() &#123;

    a := [...]int&#123;1, 3, 5, 7, 8&#125;
    for i := 0; i &lt; len(a); i++ &#123;
        for j := i + 1; j &lt; len(a); j++ &#123;
            if a[i]+a[j] == 8 &#123;
                fmt.Printf(&quot;%d %d\n&quot;, i, j)
            &#125;
        &#125;

    &#125;
&#125;
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>6 切片</title>
    <url>/p/6b9cb04b.html</url>
    <content><![CDATA[<h2 id="6-切片"><a href="#6-切片" class="headerlink" title="6 切片"></a>6 切片</h2><ul>
<li><p>数组长度是固定的，数组的长度也属于类型的一部分，有许多局限性</p>
<ul>
<li>例如，函数传参时只能支持一种数组类型</li>
<li>例如，不能再继续向数组中添加元素</li>
</ul>
</li>
<li><p><code>Slice</code> 是一个拥有<strong>相同类型元素的可变长度序列</strong></p>
<ul>
<li>是基于数组类型做的一层封装</li>
<li>十分灵活，支持自动扩容</li>
</ul>
</li>
<li><p>切片是一个 <strong>引用类型</strong>,不支持直接比较，只能和<code>nil</code>比较</p>
<ul>
<li>内部结构包含 <code>地址</code>、<code>长度</code>、<code>容量</code></li>
</ul>
</li>
<li><p>一般用于<strong>快速的</strong>操作<strong>一块数据集合</strong></p>
</li>
</ul>
<h3 id="切片的定义"><a href="#切片的定义" class="headerlink" title="切片的定义"></a>切片的定义</h3><ul>
<li><p>基本语法：<code>var name []T</code></p>
<ul>
<li>name : 变量名</li>
<li>T : 切片中的元素类型</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li>```<br>var a []string<br>var b = []int{}<br>var c = []bool{false, true}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">#### 切片的长度和容量</span><br><span class="line"></span><br><span class="line">* 切片拥有自己的长度和容量：</span><br><span class="line">  * `len()` 求长度</span><br><span class="line">  * `cap()` 求容量</span><br><span class="line"></span><br><span class="line">#### 切片的表达式</span><br><span class="line"></span><br><span class="line">* 切片表达式 从`字符串、数组、指向数组或切片的指针` 构造 子字符串或切片</span><br><span class="line">* 两种变体</span><br><span class="line">  * 指定`low`和`high`两个索引界限值的简单形式</span><br><span class="line">  * 除了`low`和`high`索引界限值外，还指定容量 的完整形式</span><br><span class="line"></span><br><span class="line">##### 简单切片表达式</span><br><span class="line"></span><br><span class="line">* 切片的底层就是一个数组</span><br><span class="line"></span><br><span class="line">* 可以**基于 数组** 通过切片表达式得到切片</span><br><span class="line"></span><br><span class="line">* `[low , high)`: 左包含，右不包含</span><br><span class="line"></span><br><span class="line">  * 得到的**切片长度** `high - low`</span><br><span class="line"></span><br><span class="line">  * 得到的**切片容量是** 操作数数组下标从`low` 到最后一个元素所组成的数组的长度</span><br><span class="line"></span><br><span class="line">  * 示例：</span><br><span class="line"></span><br><span class="line">    * ```go</span><br><span class="line">      a := [5]int&#123;1,2,3,4,5&#125;</span><br><span class="line">      s := a[1:3]  </span><br><span class="line">      fmt.Pritf(&quot;s:%v len(s):%v cap(s): %v&quot;,s,len(s),cap(s))</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>切片表达式中的任何索引可以省略：</p>
<ul>
<li><code>low</code>默认为 <strong>0</strong></li>
<li><code>high</code>默认为 <strong>切片操作数的长度</strong></li>
<li><code>a[2:] </code> : <code>high</code> = len(a)</li>
<li><code>a[:3]</code>: <code>low</code> = 0</li>
<li><code>a[:]</code> low = 0, high = len(a)</li>
</ul>
</li>
<li><p>==注意：==</p>
<ul>
<li>对于数组和字符串：若<code>0&lt;=low&lt;=high&lt;=len(a)</code> 则索引合法，否则<strong>索引越界</strong>，运行时会<code>panic</code></li>
<li>对 切片 再执行切片表达式(切片在切片时)，<ul>
<li><code>high</code> 的上限是 切片的容量<code>cap(s)</code>，而非长度<code>len(s)</code></li>
</ul>
</li>
<li><strong>常量索引</strong>必须是非负，int类型</li>
</ul>
</li>
<li></li>
</ul>
<h5 id="完整切片表达式"><a href="#完整切片表达式" class="headerlink" title="完整切片表达式"></a>完整切片表达式</h5><ul>
<li><em>数组，指向数组的指针，或切片</em> 支持完整切片表达式<ul>
<li>注意，<strong>字符串不支持</strong></li>
</ul>
</li>
<li>格式 <code>a[low : high : max]</code></li>
<li>构造与简单切片表达式<code>a[low,high]</code> <ul>
<li>相同类型、相同长度、相同元素</li>
<li>将切片的容量设置为<code>max-low</code> </li>
</ul>
</li>
<li>在完整切片表达式中，只有第一个索引值<code>low</code>可以省略，默认为 0<ul>
<li>示例</li>
<li></li>
</ul>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a := [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;</span><br><span class="line">t := a[<span class="number">1</span>:<span class="number">3</span>:<span class="number">5</span>]</span><br><span class="line"><span class="comment">//t: [2 3] len(t):2 cap(t):4</span></span><br></pre></td></tr></table></figure>

<ul>
<li>完整切片表达式 需满足<ul>
<li><code>0 &lt;= low &lt;= high &lt;= max &lt;= cap(a)</code></li>
</ul>
</li>
</ul>
<h4 id="使用-make-函数构造切片"><a href="#使用-make-函数构造切片" class="headerlink" title="使用 make() 函数构造切片"></a>使用 make() 函数构造切片</h4><ul>
<li><p>除了基于数组构造切片，还可以动态创建切片</p>
</li>
<li><p>make 格式：<code>make ([]T, size, cap)</code></p>
<ul>
<li><code>T</code> : 切片内元素类型</li>
<li><code>size</code> ：切片中元素数量</li>
<li><code>cap</code> ：切片容量</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li><p>```go<br>a := make([]int, 2, 10)<br>//a: [0 0] len(a):2 cap(a): 10</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * a切片的内部存储空间分配了10，实际上只用了2个</span><br><span class="line"></span><br><span class="line">  * 容量不会影响当前元素的个数</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 切片的本质</span><br><span class="line"></span><br><span class="line">* **本质：**对底层数组的封装，包含三个信息</span><br><span class="line"></span><br><span class="line">  * 底层数组的指针</span><br><span class="line">  * 切片的长度</span><br><span class="line">  * 切片的容量</span><br><span class="line"></span><br><span class="line">* 例如</span><br><span class="line"></span><br><span class="line">  ```go</span><br><span class="line">  a := [8]int&#123;0,1,2,3,4,5,6,7&#125;</span><br><span class="line">  s1 := a[:5]</span><br></pre></td></tr></table></figure></li>
<li><p><img src="E:\LearningNotes\Go\GoLearning.assets\slice_01.png" alt="slice_01"></p>
</li>
<li><p>切片<code>s2 := a[3:6]</code></p>
<ul>
<li><img src="E:\LearningNotes\Go\GoLearning.assets\slice_02.png" alt="slice_02"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="判断切片是否为空"><a href="#判断切片是否为空" class="headerlink" title="判断切片是否为空"></a>判断切片是否为空</h4><ul>
<li>最好使用切片的长度 <code>len(s)==0</code> 来判断</li>
</ul>
<h3 id="切片不能直接比较"><a href="#切片不能直接比较" class="headerlink" title="切片不能直接比较"></a>切片不能直接比较</h3><ul>
<li><p>不能使用 <code>==</code> 操作符判断切片是否全部元素相等</p>
</li>
<li><p>切片唯一合法的比较操作：和<code>nil</code>比较</p>
</li>
<li><p>一个<code>nil</code>值的切片，没有底层数组</p>
<ul>
<li>切片长度和容量都是 0</li>
</ul>
</li>
<li><p>但是一个长度和容量都是0的切片不一定是<code>nil</code></p>
<ul>
<li><p>示例</p>
</li>
<li><p>```go<br>var s1 []int         //len(s1)=0;cap(s1)=0;s1==nil<br>s2 := []int{}        //len(s2)=0;cap(s2)=0;s2!=nil<br>s3 := make([]int, 0) //len(s3)=0;cap(s3)=0;s3!=nil</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">* 因此判断切片是否为空主要用`len(s)==0`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 切片的赋值拷贝</span><br><span class="line"></span><br><span class="line">* 一个切片 **拷贝赋值** 另一个切片，两个切片会共享底层数组，因此对一个切片的修改会影响另一个切片</span><br><span class="line"></span><br><span class="line">  * 示例</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    	s1 := make([]int, 3) //[0 0 0]</span><br><span class="line">    	s2 := s1             //将s1直接赋值给s2，s1和s2共用一个底层数组</span><br><span class="line">    	s2[0] = 100</span><br><span class="line">    	fmt.Println(s1) //[100 0 0]</span><br><span class="line">    	fmt.Println(s2) //[100 0 0]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="切片遍历"><a href="#切片遍历" class="headerlink" title="切片遍历"></a>切片遍历</h3><ul>
<li>支持下标索引遍历和<code>for range</code>键值遍历</li>
</ul>
<h3 id="append-方法为切片添加元素"><a href="#append-方法为切片添加元素" class="headerlink" title="append() 方法为切片添加元素"></a>append() 方法为切片添加元素</h3><ul>
<li><p>Go 中的内置函数<code>append()</code> 可以为切片动态添加元素</p>
<ul>
<li>添加一个：<code>s = append(s,1)</code></li>
<li>添加多个：<code>s = append(s,1,2,3)</code></li>
<li>添加另一个切片中的元素 ：<code>s = append(s, s2...)</code></li>
</ul>
</li>
<li><p>==注意：==通过<strong>var声明</strong>的 <code>零值切片</code> 可以在<code>append()</code> 直接使用，无需初始化</p>
<ul>
<li><p>```go<br>var s []int   //声明后直接使用<br>s = append(s,1,2)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 每个切片指向一个**底层数组**，</span><br><span class="line"></span><br><span class="line">  * 这个数组的**容量够用**就直接在该数组新增元素</span><br><span class="line">  * 当**容量不够用**时，切片**按照一定的规则进行扩容**。此时该切片指向的**底层数组会更换**</span><br><span class="line">  * **扩容操作**发生在`append`时，因此需要用原变量接收函数返回值</span><br><span class="line"></span><br><span class="line">* `append`:</span><br><span class="line"></span><br><span class="line">  * 将元素追加到切片的最后并返回该切片</span><br><span class="line">  * 切片扩容的规则都是扩容前的两倍</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 切片的扩容策略</span><br><span class="line"></span><br><span class="line">* 查看源码：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    newcap := old.cap</span><br><span class="line">    doublecap := newcap + newcap</span><br><span class="line">    if cap &gt; doublecap &#123;</span><br><span class="line">    	newcap = cap</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    	if old.len &lt; 1024 &#123;</span><br><span class="line">    		newcap = doublecap</span><br><span class="line">    	&#125; else &#123;</span><br><span class="line">    		// Check 0 &lt; newcap to detect overflow</span><br><span class="line">    		// and prevent an infinite loop.</span><br><span class="line">    		for 0 &lt; newcap &amp;&amp; newcap &lt; cap &#123;</span><br><span class="line">    			newcap += newcap / 4</span><br><span class="line">    		&#125;</span><br><span class="line">    		// Set newcap to the requested cap when</span><br><span class="line">    		// the newcap calculation overflowed.</span><br><span class="line">    		if newcap &lt;= 0 &#123;</span><br><span class="line">    			newcap = cap</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>首先判断，若新申请(cap)大于两倍的旧容量(old.cap)，最终容量(newcap)就是新申请的容量</p>
</li>
<li><p>否则判断，若旧切片的长度小于1024，最终容量就是旧容量的两倍，</p>
</li>
<li><p>否则判断，若旧切片的长度大于等于1024，最终容量从旧容量开始循增加原来的1/4，直到最终容量大于等于新申请的容量</p>
</li>
<li><p>如果最终容量计算值溢出，则最终容量就是新申请的容量</p>
</li>
</ol>
</li>
</ul>
</li>
<li><p>注意：切片扩容会根据切片中元素类型的不同而作不同处理</p>
</li>
</ul>
<h3 id="使用-copy-函数复制切片"><a href="#使用-copy-函数复制切片" class="headerlink" title="使用 copy() 函数复制切片"></a>使用 copy() 函数复制切片</h3><ul>
<li><p>由于切片是引用类型，拷贝赋值时，两个切片都指向同一块内存地址</p>
<ul>
<li><p>示例</p>
</li>
<li><p>```go</p>
<pre><code>a := []int&#123;1, 2, 3, 4, 5&#125;
b := a
fmt.Println(a) //[1 2 3 4 5]
fmt.Println(b) //[1 2 3 4 5]
b[0] = 1000
fmt.Println(a) //[1000 2 3 4 5]
fmt.Println(b) //[1000 2 3 4 5]
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">* 可以使用内置函数`copy()`迅速地将一个切片的数据复制到另外一个切片空间中，</span><br><span class="line"></span><br><span class="line">  * `copy(destSlice, srcSlice []T)`</span><br><span class="line"></span><br><span class="line">    * srcSlice：数据来源切片</span><br><span class="line">    * dextSlice:目标切片</span><br><span class="line"></span><br><span class="line">  * 示例：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    	a := []int&#123;1, 2, 3, 4, 5&#125;</span><br><span class="line">    	c := make([]int, 5, 5)</span><br><span class="line">    	copy(c, a)     //使用copy()函数将切片a中的元素复制到切片c</span><br><span class="line">    	fmt.Println(a) //[1 2 3 4 5]</span><br><span class="line">    	fmt.Println(c) //[1 2 3 4 5]</span><br><span class="line">    	c[0] = 1000</span><br><span class="line">    	fmt.Println(a) //[1 2 3 4 5]</span><br><span class="line">    	fmt.Println(c) //[1000 2 3 4 5]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="从切片中删除元素"><a href="#从切片中删除元素" class="headerlink" title="从切片中删除元素"></a>从切片中删除元素</h3><ul>
<li><p>Go 中无删除切片元素的专用方法，需要使用切片本身特性：</p>
<ul>
<li><p>若要删除下表为<code>index</code>: <code>s = append(s[:index],s[index+1:]...)</code></p>
</li>
<li><p>```go<br>func main() {</p>
<pre><code>// 从切片中删除元素
a := []int&#123;30, 31, 32, 33, 34, 35, 36, 37&#125;
// 要删除索引为2的元素
a = append(a[:2], a[3:]...)
fmt.Println(a) //[30 31 33 34 35 36 37]
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 练习题</span><br><span class="line"></span><br><span class="line">#### 练习一</span><br><span class="line"></span><br><span class="line">请写出下面代码的输出结果。</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">func main() &#123;</span><br><span class="line">    var a = make([]string, 5, 10)//a : [0 0 0 0 0 0 0 0 0 0 ],len 5, cap 10</span><br><span class="line">	for i := 0; i &lt; 10; i++ &#123;</span><br><span class="line">		a = append(a, fmt.Sprintf(&quot;%v&quot;, i)) //[0 0 0 0 0 &quot;0&quot; &quot;1&quot; ...&quot;9&quot;]</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>直接分析：[0 0 0 0 0 “0” “1” …”9”]</p>
</li>
<li><p>run ：<code>[   0 1 2 3 4 5 6 7 8 9]</code></p>
<ul>
<li>前面五个空字符串</li>
</ul>
</li>
</ul>
<h4 id="练习二"><a href="#练习二" class="headerlink" title="练习二"></a>练习二</h4><p>请使用内置的<code>sort</code>包对数组<code>var a = [...]int&#123;3, 7, 8, 9, 1&#125;</code>进行排序（附加题，自行查资料解答）。</p>
<ul>
<li><p><code>sort</code> 包主要针对[]int., []float64,[]string 以及其他自定义切片的排序</p>
<ul>
<li><p>内部实现了：插入排序、归并排序、堆排序、快速排序</p>
</li>
<li><p>sort 会依据实际数据自动选择最优的排序方法</p>
</li>
<li><p>我们只需要考虑实现 <code>sort.Interface</code>类型</p>
<ul>
<li>```go<br>type Interface interface {<pre><code>Len() int           // Len方法返回集合中的元素个数
Less(i, j int) bool // i&gt;j，该方法返回索引i的元素是否比索引j的元素小、
Swap(i, j int)      // 交换i, j的值
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 例如：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    package main</span><br><span class="line">     </span><br><span class="line">    import (</span><br><span class="line">        &quot;fmt&quot;</span><br><span class="line">        &quot;sort&quot;</span><br><span class="line">    )</span><br><span class="line">     </span><br><span class="line">    type IntSlice []int</span><br><span class="line">     </span><br><span class="line">    func (s IntSlice) Len() int &#123; </span><br><span class="line">        return len(s) </span><br><span class="line">    &#125;</span><br><span class="line">    func (s IntSlice) Swap(i, j int)&#123;</span><br><span class="line">        s[i], s[j] = s[j], s[i] </span><br><span class="line">    &#125;</span><br><span class="line">    func (s IntSlice) Less(i, j int) bool &#123;</span><br><span class="line">        return s[i] &lt; s[j] </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    func main() &#123;</span><br><span class="line">        a := []int&#123;4,3,2,1,5,9,8,7,6&#125;</span><br><span class="line">        sort.Sort(IntSlice(a))</span><br><span class="line">        fmt.Println(&quot;After sorted: &quot;, a)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>3 运算符</title>
    <url>/p/81c9ee28.html</url>
    <content><![CDATA[<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p>Go 内置运算符：</p>
<ul>
<li>算术运算符</li>
<li>关系运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>赋值运算符</li>
</ul>
<h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>相加</td>
</tr>
<tr>
<td>-</td>
<td>相减</td>
</tr>
<tr>
<td>*</td>
<td>相乘</td>
</tr>
<tr>
<td>/</td>
<td>相除</td>
</tr>
<tr>
<td>%</td>
<td>求余</td>
</tr>
</tbody></table>
<p>注意：<code>++</code>和<code>--</code>是Go中单独的语句，而非运算符</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>是否相等</td>
</tr>
<tr>
<td>！=</td>
<td>是否不相等</td>
</tr>
<tr>
<td>&gt;</td>
<td>左边值是否大于右边值</td>
</tr>
<tr>
<td>&gt;=</td>
<td>左边值是否大于等于右边值</td>
</tr>
<tr>
<td>&lt;</td>
<td>左边值是否小于右边值</td>
</tr>
<tr>
<td>&lt;=</td>
<td>左边值是否小于等于右边值</td>
</tr>
</tbody></table>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>
<thead>
<tr>
<th align="left">运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">&amp;&amp;</td>
<td>逻辑AND运算符</td>
</tr>
<tr>
<td align="left">||</td>
<td>逻辑OR运算符</td>
</tr>
<tr>
<td align="left">！</td>
<td>逻辑NOT运算符</td>
</tr>
</tbody></table>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul>
<li>位运算符 <strong>对整数在内存中的二进制位</strong> 进行操作</li>
</ul>
<table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>参与运算的两数各对应的二进制位 相与（两位均为1 才为1）</td>
</tr>
<tr>
<td>|</td>
<td>参与运算的两数各对应的二进制位 相或（两位有一个为1 就为1）</td>
</tr>
<tr>
<td>^</td>
<td>参与运算的两数各对应的二进制位 相异或（两位相异 则为1）</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移n位，即乘以<code>2^n</code></td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移n位，即除以<code>2^n</code></td>
</tr>
</tbody></table>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>将表达式的值赋给一个左值</td>
</tr>
<tr>
<td>+=</td>
<td>相加后在赋值</td>
</tr>
<tr>
<td>-=</td>
<td></td>
</tr>
<tr>
<td>*=</td>
<td></td>
</tr>
<tr>
<td>/=</td>
<td></td>
</tr>
<tr>
<td>%=</td>
<td></td>
</tr>
<tr>
<td>&lt;&lt;=</td>
<td>左移后赋值</td>
</tr>
<tr>
<td>&gt;&gt;=</td>
<td>右移后赋值</td>
</tr>
<tr>
<td>&amp;=</td>
<td>按位与后赋值</td>
</tr>
<tr>
<td>|=</td>
<td>按位或后赋值</td>
</tr>
<tr>
<td>^=</td>
<td>按位异或后赋值</td>
</tr>
</tbody></table>
<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><ul>
<li><p>有一堆数字，如果除了一个数字以外，其他数字都出现了两次，那么如何找到出现一次的数字？</p>
</li>
<li><p>目前能想到的是暴力遍历：<br>* </p>
</li>
</ul>
<h2 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4 流程控制"></a>4 流程控制</h2><ul>
<li>流程控制是每种语言控制逻辑走向和执行次序的重要部分</li>
<li>Go 中有<code>if</code> 和 <code>for</code>, 而<code>switch</code> 和 <code>goto</code>主要是为了简化代码、降低重复代码而生，属于扩展类的流程控制</li>
</ul>
<h3 id="if-else分支结构"><a href="#if-else分支结构" class="headerlink" title="if else分支结构"></a>if else分支结构</h3><h4 id="if-条件判断的基本写法"><a href="#if-条件判断的基本写法" class="headerlink" title="if 条件判断的基本写法"></a>if 条件判断的基本写法</h4><ul>
<li><p>if 条件判断格式</p>
<ul>
<li>```go<br>if expr1{<pre><code>block1
</code></pre>
}else if expr2{<pre><code>block2
</code></pre>
}else {<pre><code>block3
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * ==注意：==Go 规定，`if`的**左括号**必须与`if expr`放于同一行；**右括号必须与下一个语句在同一行**</span><br><span class="line"></span><br><span class="line">#### if 条件判断特殊写法</span><br><span class="line"></span><br><span class="line">* 可以在 if 表达式前添加一个执行语句，再根据变量值判断</span><br><span class="line"></span><br><span class="line">  * 示例：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    package main</span><br><span class="line">    </span><br><span class="line">    import &quot;fmt&quot;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    </span><br><span class="line">    	if score := 65; score &gt;= 90 &#123;</span><br><span class="line">    		fmt.Println(&quot;A&quot;)</span><br><span class="line">    	&#125; else if score &gt; 75 &#123;</span><br><span class="line">    		fmt.Println(&quot;B&quot;)</span><br><span class="line">    	&#125; else &#123;</span><br><span class="line">    		fmt.Println(&quot;C&quot;)</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>思考：区别可能就是作用域不同</p>
</li>
</ul>
<h3 id="for-循环结构"><a href="#for-循环结构" class="headerlink" title="for 循环结构"></a>for 循环结构</h3><ul>
<li><p>Go 语言中的所有循环类型都可以使用关键字 <code>for</code> 完成</p>
</li>
<li><p>基本格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for 初始语句; 循环条件表达式; 结束语句&#123;</span><br><span class="line">	循环体</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li>
<li><p>当<code>循环条件表达式</code> 为<code>true</code> 时进行循环，直到为<code>false</code></p>
</li>
<li><p>for 循环的 <code>初始语句</code> 可以被省略，但是<strong>分号必须要写</strong></p>
<ul>
<li><code>for ;i&lt;10;i++</code></li>
</ul>
</li>
<li><p>for 循环的初始语句和结束语句都可以被省略, 此时不需要分号</p>
<ul>
<li>类似于C中的关键词<code>while</code></li>
<li><code>for i&lt;10 </code></li>
</ul>
</li>
</ul>
<h4 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h4><ul>
<li><p>```<br>for {</p>
<pre><code>循环体
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 可以通过关键字`break` `goto` `return`  `panic`强制退出循环</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### for range 键值循环</span><br><span class="line"></span><br><span class="line">* 可以使用 `for range` 遍历 数组、切片、字符串、map以及通道</span><br><span class="line">  * 数组、切片、字符串 返回 `索引`和`值`</span><br><span class="line">  * map 返回`键`和`值`</span><br><span class="line">  * 通道 只返回`通道内的值`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### switch case</span><br><span class="line"></span><br><span class="line">* 对大量值进行条件判断</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    i := 1</span><br><span class="line">    switch(i)&#123;</span><br><span class="line">    	case 1:</span><br><span class="line">    		block1</span><br><span class="line">    	case 2:</span><br><span class="line">    		block2</span><br><span class="line">    	default :</span><br><span class="line">    		block3</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
<li><p>Go 规定，只能有一个<code>default</code>分支</p>
</li>
<li><p>一个分支可以有多个值，多个case值使用逗号分开</p>
</li>
<li><p><code>case 1, 3, 5:</code></p>
</li>
<li><p>分支可以使用表达式判断：</p>
<ul>
<li><code>case age&lt;25:</code></li>
</ul>
</li>
<li><p><code>fallthrough</code>语法可以执行满足条件的 case 的下一个 case，为了兼容 C 中的case</p>
<ul>
<li>```go<br>func switchDemo5() {<pre><code> s := &quot;a&quot;
 switch &#123;
 case s == &quot;a&quot;:
     fmt.Println(&quot;a&quot;)
     fallthrough
 case s == &quot;b&quot;:
     fmt.Println(&quot;b&quot;)
 case s == &quot;c&quot;:
     fmt.Println(&quot;c&quot;)
 default:
     fmt.Println(&quot;...&quot;)
 &#125;
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* ```</span><br><span class="line">  a</span><br><span class="line">  b</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="goto-跳转到指定标签"><a href="#goto-跳转到指定标签" class="headerlink" title="goto 跳转到指定标签"></a>goto 跳转到指定标签</h3><ul>
<li><code>goto</code>通过标签进行代码间的无条件跳转</li>
<li>可以在快速跳出循环、避免重复退出上有一定的帮助<br>* </li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">gotoDemo2</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">for</span> j := <span class="number">0</span>; j &lt; <span class="number">10</span>; j++ &#123;</span><br><span class="line">			<span class="keyword">if</span> j == <span class="number">2</span> &#123;</span><br><span class="line">				<span class="comment">// 设置退出标签</span></span><br><span class="line">				<span class="keyword">goto</span> breakTag</span><br><span class="line">			&#125;</span><br><span class="line">			fmt.Printf(<span class="string">&quot;%v-%v\n&quot;</span>, i, j)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">	<span class="comment">// 标签</span></span><br><span class="line">breakTag:</span><br><span class="line">	fmt.Println(<span class="string">&quot;结束for循环&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="break-跳出循环"><a href="#break-跳出循环" class="headerlink" title="break 跳出循环"></a>break 跳出循环</h3><ul>
<li><p>结束<code>for</code>、<code>switch</code>、<code>select</code> 的代码块</p>
</li>
<li><p>可以在<code>break</code>语句后面添加标签：退出某个标签对应的代码块</p>
<ul>
<li><p>标签必须定义在对应的<code>for</code>、<code>switch</code>、<code>select</code> 的代码块上</p>
<ul>
<li>```go<br>func breakDemo1() {<br>BREAKDEMO1:<pre><code>for i := 0; i &lt; 10; i++ &#123;
    for j := 0; j &lt; 10; j++ &#123;
        if j == 2 &#123;
            break BREAKDEMO1
        &#125;
        fmt.Printf(&quot;%v-%v\n&quot;, i, j)
    &#125;
&#125;
fmt.Println(&quot;...&quot;)
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">### continue 继续下次循环</span><br><span class="line"></span><br><span class="line">* continue 语句: 结束当前循环，开始下一次循环，仅限在`for`循环内使用</span><br><span class="line"></span><br><span class="line">* 在`continue` 语句后添加标签时，表示开始标签对应的循环</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func continueDemo() &#123;</span><br><span class="line">    forloop1:</span><br><span class="line">    	for i := 0; i &lt; 5; i++ &#123;</span><br><span class="line">    		// forloop2:</span><br><span class="line">    		for j := 0; j &lt; 5; j++ &#123;</span><br><span class="line">    			if i == 2 &amp;&amp; j == 2 &#123;</span><br><span class="line">    				continue forloop1</span><br><span class="line">    			&#125;</span><br><span class="line">    			fmt.Printf(&quot;%v-%v\n&quot;, i, j)</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="练习题-1"><a href="#练习题-1" class="headerlink" title="练习题"></a>练习题</h3><ul>
<li><p>编写代码打印 99 乘法表</p>
<ul>
<li><pre><code class="go">package main

import &quot;fmt&quot;

func main() &#123;
    for i := 1; i &lt;= 10; i++ &#123;
        for j := 1; j &lt;= 10; j++ &#123;
            fmt.Printf(&quot;%d * %d = %d &quot;, i, j, i*j)
        &#125;
        fmt.Println()
    &#125;
&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>7 map</title>
    <url>/p/19fd4f1c.html</url>
    <content><![CDATA[<h2 id="7-map"><a href="#7-map" class="headerlink" title="7 map"></a>7 map</h2><ul>
<li>无序的基于<code>key-value</code>的数据结构</li>
<li>内部使用<code>散列表(hash)</code>实现</li>
<li>Go 中的map是引用类型，必须初始化才能使用</li>
</ul>
<h3 id="map-定义"><a href="#map-定义" class="headerlink" title="map 定义"></a>map 定义</h3><ul>
<li>Go 中map基本语法<ul>
<li><code>map[KeyType]ValueType</code></li>
<li>KeyType : 键的类型</li>
<li>ValueType ：键对应的值得类型</li>
</ul>
</li>
<li>默认初始值：<code>nil</code> 需要使用make 分配内存<ul>
<li><code>make(map[KeyType]ValueType, [cap])</code><ul>
<li>cap ：容量，可省略。但应该在初始化时指定一个合适的容量</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="map-基本使用"><a href="#map-基本使用" class="headerlink" title="map 基本使用"></a>map 基本使用</h3><ul>
<li><p>map 中的数据都是成对出现</p>
<ul>
<li><p>示例</p>
</li>
<li><p>```go<br>scoreMap := make(map[string]int, 8)<br>scoreMap[“小明”] = 90<br>fmt.Println(scoreMap)<br>fmt.Println(scoreMap[“小明”])</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* map 支持在声明时，列表初始化</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    userInfo := map[string]string&#123;</span><br><span class="line">    	&quot;username&quot;: &quot;马子豪&quot;,</span><br><span class="line">    	&quot;password&quot;:&quot;122&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h3 id="map-的遍历"><a href="#map-的遍历" class="headerlink" title="map 的遍历"></a>map 的遍历</h3><ul>
<li><p>判断 map 中键是否存在的特殊写法：</p>
<ul>
<li><p><code>value,ok := mapname[key]</code></p>
<ul>
<li>如果key存在，则 ok 为 true，value 为对应的 <strong>值</strong></li>
<li>若key不存在，则ok 为false</li>
</ul>
</li>
<li><p>exampe</p>
<ul>
<li>```go<pre><code>scoreMap := make(map[string]int)
scoreMap[&quot;张三&quot;] = 90
scoreMap[&quot;小明&quot;] = 100
// 如果key存在ok为true,v为对应的值；不存在ok为false,v为值类型的零值
v, ok := scoreMap[&quot;张三&quot;]
if ok &#123;
    fmt.Println(v)
&#125; else &#123;
    fmt.Println(&quot;查无此人&quot;)
&#125;
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">### map 的遍历</span><br><span class="line"></span><br><span class="line">* `for range`键值遍历，同字符串和数组，可以使用匿名变量`_`省略key或者value</span><br><span class="line">  * 注意：遍历map时，元素顺序与添加时顺序无关</span><br><span class="line">  * 示例, </span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">	scoreMap := make(map[string]int)</span><br><span class="line">	scoreMap[&quot;张三&quot;] = 90</span><br><span class="line">	scoreMap[&quot;小明&quot;] = 100</span><br><span class="line">	scoreMap[&quot;娜扎&quot;] = 60</span><br><span class="line">	for k, v := range scoreMap &#123;</span><br><span class="line">		fmt.Println(k, v)</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="使用-delete-函数删除键值对"><a href="#使用-delete-函数删除键值对" class="headerlink" title="使用 delete() 函数删除键值对"></a>使用 delete() 函数删除键值对</h3><ul>
<li><p>使用内置函数<code>delete()</code> 从map删除一组 键值对 ，</p>
<ul>
<li>语法：<code>delete(mapname,key)</code></li>
<li>mapname: 要删除的键值对的 map</li>
<li>key：要删除的键值对的键</li>
</ul>
</li>
<li><p>示例</p>
<ul>
<li>```go<pre><code>scoreMap := make(map[string]int)
scoreMap[&quot;张三&quot;] = 90
scoreMap[&quot;小明&quot;] = 100
scoreMap[&quot;娜扎&quot;] = 60
delete(scoreMap, &quot;小明&quot;)//将小明:100从map中删除
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 按照指定顺序遍历map</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">func main() &#123;</span><br><span class="line">	rand.Seed(time.Now().UnixNano()) //初始化随机数种子</span><br><span class="line"></span><br><span class="line">	var scoreMap = make(map[string]int, 200)</span><br><span class="line"></span><br><span class="line">	for i := 0; i &lt; 100; i++ &#123;</span><br><span class="line">		key := fmt.Sprintf(&quot;stu%02d&quot;, i) //生成stu开头的字符串</span><br><span class="line">		value := rand.Intn(100)          //生成0~99的随机整数</span><br><span class="line">		scoreMap[key] = value</span><br><span class="line">	&#125;</span><br><span class="line">	//取出map中的所有key存入切片keys</span><br><span class="line">	var keys = make([]string, 0, 200)</span><br><span class="line">	for key := range scoreMap &#123;</span><br><span class="line">		keys = append(keys, key)</span><br><span class="line">	&#125;</span><br><span class="line">	//对切片进行排序</span><br><span class="line">	sort.Strings(keys)</span><br><span class="line">	//按照排序后的key遍历map</span><br><span class="line">	for _, key := range keys &#123;</span><br><span class="line">		fmt.Println(key, scoreMap[key])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>先对key值排序，</p>
</li>
<li><p>再输出对应顺序的<code>mapname[key]</code></p>
</li>
</ul>
<h3 id="元素为-map-类型的切片"><a href="#元素为-map-类型的切片" class="headerlink" title="元素为 map 类型的切片"></a>元素为 map 类型的切片</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> mapSlice = <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">	<span class="keyword">for</span> index, value := <span class="keyword">range</span> mapSlice &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;index:%d value:%v\n&quot;</span>, index, value)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;after init&quot;</span>)</span><br><span class="line">	<span class="comment">// 对切片中的map元素进行初始化</span></span><br><span class="line">	mapSlice[<span class="number">0</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span>, <span class="number">10</span>)</span><br><span class="line">	mapSlice[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;小王子&quot;</span></span><br><span class="line">	mapSlice[<span class="number">0</span>][<span class="string">&quot;password&quot;</span>] = <span class="string">&quot;123456&quot;</span></span><br><span class="line">	mapSlice[<span class="number">0</span>][<span class="string">&quot;address&quot;</span>] = <span class="string">&quot;沙河&quot;</span></span><br><span class="line">	<span class="keyword">for</span> index, value := <span class="keyword">range</span> mapSlice &#123;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;index:%d value:%v\n&quot;</span>, index, value)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="值为切片类型的-map"><a href="#值为切片类型的-map" class="headerlink" title="值为切片类型的 map"></a>值为切片类型的 map</h3><ul>
<li>键为<code>string</code></li>
<li>值为<code>[]string</code>, 切片</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> sliceMap = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>][]<span class="keyword">string</span>, <span class="number">3</span>)</span><br><span class="line">    </span><br><span class="line">	fmt.Println(sliceMap)</span><br><span class="line">	fmt.Println(<span class="string">&quot;after init&quot;</span>)</span><br><span class="line">	key := <span class="string">&quot;中国&quot;</span></span><br><span class="line">    </span><br><span class="line">	value, ok := sliceMap[key]</span><br><span class="line">	<span class="keyword">if</span> !ok &#123;</span><br><span class="line">        </span><br><span class="line">		value = <span class="built_in">make</span>([]<span class="keyword">string</span>, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">	&#125;</span><br><span class="line">	value = <span class="built_in">append</span>(value, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>)</span><br><span class="line">	sliceMap[key] = value</span><br><span class="line">	fmt.Println(sliceMap)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><h4 id="练习一"><a href="#练习一" class="headerlink" title="练习一"></a>练习一</h4><ul>
<li><p>写一个程序，统计一个字符串中每个单词出现的次数。比如：”how do you do”中how=1 do=2 you=1。</p>
</li>
<li><p>分析：给一个字符串，以某个符号分隔：使用<code>strings</code>包中的Split方法</p>
</li>
<li><p>```go<br>package main</p>
<p>import (</p>
<pre><code>&quot;fmt&quot;
&quot;strings&quot;
</code></pre>
<p>)</p>
<p>func main() {</p>
<pre><code>a := &quot;how do you do&quot;
result := make(map[string]int, 10)
b := strings.Split(a, &quot; &quot;)
for _, s := range b &#123;
    result[s]++
&#125;
fmt.Println(result)
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 练习二</span><br><span class="line"></span><br><span class="line">* ```go</span><br><span class="line">  func main() &#123;</span><br><span class="line">  	type Map map[string][]int   //值为切片（元素为int类型）的map类型</span><br><span class="line">  	m := make(Map)				//初始化</span><br><span class="line">  	s := []int&#123;1, 2&#125;			//切片</span><br><span class="line">      s = append(s, 3)			//s : [1 2 3]</span><br><span class="line">  	fmt.Printf(&quot;%+v\n&quot;, s)		//[1 2 3]</span><br><span class="line">      m[&quot;q1mi&quot;] = s				//m : [&quot;qlmi&quot;:[1 2 3]]</span><br><span class="line">      s = append(s[:1], s[2:]...)	//s : [1 3]</span><br><span class="line">  	fmt.Printf(&quot;%+v\n&quot;, s)		//[1 3]</span><br><span class="line">  	fmt.Printf(&quot;%+v\n&quot;, m[&quot;q1mi&quot;])	//[1 2 3]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>目测结果: </p>
<ul>
<li><code>[1 2 3]</code></li>
<li><code>[1 3]</code></li>
<li><code>[1 2 3]</code></li>
</ul>
</li>
<li><p>运行结果：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">3</span> <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>为什么最后一行`[1 3 3]</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>8 函数</title>
    <url>/p/3cd8bf08.html</url>
    <content><![CDATA[<h2 id="8-函数"><a href="#8-函数" class="headerlink" title="8 函数"></a>8 函数</h2><ul>
<li><p>函数是<strong>组织好的、可重复使用的、用于执行指定任务</strong>的代码块</p>
</li>
<li><p>Go 中支持<strong>函数、匿名函数和闭包</strong>，并且函数在Go中属于”一等公民”</p>
</li>
</ul>
<h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><ul>
<li><p>具体格式：</p>
<ul>
<li><p>```go<br>func 函数名(参数)(返回值){</p>
<pre><code>函数体
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * **函数名**：*字母、数字、下划线*组成。在**同一个包内**，函数名不能重复</span><br><span class="line">  * **参数**：由 *参数变量和参数变量* 的类型组成，多个参数使用**逗号**隔开</span><br><span class="line">  * **返回值**：由 *返回值变量和其类型* 组成，也**可以只写返回值类型**，**多个返回值必须用`()`包裹**，并用逗号隔开</span><br><span class="line">  * **函数体**：实现指定功能的代码块</span><br><span class="line"></span><br><span class="line">* 示例：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func intSum(x int, y int) int &#123;</span><br><span class="line">    	return x +y</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>函数的参数和返回值都是可选的</p>
</li>
</ul>
</li>
</ul>
<h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><ul>
<li>定义函数后，使用<code>函数名()</code>调用函数</li>
<li>调用有返回值的函数时，可以不接收其返回值</li>
</ul>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><h4 id="类型简写"><a href="#类型简写" class="headerlink" title="类型简写"></a>类型简写</h4><ul>
<li>函数参数列表 中，若相邻变量的参数相同，则可以<strong>省略左边的类型</strong><br>* </li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">intSum</span><span class="params">(x, y <span class="keyword">int</span>)</span> <span class="title">int</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x+y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><ul>
<li><p>可变参数：函数的参数数量不固定</p>
<ul>
<li><p>在参数列表中加<code>...</code>标识</p>
</li>
<li><p>前面一个变量是<strong>切片</strong></p>
</li>
<li><p>```go<br>func intSum(x … int) int{</p>
<pre><code>//x是一个切片
sum := 0
for _,v := range x&#123;
    sum += v
&#125;
return sum
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">* 调用仅含有可变参数的函数时：可有0或多个变量</span><br><span class="line"></span><br><span class="line">* 固定参数 搭配可变参数时，可变参数放在固定参数后：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func intSum(x int, y ... int) int&#123;</span><br><span class="line">        sum := x</span><br><span class="line">        for _,v := range y&#123;</span><br><span class="line">            sum += v</span><br><span class="line">        &#125;</span><br><span class="line">        return sum</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>调用含有混合型的参数时，必须要有固定参数</p>
</li>
<li><p>本质上，<strong>可变参数通过切片实现</strong></p>
</li>
</ul>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><ul>
<li>Go 中通过关键字<code>return</code>向外输出返回值</li>
</ul>
<h4 id="多返回值"><a href="#多返回值" class="headerlink" title="多返回值"></a>多返回值</h4><ul>
<li><p>Go 支持多返回值，必须用<code>()</code>将所有返回值包裹起来</p>
<ul>
<li>```go<br>func calc(x,y int) (int,int){<pre><code>return x+y,x-y
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">#### 返回值命名</span><br><span class="line"></span><br><span class="line">* 函数定义时， 可以给返回值命名，并在函数体内直接使用，最后只需要`return `关键字返回</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func calc(x,y int) (sum,sub int)&#123;</span><br><span class="line">    	sum = x+y</span><br><span class="line">    	sub = x-y</span><br><span class="line">    	return</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="返回值补充"><a href="#返回值补充" class="headerlink" title="返回值补充"></a>返回值补充</h4><ul>
<li>当一个函数的返回值类型为 切片 时，<code>nil</code>可看作一个有效的 切片，没必要显示长度为零的切片</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>9 函数进阶</title>
    <url>/p/a3f04df4.html</url>
    <content><![CDATA[<h2 id="9-函数进阶"><a href="#9-函数进阶" class="headerlink" title="9 函数进阶"></a>9 函数进阶</h2><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ul>
<li>定义于函数外部，在程序整个运行周期内有效</li>
</ul>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><ul>
<li>函数内定义的变量无法在该函数外使用</li>
<li>若局部变量和全局变量重名，优先访问局部变量</li>
<li>if 条件判断、for循环、switch语句块中定义的变量，只能在该语句块中使用</li>
</ul>
<h3 id="函数类型与变量"><a href="#函数类型与变量" class="headerlink" title="函数类型与变量"></a>函数类型与变量</h3><h4 id="定义函数类型"><a href="#定义函数类型" class="headerlink" title="定义函数类型"></a>定义函数类型</h4><ul>
<li>使用关键字<code>type</code> 定义一个<strong>函数类型</strong>，格式：<ul>
<li><code>type calculation func(int,int) int</code></li>
<li>定义了一个<code>calculation</code> 类型，一种函数类型，接收两个int类型参数并且返回一个int类型</li>
<li>满足 <strong>参数列表一致</strong>并且<strong>返回值列表一致</strong>的 都是某一函数类型<ul>
<li><code>var c calculation</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="函数类型变量"><a href="#函数类型变量" class="headerlink" title="函数类型变量"></a>函数类型变量</h4><ul>
<li><p>可以 声明函数类型的变量并且为该变量赋值</p>
<ul>
<li>```go<pre><code>func main() &#123;
var c calculation               // 声明一个calculation类型的变量c
c = add                         // 把add赋值给c
fmt.Printf(&quot;type of c:%T\n&quot;, c) // type of c:main.calculation
fmt.Println(c(1, 2))            // 像调用add一样调用c

f := add                        // 将函数add赋值给变量f1
fmt.Printf(&quot;type of f:%T\n&quot;, f) // type of f:func(int, int) int
fmt.Println(f(10, 20))          // 像调用add一样调用f
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">### 高阶函数</span><br><span class="line"></span><br><span class="line">* 高阶函数：</span><br><span class="line">  * 函数作为参数</span><br><span class="line">  * 函数作为返回值</span><br><span class="line"></span><br><span class="line">#### 函数作为参数</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">func add(x, y int) int &#123;</span><br><span class="line">	return x + y</span><br><span class="line">&#125;</span><br><span class="line">func calc(x, y int, op func(int, int) int) int &#123;</span><br><span class="line">	return op(x, y)</span><br><span class="line">&#125;</span><br><span class="line">func main() &#123;</span><br><span class="line">	ret2 := calc(10, 20, add)</span><br><span class="line">	fmt.Println(ret2) //30</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="函数作为返回值"><a href="#函数作为返回值" class="headerlink" title="函数作为返回值"></a>函数作为返回值</h4><p>示例：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">do</span><span class="params">(s <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">func</span>(<span class="keyword">int</span>, <span class="keyword">int</span>)</span> <span class="title">int</span>, <span class="title">error</span>)</span> &#123;</span><br><span class="line">	<span class="keyword">switch</span> s &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> add, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> sub, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		err := errors.New(<span class="string">&quot;无法识别的操作符&quot;</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="匿名函数和闭包"><a href="#匿名函数和闭包" class="headerlink" title="匿名函数和闭包"></a>匿名函数和闭包</h3><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><ul>
<li><p>多用于 实现<strong>回调函数和闭包</strong></p>
</li>
<li><p>函数 可以作为返回值，但是Go 中，函数内部不能一般那样定义函数，只能定义匿名函数</p>
<ul>
<li><p>格式</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(参数)</span><span class="params">(返回值)</span></span>&#123;</span><br><span class="line">	函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>匿名函数没有函数名：需要 <strong>保存在某个变量</strong> 或者 <strong>作为立即执行函数</strong></p>
<ul>
<li><p>```go<br>func main() {</p>
<pre><code>// 将匿名函数保存到变量
add := func(x, y int) &#123;
    fmt.Println(x + y)
&#125;
add(10, 20) // 通过变量调用匿名函数

//自执行函数：匿名函数定义完加()直接执行
func(x, y int) &#123;
    fmt.Println(x + y)
&#125;(10, 20)
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#### 闭包（不太懂）</span><br><span class="line"></span><br><span class="line">* 闭包可以理解成**“定义在一个函数内部的函数“**。在本质上，**闭包是将函数内部和函数外部连接起来的桥梁**。或者说是**函数和其引用环境的组合体**。</span><br><span class="line"></span><br><span class="line">* **一个函数** 和 **与其相关的引用环境** 组合而成的**实体**</span><br><span class="line"></span><br><span class="line">  * `闭包 = 函数+引用环境`</span><br><span class="line"></span><br><span class="line">* 示例：</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func adder() func(int) int &#123;</span><br><span class="line">    	var x int</span><br><span class="line">    	return func(y int) int &#123;</span><br><span class="line">    		x += y</span><br><span class="line">    		return x</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	var f = adder()</span><br><span class="line">    	fmt.Println(f(10)) //10</span><br><span class="line">    	fmt.Println(f(20)) //30</span><br><span class="line">    	fmt.Println(f(30)) //60</span><br><span class="line">    </span><br><span class="line">    	f1 := adder()</span><br><span class="line">    	fmt.Println(f1(40)) //40</span><br><span class="line">    	fmt.Println(f1(50)) //90</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>变量<code>f</code>: 一个函数，并且它引用了其外部作用域中的<code>x</code></p>
<ul>
<li>此时 <code>f</code> 就是一个闭包</li>
<li>在f 的生命周期内，变量<code>x</code> 也一直有效</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>闭包进阶示例1</strong></p>
<ul>
<li>```go<br>func adder2(x int) func(int) int {<pre><code>return func(y int) int &#123;
    x += y
    return x
&#125;
</code></pre>
}<br>func main() {<pre><code>var f = adder2(10)
fmt.Println(f(10)) //20
fmt.Println(f(20)) //40
fmt.Println(f(30)) //70

f1 := adder2(20)
fmt.Println(f1(40)) //60
fmt.Println(f1(50)) //110
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* **闭包进阶示例2**</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func makeSuffixFunc(suffix string) func(string) string &#123;</span><br><span class="line">    	return func(name string) string &#123;</span><br><span class="line">    		if !strings.HasSuffix(name, suffix) &#123;</span><br><span class="line">    			return name + suffix</span><br><span class="line">    		&#125;</span><br><span class="line">    		return name</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    func main() &#123;</span><br><span class="line">    	jpgFunc := makeSuffixFunc(&quot;.jpg&quot;)</span><br><span class="line">    	txtFunc := makeSuffixFunc(&quot;.txt&quot;)</span><br><span class="line">    	fmt.Println(jpgFunc(&quot;test&quot;)) //test.jpg</span><br><span class="line">    	fmt.Println(txtFunc(&quot;test&quot;)) //test.txt</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>闭包进阶示例3</strong></p>
<ul>
<li><p>```go<br>func calc(base int) (func(int) int, func(int) int) {</p>
<pre><code>add := func(i int) int &#123;
    base += i
    return base
&#125;

sub := func(i int) int &#123;
    base -= i
    return base
&#125;
return add, sub
</code></pre>
<p>}</p>
<p>func main() {</p>
<pre><code>f1, f2 := calc(10)
fmt.Println(f1(1), f2(2)) //11 9
fmt.Println(f1(3), f2(4)) //12 8
fmt.Println(f1(5), f2(6)) //13 7
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* 牢记 `闭包 = 函数 + 引用环境`</span><br><span class="line"></span><br><span class="line">### defer 语句</span><br><span class="line"></span><br><span class="line">* defer 语句的**延迟调用**的特性</span><br><span class="line"></span><br><span class="line">  * 使得能非常方便的**处理资源释放问题**</span><br><span class="line">    * 资源清理，文件关闭，解锁及记录时间</span><br><span class="line">    * C++ 语言中的析构函数（Destructor)可以起到类似作用：C++ 机制担保在对象被销毁前一定会执行析构函数中的代码</span><br><span class="line">    * 析构函数：析构对象</span><br><span class="line">    * defer：析构函数</span><br><span class="line"></span><br><span class="line">* Go 中的`def` 将语句进行 **延迟处理**</span><br><span class="line"></span><br><span class="line">* 在`defer`归属的函数即将返回时，将延迟处理的语句按`defer`定义的逆序进行执行</span><br><span class="line"></span><br><span class="line">* 即：先被`defer` 的语句最后被执行，最后被`defer` 的语句最先被执行</span><br><span class="line"></span><br><span class="line">  * 示例</span><br><span class="line"></span><br><span class="line">  * ```go</span><br><span class="line">    func main() &#123;</span><br><span class="line">    	fmt.Println(&quot;start&quot;)</span><br><span class="line">    	defer fmt.Println(1)</span><br><span class="line">    	defer fmt.Println(2)</span><br><span class="line">    	defer fmt.Println(3)</span><br><span class="line">    	fmt.Println(&quot;end&quot;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>输出：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">start</span><br><span class="line">end</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="defer-执行时机"><a href="#defer-执行时机" class="headerlink" title="defer 执行时机"></a>defer 执行时机</h4><ul>
<li>在 Go 的函数中，return 语句<strong>在底层并不是原子操作</strong><ul>
<li><strong>给返回值赋值</strong></li>
<li><strong>RET 指令</strong></li>
</ul>
</li>
<li>而 <code>defer</code> 语句的执行时机，<strong>就在给返回值赋值后，RET 指令执行前</strong></li>
<li><strong>defer、 return、返回值</strong> 三者的执行顺序是 :<ul>
<li><strong>return</strong> 最先<strong>给返回值赋值；</strong></li>
<li>接着 defer 开始<strong>执行一些收尾工作</strong>；</li>
<li>最后 <strong>RET 指令携带返回值退出函数</strong>。</li>
</ul>
</li>
</ul>
<h4 id="defer-经典案例-不太懂"><a href="#defer-经典案例-不太懂" class="headerlink" title="defer 经典案例(不太懂)"></a>defer 经典案例(不太懂)</h4><ul>
<li><p>阅读代码，打印结果</p>
<ul>
<li><pre><code class="go">func f1() int &#123;
    x := 5
    defer func() &#123;
        x++
    &#125;()
    return x
&#125;

func f2() (x int) &#123;
    defer func() &#123;
        x++
    &#125;()
    return 5
&#125;

func f3() (y int) &#123;
    x := 5
    defer func() &#123;
        x++
    &#125;()
    return x
&#125;
func f4() (x int) &#123;
    defer func(x int) &#123;
        x++
    &#125;(x)
    return 5
&#125;
func main() &#123;
    fmt.Println(f1())        //5
    fmt.Println(f2())        //6
    fmt.Println(f3())        //0
    fmt.Println(f4())        //1
&#125;
</code></pre>
</li>
<li><p>我的答案:<code>5 6 0 1</code></p>
</li>
<li><p>运行答案：<code>5 6 5 5</code></p>
</li>
</ul>
</li>
</ul>
<h4 id="defer-面试题（不太懂）"><a href="#defer-面试题（不太懂）" class="headerlink" title="defer 面试题（不太懂）"></a>defer 面试题（不太懂）</h4><ul>
<li>代码的输出结果：<ul>
<li><strong>提示</strong>：defer注册要 <strong>延迟执行的函数</strong> 时，该函数**所有的参数都需要确定其值</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>The Go Programming Language</tag>
      </tags>
  </entry>
  <entry>
    <title>Django 应用第一部分</title>
    <url>/p/497f9043.html</url>
    <content><![CDATA[<h1 id="编写第一个-Django-应用，第一部分"><a href="#编写第一个-Django-应用，第一部分" class="headerlink" title="编写第一个 Django 应用，第一部分"></a>编写第一个 Django 应用，第一部分</h1><p>[官方文档](<a href="https://docs.djangoproject.com/zh-hans/3.2/intro/overview/">初识 Django | Django 文档 | Django (djangoproject.com)</a>)</p>
<ul>
<li><p>目标：创建一个基本的投票应用</p>
<ul>
<li>让人们 查看和投票 的<strong>公共站点</strong></li>
<li>让开发者能 添加、修改、删除投票的<strong>管理站点</strong></li>
</ul>
</li>
<li><p>环境：</p>
<ul>
<li><code>pycharm 2019</code></li>
<li><code>python 3.6</code></li>
<li><code>Django 3.2.1</code>支持Python 和后续版本</li>
</ul>
</li>
</ul>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul>
<li><p>初始化设置：</p>
<ul>
<li>生成Django项目需要的 设置项集合：数据库配置、Django 配置和应用程序配置</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite(项目名)</span><br></pre></td></tr></table></figure>

<ul>
<li>需要注意的是，须提前将django-admin加入环境变量，因为使用的是 <code>Pycharm Professional</code> 所以可以一键创建Django项目</li>
</ul>
</li>
<li><p><code>startproject</code> 所创建的：</p>
<ul>
<li>![image-20210507200938455](E:\LearningNotes\python\编写第一个 Django 应用，第一部分.assets\image-20210507200938455-1620389380924.png)</li>
</ul>
</li>
<li><p>根据官方文档：</p>
<ul>
<li>最外层 <code>mysite</code>：是我们项目的容器</li>
<li><code>manage.py</code>: 可以让我们用各种方式管理项目的命令行工具</li>
<li>内层 <code>mysite</code>：是一个纯Python包。当需要引用其内部的内容时的包名</li>
<li><code>mysite/__init__.py</code>: 空文件，告知Python这个目录是一个Python包</li>
<li><code>mysite/settings.py</code>: Django 项目的配置文件</li>
<li><code>mysite/urls.py</code>: 项目的 URL 声明，类似于网站的目录</li>
<li><code>mysite/asgi.py</code>: 作为你的项目的运行在 ASGI 兼容的 Web 服务器上的入口</li>
<li><code>mysite/wsgi.py</code>: 作为你的项目的运行在 WSGI 兼容的Web服务器上的入口</li>
</ul>
</li>
</ul>
<h2 id="用于开发的简易服务器"><a href="#用于开发的简易服务器" class="headerlink" title="用于开发的简易服务器"></a>用于开发的简易服务器</h2><ul>
<li><p>测试项目是否创建成功：在项目容器目录运行 <code>py manage.py runserver</code></p>
</li>
<li><p>出现报错：</p>
<ul>
<li><p>```<br>Traceback (most recent call last):<br>  File “manage.py”, line 22, in <module></p>
<pre><code>main()
</code></pre>
<p>  File “manage.py”, line 18, in main</p>
<pre><code>execute_from_command_line(sys.argv)
</code></pre>
<p>  File “E:\Django_tests\mysite\venv\lib\site-packages\django\core\management_<em>init</em>_.py”, line 419,<br> in execute_from_command_line</p>
<pre><code>utility.execute()
</code></pre>
<p>  File “E:\Django_tests\mysite\venv\lib\site-packages\django\core\management_<em>init</em>_.py”, line 363,<br> in execute</p>
<pre><code>settings.INSTALLED_APPS
</code></pre>
<p>  File “E:\Django_tests\mysite\venv\lib\site-packages\django\conf_<em>init</em>_.py”, line 82, in <strong>getatt<br>r</strong></p>
<pre><code>self._setup(name)
</code></pre>
<p>  File “E:\Django_tests\mysite\venv\lib\site-packages\django\conf_<em>init</em>_.py”, line 69, in _setup</p>
<pre><code>self._wrapped = Settings(settings_module)
</code></pre>
<p>  File “E:\Django_tests\mysite\venv\lib\site-packages\django\conf_<em>init</em>_.py”, line 170, in _<em>init</em><br>_</p>
<pre><code>mod = importlib.import_module(self.SETTINGS_MODULE)
</code></pre>
<p>  File “C:\Users\Light\AppData\Local\Programs\Python\Python36\lib\importlib_<em>init</em>_.py”, line 126,<br>in import_module</p>
<pre><code>return _bootstrap._gcd_import(name[level:], package, level)
</code></pre>
<p>  File “<frozen importlib._bootstrap>“, line 994, in _gcd_import<br>  File “<frozen importlib._bootstrap>“, line 971, in _find_and_load<br>  File “<frozen importlib._bootstrap>“, line 955, in _find_and_load_unlocked<br>  File “<frozen importlib._bootstrap>“, line 665, in _load_unlocked<br>  File “<frozen importlib._bootstrap_external>“, line 678, in exec_module<br>  File “<frozen importlib._bootstrap>“, line 219, in _call_with_frames_removed<br>  File “E:\Django_tests\mysite\mysite\settings.py”, line 57, in <module></p>
<pre><code>&#39;DIRS&#39;: [os.path.join(BASE_DIR, &#39;templates&#39;)]
</code></pre>
<p>NameError: name ‘os’ is not defined</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 分析：`xxxx\settings.py` `os not defined`, 可能是该文件未导入os模块导入后成功</span><br><span class="line">* solution：导入后成功</span><br><span class="line"></span><br><span class="line">  * ```</span><br><span class="line">    Watching for file changes with StatReloader</span><br><span class="line">    Performing system checks...</span><br><span class="line"></span><br><span class="line">    System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">    You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">    Run &#x27;python manage.py migrate&#x27; to apply them.</span><br><span class="line">    May 07, 2021 - 20:20:20</span><br><span class="line">    Django version 3.2.2, using settings &#x27;mysite.settings&#x27;</span><br><span class="line">    Starting development server at http://127.0.0.1:8000/</span><br><span class="line">    Quit the server with CTRL-BREAK.</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>至此，我们启动了Django自带的 <strong>用于开发的简易服务器</strong></p>
<ul>
<li><p>用纯python写的轻量级Web服务器</p>
</li>
<li><p>注意：</p>
<ul>
<li><blockquote>
<p><strong>千万不要</strong> 将这个服务器用于和生产环境相关的任何地方。这个服务器只是为了开发而设计的。(我们在 Web 框架方面是专家，在 Web 服务器方面并不是。)</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>更换端口：</p>
<ul>
<li>默认runserver命令会将服务器设置为监听本机内部 IP 的8000端口</li>
<li>若想更换端口：<ul>
<li><code>py manage.py runserver 8080</code></li>
</ul>
</li>
<li>若想修改服务器监听的 IP：<ul>
<li><code>py manage.py runserver 0:8080</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="创建投票应用"><a href="#创建投票应用" class="headerlink" title="创建投票应用"></a>创建投票应用</h2><ul>
<li><p>开发环境——项目配置初始化成功</p>
</li>
<li><blockquote>
<p>Django 中，每一个应用都是一个Python包</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>项目 VS 应用</strong></p>
<p>项目和应用有什么区别？</p>
<p><strong>应用</strong>是一个专门做某件事的<strong>网络应用程序</strong>——比如博客系统，或者公共记录的数据库，或者小型的投票程序。</p>
<p><strong>项目</strong>则是<strong>一个网站使用的配置和应用的集合</strong>。项目可以包含很多个应用。应用可以被很多个项目使用。</p>
</blockquote>
</li>
<li><p>应用可以存放任何Python路径中定义的路径</p>
</li>
<li><p>在此项目，须在 <code>manage.py</code>同级目录下创建应用</p>
<ul>
<li>可以作为顶级模块导入，而不是mysite的子模块</li>
</ul>
</li>
<li><p>创建应用：</p>
<ul>
<li>```<br>py manage.py startapp polls<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 命令会创建polls目录：包含了应用的全部内容</span><br><span class="line"></span><br><span class="line">  * ![image-20210507203223797](E:\LearningNotes\python\编写第一个 Django 应用，第一部分.assets\image-20210507203223797-1620390751727.png)</span><br><span class="line"></span><br><span class="line">## 编写第一个视图</span><br><span class="line"></span><br><span class="line">首先：</span><br><span class="line"></span><br><span class="line">* 在 `polls/views.py`：</span><br><span class="line"></span><br><span class="line">  * ```python</span><br><span class="line">    from django.http import HttpResponse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def index(request):</span><br><span class="line">        return HttpResponse(&quot;Hello, world. You&#x27;re at the polls index.&quot;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>其次：</p>
</li>
<li><p>需要将一个 <code>URL</code> 映射到它</p>
<ul>
<li>因此需要 <code>URLconf</code></li>
</ul>
</li>
<li><p>在polls目录里创建 <code>urls.py</code>文件，并输入：</p>
<ul>
<li><p>```python<br>from django.urls import path</p>
<p>from . import views</p>
<p>urlpatterns = [</p>
<pre><code>path(&#39;&#39;, views.index, name=&#39;index&#39;),
</code></pre>
<p>]</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">然后：</span><br><span class="line"></span><br><span class="line">* 在根 `URLconf`文件中，指定刚刚创建的 `polls.urls`模块</span><br><span class="line"></span><br><span class="line">  * 在 `mysite/urls.py`中的 `urlpatterns`列表中插入 `include()`</span><br><span class="line">  * ```python</span><br><span class="line">    from django.contrib import admin</span><br><span class="line">    from django.urls import include, path</span><br><span class="line"></span><br><span class="line">    urlpatterns = [</span><br><span class="line">        path(&#x27;polls/&#x27;, include(&#x27;polls.urls&#x27;)),</span><br><span class="line">        path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>函数 include 允许引用其他 <code>URLconfs</code>, 当包括其他 <code>URL</code>模式时，就使用该函数</p>
<ul>
<li>当 Django 遇到该函数时，会截断与此项匹配的 URL 部分，将剩余的字符串发送到 <code>URLconf</code>一共进一步处理</li>
<li><blockquote>
<p>我们设计 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/urls/#django.urls.include"><code>include()</code></a> 的理念是使其可以即插即用。因为投票应用有它自己的 URLconf( <code>polls/urls.py</code> )，他们能够被放在 “/polls/“ ， “/fun_polls/“ ，”/content/polls/“，或者其他任何路径下，这个应用都能够正常工作。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>现在已经将index视图 天加入了根URLconf</p>
</li>
</ul>
<p>最后，</p>
<ul>
<li><p>验证是否能正常工作：<code>py manage.py runserver</code></p>
</li>
<li><p>访问：<code>http://localhost:8000/polls/ </code></p>
<ul>
<li>成功</li>
</ul>
</li>
</ul>
<h2 id="函数path（）"><a href="#函数path（）" class="headerlink" title="函数path（）"></a>函数path（）</h2><p>函数的四个参数：</p>
<ul>
<li><p>必须参数：<code>route</code> <code>view</code></p>
</li>
<li><p>可选参数：<code>kwargs</code> <code>name</code></p>
</li>
<li><p><code>route</code>: 一个匹配 URL 的准则（类似于正则表达式）</p>
<ul>
<li><blockquote>
<p>当 Django 响应一个<strong>请求request</strong>时，它会从 <code>urlpatterns</code> 的第一项开始，按顺序依次匹配列表中的项，直到找到匹配的项。</p>
</blockquote>
</li>
<li><blockquote>
<p>这些准则不会匹配 GET 和 POST 参数或域名。例如，URLconf 在处理请求 <code>https://www.example.com/myapp/</code> 时，它会尝试匹配 <code>myapp/</code> 。处理请求 <code>https://www.example.com/myapp/?page=3</code> 时，也只会尝试匹配 <code>myapp/</code>。</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>view</code>: 当Django 找到一个匹配的准则，会调用这个特定的视图函数，并传入一个 <code>HttpRequest</code>对象作为第一个参数</p>
<ul>
<li>被“捕获”的参数以<strong>关键字参数</strong>的形式传入</li>
</ul>
</li>
<li><p><code>kwargs</code>: 任意关键字参数 可以作为一个字典传递给目标视图函数，本此项目不会使用</p>
</li>
<li><p><code>name</code>:</p>
<ul>
<li><blockquote>
<p>为 URL 取名能使你在 Django 的<strong>任意地方唯一地引用</strong>它，尤其是在模板中。这个有用的特性允许你只改一个文件就能全局地修改某个 URL 模式。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>开发框架学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Django应用第二部分</title>
    <url>/p/77fbe329.html</url>
    <content><![CDATA[<p>该部分将建立数据库，创建第一个模型module, 并主要关注Django提供的自动生成的管理页面</p>
<h2 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h2><ul>
<li><code>mysite/settings.py</code>: 包含了项目配置的python模块</li>
<li>一般，这个配置文件使用 <code>SQLite</code> 作为默认数据库</li>
</ul>
<blockquote>
<p><strong>更换 数据库</strong> ——[官方文档](<a href="https://docs.djangoproject.com/zh-hans/3.2/intro/tutorial02/">编写你的第一个 Django 应用，第 2 部分 | Django 文档 | Django (djangoproject.com)</a>)</p>
<p>如果你想使用其他数据库，你需要安装合适的 <a href="https://docs.djangoproject.com/zh-hans/3.2/topics/install/#database-installation">database bindings</a> ，然后改变设置文件中 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-DATABASES"><code>DATABASES</code></a> <code>&#39;default&#39;</code> 项目中的一些键值：</p>
<ul>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-DATABASE-ENGINE"><code>ENGINE</code></a> – 可选值有 <code>&#39;django.db.backends.sqlite3&#39;</code>，<code>&#39;django.db.backends.postgresql&#39;</code>，<code>&#39;django.db.backends.mysql&#39;</code>，或 <code>&#39;django.db.backends.oracle&#39;</code>。其它 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/databases/#third-party-notes">可用后端</a>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-NAME"><code>NAME</code></a> – 数据库的名称。如果你使用 SQLite，数据库将是你电脑上的一个文件，在这种情况下，<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-NAME"><code>NAME</code></a> 应该是此文件完整的绝对路径，包括文件名。默认值 <code>BASE_DIR / &#39;db.sqlite3&#39;</code> 将把数据库文件储存在项目的根目录。</li>
</ul>
<p>如果你不使用 SQLite，则必须添加一些额外设置，比如 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-USER"><code>USER</code></a> 、 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-PASSWORD"><code>PASSWORD</code></a> 、 <a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-HOST"><code>HOST</code></a> 等等。想了解更多数据库设置方面的内容，请看文档：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-DATABASES"><code>DATABASES</code></a> 。</p>
</blockquote>
<ul>
<li><p>在编辑 <code>settings.py</code>文件前，需要先设置 <code>TIME_ZONE</code>为自己的时区</p>
<ul>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-TIME_ZONE">TIME_ZONE</a></li>
<li>中国时区：<code>CN</code></li>
</ul>
</li>
<li><p><code>setting.py</code>头部 <code>INSTALLED_APPS</code>设置项：包括了会在项目中启动的所有应用</p>
<ul>
<li><blockquote>
<p>应用能在多个项目中使用，你也可以打包并且发布应用，让别人使用它们</p>
</blockquote>
</li>
</ul>
</li>
<li><p><code>INSTALLED_APPS</code>默认包括了Django自带应用：</p>
<ul>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/admin/#module-django.contrib.admin"><code>django.contrib.admin</code></a> – <strong>管理员站点</strong>， 你很快就会使用它。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/auth/#module-django.contrib.auth"><code>django.contrib.auth</code></a> – <strong>认证授权系统</strong>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/contenttypes/#module-django.contrib.contenttypes"><code>django.contrib.contenttypes</code></a> – <strong>内容类型框架</strong>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/topics/http/sessions/#module-django.contrib.sessions"><code>django.contrib.sessions</code></a> – <strong>会话框架</strong>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/messages/#module-django.contrib.messages"><code>django.contrib.messages</code></a> – <strong>消息框架</strong>。</li>
<li><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/contrib/staticfiles/#module-django.contrib.staticfiles"><code>django.contrib.staticfiles</code></a> – <strong>管理静态文件的框架</strong>。</li>
</ul>
</li>
<li><p>默认开启的应用至少需要一个数据库表，因此需在使用他们之前，在数据库中创建一些表：</p>
<ul>
<li>```python<br>py manage.py migrate<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  * `migrate`命令:  检查 [`INSTALLED_APPS`](https://docs.djangoproject.com/zh-hans/3.2/ref/settings/#std:setting-INSTALLED_APPS) 设置，为其中的每个应用创建需要的数据表，至于具体会创建什么，这取决于 `mysite/settings.py` 设置文件和每个应用的**数据库迁移文件**</span><br><span class="line"></span><br><span class="line">    * 该命令会将所**执行**的每个**迁移**操作在终端显示</span><br><span class="line"></span><br><span class="line">## 创建模型</span><br><span class="line"></span><br><span class="line">在Django中写一个数据库驱动的 Web 应用的**第一步**：==定义模型==——即**数据库结构设计和附加的其他元数据**</span><br><span class="line"></span><br><span class="line">&gt; 模型是真实数据的简单明确的描述</span><br><span class="line">&gt;</span><br><span class="line">&gt; 包含了存储的数据所必要的字段和行为</span><br><span class="line"></span><br><span class="line">在该应用中，将建立两个模型：Question和Choice</span><br><span class="line"></span><br><span class="line">* Question模型：包括两个字段：问题描述和发布时间</span><br><span class="line">* Choice模型：有两个字段，选项描述和当前得票数。每个Choice属于一个问题</span><br><span class="line"></span><br><span class="line">这些概念都可以通过 Python 类来描述：</span><br><span class="line"></span><br><span class="line">编辑 `polls/models.py`:</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line">class Question(models.Model):</span><br><span class="line">    question_text = models.CharField(max_length=200)</span><br><span class="line">    pub_date = models.DateTimeField(&#x27;date published&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Choice(models.Model):</span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=200)</span><br><span class="line">    votes = models.IntegerField(default=0)</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>每个模型都被表示为 <code>django.db.models.Model</code>类的子类</p>
<ul>
<li>子类内有许多类变量：表示模型里的一个<strong>数据库字段</strong></li>
<li>每个字段都是 <code>Field</code>类的实例：将告诉Django每个字段要处理的数据类型<ul>
<li>字符字段：<code>CharField</code></li>
<li>日期时间字段：<code>DateTimeField</code></li>
<li>整型字段：<code>IntegerField</code></li>
<li>更多<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/models/fields/#django.db.models.Field"><code>Field</code></a></li>
</ul>
</li>
<li>每个Field类的实例名也是字段名</li>
</ul>
</li>
<li><p>定义一些 Field 类实例 需要参数：</p>
<ul>
<li><code>CharField</code> 需要 <code>max_length</code>参数：用于定义数据库结构，也用于验证数据</li>
</ul>
</li>
<li><p>注意，使用 <code>ForeignKey</code>定义关系</p>
<ul>
<li>这将告诉Django，每一个 Choice 对象都关联到一个 Question 对象</li>
</ul>
</li>
</ul>
<h2 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h2><ul>
<li>创建模型的代码给予了 Django 许多信息：<ul>
<li>为应用创建数据库 schema：生成 <code>CTEATE TABLE</code>语句</li>
<li>创建可以与Question和Choice对象 进行交互的<strong>Python数据库API</strong></li>
</ul>
</li>
</ul>
<p><strong>首先</strong>，将 polls 应用安装至Django项目中</p>
<ul>
<li><p>为了工程中包含该应用，在 <code>settings.py</code>的 <code>INSTALLED_APPS</code> 中添加设置</p>
<ul>
<li><p><code>PollsConfig</code> 类 写在 <code>polls/apps.py</code>中，因此点式路径：<code>polls.apps.PollsConfig</code></p>
</li>
<li><p>在 <code>settings.py</code>的 <code>INSTALLED_APPS</code> 子项添加点式路径</p>
<ul>
<li>```python<br>INSTALLED_APPS = [<pre><code>&#39;polls.apps.PollsConfig&#39;,
&#39;django.contrib.admin&#39;,
&#39;django.contrib.auth&#39;,
&#39;django.contrib.contenttypes&#39;,
&#39;django.contrib.sessions&#39;,
&#39;django.contrib.messages&#39;,
&#39;django.contrib.staticfiles&#39;,
</code></pre>
]<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">现在项目中包含了polls应用</span><br><span class="line"></span><br><span class="line">**接着**，运行 `py manage.py makemigrations polls`</span><br><span class="line"></span><br><span class="line">* **终端输出**：</span><br><span class="line"></span><br><span class="line">  * ```</span><br><span class="line">    Migrations for &#x27;polls&#x27;:</span><br><span class="line">      polls/migrations/0001_initial.py</span><br><span class="line">        - Create model Question</span><br><span class="line">        - Create model Choice</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><code>makemigrations</code> : Django 检测对模型文件 <code>polls/models.py</code>的修改，并且将修改的部分<strong>存储</strong>为一次 <strong>迁移</strong></p>
<ul>
<li><strong>迁移</strong>是 Django 对于<strong>模型</strong>定义（也就是你的数据库结构）的<strong>变化的储存形式</strong> - 它们其实也只是一些你磁盘上的文件</li>
</ul>
</li>
<li><p><a href="https://docs.djangoproject.com/zh-hans/3.2/ref/django-admin/#django-admin-migrate"><code>migrate</code></a>: 自动<strong>执行数据库迁移</strong> 并 <strong>同步管理数据库结构</strong>的命令。</p>
<ul>
<li>迁移命令执行的SQL语句：<a href="https://docs.djangoproject.com/zh-hans/3.2/ref/django-admin/#django-admin-sqlmigrate"><code>sqlmigrate</code></a>命令接收一个迁移的名称，然后返回对应的SQL<ul>
<li><code>py manage.py sqlmigrate polls 0001</code></li>
</ul>
</li>
</ul>
</li>
<li><p>输出是迁移所对应的SQL语句</p>
<ul>
<li>表名是由应用名和模型名的小写形式连接而成</li>
<li>主键被自动创建</li>
</ul>
</li>
</ul>
<p><strong>然后</strong>，运行migrate命令，将在数据库里创建 新定义的模型的数据表：<code>py manage.py migrate</code></p>
<ul>
<li><p>该 migrate 命令会选中未执行过的迁移并应用在数据库中</p>
</li>
<li><blockquote>
<p>迁移是非常强大的功能，它能让你在开发过程中持续的改变数据库结构而不需要重新删除和创建表 - 它专注于使数据库平滑升级而不会丢失数据</p>
</blockquote>
</li>
<li><p>注意：改变模型需要三步：</p>
<ul>
<li>编辑 models 文件，改变模型</li>
<li>运行 <code>makemigrations</code> 命令生成迁移</li>
<li>运行 migrate 命令 应用迁移</li>
</ul>
</li>
</ul>
<h2 id="初试-API"><a href="#初试-API" class="headerlink" title="初试 API"></a>初试 API</h2><p><strong>首先</strong>，进入 交互式 Python 命令行，以使用Django创建的各种 API</p>
<ul>
<li><code>py manage.py shell</code><ul>
<li>manage 会设置 <code>DJANGO_SETTINGS_MODULE</code> 环境变量，根据 <code>settings</code>文件设置包的导入路径</li>
</ul>
</li>
</ul>
<p><strong>然后</strong>，尝试 <a href="https://docs.djangoproject.com/zh-hans/3.2/topics/db/queries/">数据库 API</a></p>
<ul>
<li>```<br>from polls.models import Choice, Question  # Import the model classes we just wrote.<br>from django.utils import timezone<br>q = Question(question_text=”What’s new?”, pub_date=timezone.now())<br>q.save()<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 编辑模型代码，可以更了解模型对象的细节：给模型增加 `__str__()`方法</span><br><span class="line"></span><br><span class="line">  * ```</span><br><span class="line">    from django.db import models</span><br><span class="line"></span><br><span class="line">    class Question(models.Model):</span><br><span class="line">        # ...</span><br><span class="line">        def __str__(self):</span><br><span class="line">            return self.question_text</span><br><span class="line"></span><br><span class="line">    class Choice(models.Model):</span><br><span class="line">        # ...</span><br><span class="line">        def __str__(self):</span><br><span class="line">            return self.choice_text</span><br></pre></td></tr></table></figure></li>
<li>```<br>Question.objects.filter(id=1)<br>q = Question.objects.get(pk=1)<br>q.choice_set.all()<br>q.choice_set.create(choice_text=’Not much’, votes=0)<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## Django 管理页面</span><br><span class="line"></span><br><span class="line">&gt; 为你的员工或客户生成一个用户添加，修改和删除内容的后台是一项缺乏创造性和乏味的工作。因此，Django 全自动地根据模型创建后台界面。</span><br><span class="line"></span><br><span class="line">管理页面默认开启</span><br><span class="line"></span><br><span class="line">### 创建管理员账号</span><br><span class="line"></span><br><span class="line">* `py manage.py createsuperuser`</span><br><span class="line"></span><br><span class="line">### 启动开发服务器</span><br><span class="line"></span><br><span class="line">* `py manage.py runserver`</span><br><span class="line">* 访问：`http://127.0.0.1:8000/admin/`</span><br><span class="line"></span><br><span class="line">### 管理站点页面</span><br><span class="line"></span><br><span class="line">* 进入管理页面的索引页后，可编辑的 `Groups`和 `Users` 是Django 开发的认证框架</span><br><span class="line"></span><br><span class="line">### 向管理页面加入投票应用</span><br><span class="line"></span><br><span class="line">* 需要在管理文件 `polls/admin.py`加入应用的模型</span><br><span class="line"></span><br><span class="line">  * ```</span><br><span class="line">    from django.contrib import admin</span><br><span class="line"></span><br><span class="line">    from .models import Question</span><br><span class="line"></span><br><span class="line">    admin.site.register(Question)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>开发框架学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/p/69c3279c.html</url>
    <content><![CDATA[<p>记录一下因为各种需求而对Git缝缝补补的学习</p>
<p>比较本地仓库分支 和 远程仓库分支<code>commit</code>的不同</p>
<ul>
<li><code>git fetch local_repo</code></li>
<li><code>git log local_branch..remote_repo/remote_branch</code><ul>
<li><code>..</code>作差集</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>利器酷</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Edge浏览器</title>
    <url>/p/e75f2967.html</url>
    <content><![CDATA[<h1 id="常用的插件"><a href="#常用的插件" class="headerlink" title="常用的插件"></a>常用的插件</h1><ul>
<li><code>Vimium C</code><ul>
<li>键入<code>?</code>获得操作手册</li>
</ul>
</li>
<li><code>Zotero Connector</code><ul>
<li>从当前网页上识别条目加入到Zotero</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>利器酷</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Edge浏览器</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Butterfly</title>
    <url>/p/463f518f.html</url>
    <content><![CDATA[<h1 id="创建新文章-草稿-页面"><a href="#创建新文章-草稿-页面" class="headerlink" title="创建新文章/草稿/页面"></a>创建新文章/草稿/页面</h1><p>命令：<code>hexo new [layout] &lt;title&gt;</code><br>layout 有三种：</p>
<ol>
<li>post，默认为 post 创建新文章，存于 <code>/_post</code> 中</li>
<li>draft，创建新草稿，存于<code>/_draft</code> 中，部署后不会发布</li>
<li>page</li>
</ol>
<p>refs:</p>
<ul>
<li><a href="https://butterfly.js.org/">Butterfly - A Simple and Card UI Design theme for Hexo</a></li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>博客更新</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客少生成了index主页文件</title>
    <url>/p/6de7b885.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在进行 <code>node</code> 和 <code>npm</code> 的版本更新之后，再以此运行 <code>hexo g</code>和 <code>hexo s</code>，发现访问主页为 <code>404</code>，而其他页面均正常。</p>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>对比近几次的 <code>commit</code>发现少生成了 <code>index.html</code>文件，并且在 <code>package.json</code>等文件中少了一行 <code>generator-inex</code>，可能和 <code>node</code>及 <code>npm</code>的更新相关？</p>
<p>但是，使用 <code>git reset --hard</code><a href="https://blog.csdn.net/luobeihai/article/details/128171764?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-1-128171764-blog-108067196.pc_relevant_vip_default&spm=1001.2101.3001.4242.1&utm_relevant_index=4">^1</a>命令回溯到以上配置文件未改动后，依然发现不会生成 <code>index.html</code>，咋么回事。。。</p>
<h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>使用 <code>npm install hexo-generator-index</code> 命令将依赖包重新下载回来。。。（</p>
<p>兜兜转转了一下午（比较两个 <code>commit</code>，甚至重新在本地构建了一个新博客<a href="https://cloud.tencent.com/developer/article/1173652#:~:text=Hexo%2Bgithub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E5%92%8C%E5%8F%91%E5%B8%83%EF%BC%88%E5%9B%BE%E6%96%87%E8%AF%A6%E8%A7%A3%EF%BC%89%201%202.1%20Hexo%E8%AE%BE%E7%BD%AE%20%E8%BF%99%E4%B8%AA%E5%85%B6%E5%AE%9E%E5%B0%B1%E6%98%AF%E5%8D%9A%E5%AE%A2%E6%A0%B9%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%20_config.yml%20%E6%96%87%E4%BB%B6%EF%BC%8C%E4%B8%BB%E8%A6%81%E6%98%AF%E5%AF%B9Hexo%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%8F%8A%E7%AB%99%E7%82%B9%E7%9A%84%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE%EF%BC%8C%E4%B8%8B%E9%9D%A2%E5%BC%80%E5%A7%8B%E8%BF%9B%E8%A1%8C%E5%88%86%E6%AE%B5%E8%AF%A6%E7%BB%86%E7%9A%84%E8%AF%B4%E6%98%8E%201%EF%BC%89,...%204%205.2%20%E6%B7%BB%E5%8A%A0SSH%20Key%20%E6%B3%A8%E5%86%8C%E5%AE%8C%E4%BB%A5%E5%90%8E%EF%BC%8C%E4%B8%BA%E4%BA%86%E8%AE%A9%E6%88%91%E4%BB%AC%E7%9A%84%E7%94%B5%E8%84%91%E8%83%BD%E7%9B%B4%E6%8E%A5%E5%85%8D%E5%AF%86%E7%A0%81%E9%80%9A%E8%BF%87SSH%E8%AE%BF%E9%97%AEGitHub%EF%BC%8C%E9%9C%80%E8%A6%81%E5%B0%86%E6%88%91%E4%BB%AC%E7%9A%84SSH%20Key%E6%B7%BB%E5%8A%A0%E5%88%B0GitHub%E4%B8%8A%E3%80%82%20">^2</a>来 <code>hexo d --debug</code>寻找构造的不同）。实际上我很快找到缺少了依赖包的问题，但是并没有立刻对依赖包进行下载，浪费了大量时间。</p>
<p><code>hexo</code> 根目录的 <code>node_modules</code>存储着项目所需要的依赖包，但是并不需要上传，因为过于庞大，而 <code>package-lock.json</code>里已经存储了依赖包的名称和版本。</p>
<p>想起来了，我是想通过卸载 <code>hexo-generator-index</code>并安装 <code>hexo-generator-index-pin-top</code>来实现文章置顶的，但是因为网络问题，没有安装上。。。</p>
<h1 id="refs"><a href="#refs" class="headerlink" title="refs:"></a>refs:</h1><p>学会 <code>git log</code>, <code>git reset</code>等命令</p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>博客更新</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Debug</tag>
      </tags>
  </entry>
  <entry>
    <title>How to read a paper</title>
    <url>/p/b4607f97.html</url>
    <content><![CDATA[<blockquote>
<p><strong>“或许你永远不知道你以前读过的书能在什么时候能够派上用场，但请保持阅读，因</strong>为阅读的过程也是在你大脑中建立认知的过程。”</p>
</blockquote>
<blockquote>
<p><strong>“深度阅读论文，要敢于对论文质疑，质疑论文作者的研究方法、思路、技巧。还要设身处地去想：如果我来写这篇论文，我能用什么方法。”</strong></p>
</blockquote>
<blockquote>
<p>在研究生院读书是人生中最美好的时光，在这段时间你可能没有足够的钱，但是却有足够的时间学习。</p>
<p>在读书的这段时间应该学习一些重要的技能，比如<strong>有效的阅读、写作和演讲</strong></p>
</blockquote>
<h1 id="划分层次结构"><a href="#划分层次结构" class="headerlink" title="划分层次结构"></a>划分层次结构</h1><blockquote>
<p>除了阅读的方式(快速阅读、仔细阅读和创造性阅读)，读者还要<strong>理解所读的论文是如何写出来</strong>的。因为一篇好的论文在逻辑上是层层递进的，不仅能够传达信息也能够激励读者。所以作者在写的时候也是<strong>有结构化的逻辑性思考程度的</strong>。总体上<strong>作者会思考：这篇论文的真实任务是什么、研究发现是什么；论文的贡献是什么</strong>等等。</p>
<p>相应的，读者在读论文的时候也应该要有逻辑，<strong>首先要清楚论文中的表达是否是我想要学习到的；其次，我能从论文中学到多少呢；最后，这篇论文的背景是什么——是什么样的背景让这篇论文变得重要和有趣</strong>。</p>
</blockquote>
<h1 id="1-快速阅读：划分层次结构"><a href="#1-快速阅读：划分层次结构" class="headerlink" title="1 快速阅读：划分层次结构"></a>1 快速阅读：划分层次结构</h1><h2 id="1-1-论文中的表格和图片"><a href="#1-1-论文中的表格和图片" class="headerlink" title="1.1 论文中的表格和图片"></a>1.1 论文中的表格和图片</h2><blockquote>
<p>只要<strong>弄清楚论文中表格和图片的标题和注释</strong>，就能够获得这篇论文八、九成的信息。</p>
</blockquote>
<ul>
<li>必须要理解 <strong>这些数据如何获得的</strong>，<strong>每张图和表的意义</strong></li>
<li>看这些图和表的时候，<strong>时刻问自己这些数据是否支持这篇文章的结论</strong></li>
</ul>
<h2 id="1-2-论文的标题、摘要和引言"><a href="#1-2-论文的标题、摘要和引言" class="headerlink" title="1.2 论文的标题、摘要和引言"></a>1.2 论文的标题、摘要和引言</h2><p>快速阅读需要<strong>着重关注论文的标题、摘要和引言</strong>，如此便能了解论文是否值得读、能够从论文中读到些什么</p>
<ul>
<li><p><strong>标题</strong></p>
<ul>
<li>标题是<strong>总结、抽象的概括</strong>。除了论文标题，图表的标题也是非常抽象</li>
</ul>
</li>
<li><p><strong>摘要</strong></p>
<ul>
<li>读摘要的时候，<strong>将其分解并加上一些有趣的亮点</strong>，便可能利于阅读</li>
<li><strong>Background</strong>：文章背景是什么</li>
<li><strong>Why</strong>：文章工作的目的是什么</li>
<li><strong>How</strong>：文章用了什么方法</li>
<li><strong>What</strong>：这篇文章真正的发现是什么</li>
<li><strong>Conclusion</strong>：这篇文章的研究成果是什么</li>
</ul>
</li>
<li><p><strong>引言：最重要也最难写的部分，</strong> From broad topic to specific issues to focused core questions.</p>
<ul>
<li>必须要下功夫把引言写好，写到审稿人容易看懂。</li>
<li><strong>Background</strong>：这篇论文是<strong>关于什么</strong>的，</li>
<li><strong>Why：</strong> 文章工作的目的</li>
<li><strong>What</strong>：解决了什么问题</li>
<li><strong>How：</strong> 用的方法</li>
<li><strong>Novelty</strong>：有什么<strong>新颖的东西</strong>，</li>
<li><strong>Conclusion</strong>：为什么那么神奇（得出的<strong>令人眼前一亮的结论</strong>）</li>
</ul>
</li>
</ul>
<h1 id="2-仔细阅读：批判思维"><a href="#2-仔细阅读：批判思维" class="headerlink" title="2 仔细阅读：批判思维"></a>2 仔细阅读：批判思维</h1><h2 id="How-to-remember"><a href="#How-to-remember" class="headerlink" title="How to remember"></a>How to remember</h2><ul>
<li><strong>Content clarified</strong> by you is yours</li>
<li>Try to <strong>summarize main points</strong></li>
<li>Reading <strong>like a reviewer</strong></li>
<li>Must <strong>be critical</strong> about their <strong>method and ways of thinking</strong></li>
</ul>
<h2 id="Read-effectively"><a href="#Read-effectively" class="headerlink" title="Read effectively"></a>Read effectively</h2><ul>
<li><p>Always <strong>summarize main points</strong></p>
</li>
<li><p>Always <strong>be critical</strong></p>
</li>
<li><p>And <strong>be creative,</strong></p>
<ul>
<li>if their conclusion is true, what can you expect? (如果他们的结论是对的，这个结论能带来什么改变呢?)</li>
</ul>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/02/image-20230220101228708.png" alt="ask questions, be suspicious"></p>
<ul>
<li><blockquote>
<p>如果所读的论文没有解决问题，那么我能解决么？我能采用比论文中更简单的方法解决么？</p>
<p>所以，一旦进入仔细阅读的状态，要在读论文之前对自己说：这篇论文可能有问题，我要找出来。</p>
</blockquote>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/02/image-20230220101240115.png" alt="get stuck?"></p>
<ul>
<li><p>多<strong>找一些背景知识阅读</strong>，多<strong>做笔记</strong>，多<strong>在网上搜索相关论文</strong>，然后<strong>再次通读所卡壳的论文</strong>，并试着把它<strong>与其他论文相联系起来</strong>，如此坚持下去，定能渡过难关。</p>
</li>
<li><p>另一个建议是，<strong>找熟悉这方面工作的人帮忙</strong>，让他们解释你遇到的难点。</p>
<ul>
<li>但你要意识到找人帮忙也可能遇到困难，一方面，你要找谁帮忙，导师？师姐？学长？另一方面，如何能让他们愉快的接受你几分钟、十几分钟、甚至接近一个小时的咨询？</li>
<li>我从他那学到的其实不光是我<strong>应该看哪些论文，更多的是不应该看哪些论文</strong>。他会告诉我<strong>某人的论文你不要读，因为那会扰乱你的思路。</strong></li>
</ul>
</li>
</ul>
<h1 id="3-创造性阅读：积极思考"><a href="#3-创造性阅读：积极思考" class="headerlink" title="3 创造性阅读：积极思考"></a>3 创造性阅读：积极思考</h1><blockquote>
<p>创造性的阅读需要<strong>把你所读的论文和其他相关的论文建立联系</strong>，从而<strong>产生一些新的想法</strong>，这些想法可以支撑你进行三个月到五个月的研究。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/02/image-20230220101253208.png" alt="positive thinking"></p>
<ul>
<li>这篇文章中的<strong>好想法</strong></li>
<li>可能产生重要的实际差异的<strong>改进</strong></li>
<li>作者没有想到的 <strong>应用/扩展</strong></li>
<li>这篇文章能<strong>被进一步推广</strong>吗</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/02/image-20230220101301774.png" alt="a list of questions"></p>
<ul>
<li>关于论文阅读，可以问自己的 <strong>客观和主观问题</strong></li>
<li>若能全部回答，则对本篇文章有深刻的理解</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/02/image-20230220101312974.png" alt="Tools"></p>
<ul>
<li>在阅读论文卡壳时，以上<strong>工具</strong>可以帮助阅读/该做什么</li>
</ul>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/02/image-20230220101322403.png" alt="Tips"></p>
<ul>
<li><p>养成<strong>写小总结</strong>的习惯，</p>
<ul>
<li>只有把东西写下来或者说出来才能真正深刻理解</li>
</ul>
</li>
<li><p>最好能<strong>做报告</strong>，这样真的能够<strong>增加你对所读论文的理解</strong></p>
<ul>
<li>别人可以问你问题，这会强迫你理解所读的论文</li>
</ul>
</li>
</ul>
<h1 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h1><ol>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU2OTA0NzE2NA==&mid=2247527877&idx=5&sn=3edff184812c40dc3af44c2a7c14bcde&chksm=fc868cd6cbf105c07b416bbfec4a3903b43ac1c4a2ea086025c3a7c1f3a359a3ae549574c6a4#rd">沈向洋：读论文的三个层次 (qq.com)</a></li>
<li><a href="https://www.bilibili.com/video/BV1JL4y1j7To/?spm_id_from=0.0.header_right.fav_list.click&vd_source=de5d636c079ac45214bd34891ede8c4b">【研究生必看】如何去读一篇论文、如何去组会讲论文 &amp; 论文的笔记_哔哩哔哩_bilibili</a></li>
</ol>
]]></content>
      <categories>
        <category>利器酷</category>
        <category>方法</category>
      </categories>
      <tags>
        <tag>Reading</tag>
        <tag>Paper</tag>
        <tag>Research</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo LearningNote</title>
    <url>/p/e9b15daf.html</url>
    <content><![CDATA[<h1 id="Hexo-博客"><a href="#Hexo-博客" class="headerlink" title="Hexo 博客"></a>Hexo 博客</h1><p><a href="https://io-oi.me/tech/hexo-next-optimization/">最全详细（🗡）</a></p>
<p><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522161853970416780255223015%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=161853970416780255223015&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-53576018.first_rank_v2_pc_rank_v29&utm_term=Hexo+Github">参考博客</a></p>
<h1 id="环境搭建的准备"><a href="#环境搭建的准备" class="headerlink" title="环境搭建的准备"></a>环境搭建的准备</h1><ul>
<li><p><strong>Node.js 的安装和准备</strong></p>
<ul>
<li><img src="C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416102842874.png" alt="image-20210416102842874"></li>
</ul>
</li>
<li><p>关于<code>Node.js</code>和<code>npm</code>的介绍: <a href="https://www.cnblogs.com/duanweishi/p/7729292.html">参考博客</a></p>
<ul>
<li><p>npm 是 javascript 的<strong>包管理工具</strong></p>
</li>
<li><p>npm 与 Node.js 一起发布</p>
<ul>
<li>npm 更新频率快，需单独更新npm<code>npm install npm@latest -g</code></li>
</ul>
</li>
<li><p><strong>安装包</strong>：安装对应的包至当前目录，并创建<code>node_modules</code>文件，下载包进去</p>
<ul>
<li><code>npm install &lt;package_name</code></li>
</ul>
</li>
<li><p><strong><code>package.json</code>:</strong></p>
<ul>
<li>可以知道项目中用了什么包</li>
<li>基本的<code>package.json</code>文件：至少包含<ul>
<li>包名 name</li>
<li>版本信息 version</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>创建 <code>package.json</code></strong></p>
<ul>
<li><code>npm init</code> : 初始化<code>package.json</code>文件<ul>
<li>运行后，如实回答基本信息</li>
</ul>
</li>
<li>主要字段含义：<ul>
<li>name : 模块名，</li>
<li>version: 模块版本信息</li>
<li>description:关于模块功能简单描述，若为空，默认葱当前目录的<code>README.md</code>或者<code>README</code>读取第一行作为默认值</li>
<li>main : 模块被引入后，首先加载的文件，默认为<code>index.js</code></li>
<li>scripts : 定义一些常用命令入口</li>
</ul>
</li>
<li>npm 可以进行简单配置常用信息<ul>
<li><code>npm set init.author.email &quot;2638779206@qq.com&quot;</code></li>
<li><code>npm set init.author.name &quot;zihao&quot;</code> </li>
<li><code>npm set init.license &quot;XDU&quot;</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>安装模块</strong></p>
<ul>
<li><code>npm install</code> 会读取<code>package.json</code>以安装模块<ul>
<li>安装的模块分为两类: 生产环境需要的安装包<code>dependencies</code>.， 开发环境需要的安装包<code>devDependencies</code></li>
</ul>
</li>
<li>在安装模块时，修改<code>package.json</code><ul>
<li><code>npm install &lt;packagename&gt; --save</code></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>配置npm源：</strong></p>
<ul>
<li><p>配置国内镜像加快下载速度</p>
</li>
<li><p>临时使用 </p>
<ul>
<li>通过<code>--registry</code>: <code>npm install express --registry https://registry.npm.taobao.org</code></li>
</ul>
</li>
<li><p>全局使用：</p>
<ul>
<li>```bash<br>config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a><br>  // 配置后可通过下面方式来验证是否成功<br>  npm config get registry<br>  // 或<br>  npm info express<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* **git 的安装和准备**</span><br><span class="line">  * ![image-20210416102902488](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416102902488.png)</span><br><span class="line">* **Github账户的配置**</span><br><span class="line">  * 使用了佛跳墙VPN，解决了加载Github慢的问题</span><br><span class="line">  * 注册</span><br><span class="line">  * 创建代码库</span><br><span class="line">  * 代码库设置</span><br><span class="line">    * `Setting`</span><br><span class="line">    * `Pages`</span><br><span class="line">    * `Automatic page generator`</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 安装 Hexo</span><br><span class="line"></span><br><span class="line">* 创建`Hexo` 目录</span><br><span class="line">* `gitbash` 该目录：</span><br><span class="line">  * `npm install hexo-cli -g` ： </span><br><span class="line">    * hexo 本身是一个静态博客生成工具，具备编译markdown、凭借主题模板、生成HTML、上传Gti等基本功能，`hexo-cli`将这些功能封装为命令，提供给用户通过`hexo s`等命令调用的模块</span><br><span class="line">    * problem:![image-20210416110241054](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416110241054.png)</span><br><span class="line">    * solution ：[博客](https://blog.csdn.net/m0_46256147/article/details/104725439)</span><br><span class="line">  * `npm install hexo --save`</span><br><span class="line">    * problem :![image-20210416110617131](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416110617131.png)</span><br><span class="line">    * solution [参考博客](![image-20210416110631231](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416110631231.png))</span><br><span class="line">    * problem ![image-20210416110804200](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416110804200.png)</span><br><span class="line">    * solution [参考](https://blog.csdn.net/JZevin/article/details/107865683)</span><br><span class="line">    * problem ![image-20210416113337859](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416113337859.png)</span><br><span class="line">    * solution : [参考](https://blog.csdn.net/weixin_42677762/article/details/112554832?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&amp;spm=1001.2101.3001.4242)</span><br><span class="line">  * `hexo -v` 检查是否安装好</span><br><span class="line">    * ![image-20210416113525387](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416113525387.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 相关配置</span><br><span class="line"></span><br><span class="line">进行本地的配置</span><br><span class="line"></span><br><span class="line">* **初始化 Hexo**</span><br><span class="line"></span><br><span class="line">  * `hexo init`</span><br><span class="line"></span><br><span class="line">    * problem : ![image-20210416113819617](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416113819617.png)</span><br><span class="line"></span><br><span class="line">      * 该博客说接着上面的操作，但是上面的操作创建了json文件等，不是空的，是否可以直接在该目录下在创建一个新的文件？</span><br><span class="line"></span><br><span class="line">    * problem : 创建新文件夹后：`hexo init`</span><br><span class="line"></span><br><span class="line">      * ![image-20210416114034172](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416114034172.png)</span><br><span class="line"></span><br><span class="line">        `fatal: unable to access &#x27;https://github.com/hexojs/hexo-starter.git/&#x27;: Failed to connect to github.com port 443: Timed out`</span><br><span class="line"></span><br><span class="line">      * solution : [参考博客](https://blog.csdn.net/weixin_44041700/article/details/115599817)</span><br><span class="line"></span><br><span class="line">        * 果真是网络的问题，再查查看完此博客后，再次输入`hexo init` </span><br><span class="line">        * ![image-20210416115639944](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416115639944.png)</span><br><span class="line"></span><br><span class="line">      * 但是很慢</span><br><span class="line"></span><br><span class="line">        * 可以切换npm源至淘宝源加速：</span><br><span class="line">          * `npm install express --registry https://registry.npm.taobao.org`</span><br><span class="line">        * 半分钟就好：</span><br><span class="line">          * ![image-20210416121021641](C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210416121021641.png)</span><br><span class="line"></span><br><span class="line">  * `npm install`自动安装组件</span><br><span class="line"></span><br><span class="line">    * 无报错</span><br><span class="line"></span><br><span class="line">* **首次体验hexo**</span><br><span class="line"></span><br><span class="line">  * `hexo g`：generate 生成网站静态文件至 public 文件夹</span><br><span class="line">    * 便于查看网站生成的静态文件或者手动部署网站</span><br><span class="line">  * `hexo s`：server 启动本地服务器，用于预览主题</span><br><span class="line">    * 默认地址 : http://localhost:4000/</span><br><span class="line">    * 预览的同时可以修改文章内容或主题代码，保存后刷新页面即可</span><br><span class="line">    * 对 Hexo 根目录 `_config.yml` 的修改，需要重启本地服务器后才能预览效果</span><br><span class="line">  * `hexo new&quot;学习笔记 一&quot; `</span><br><span class="line">    * 新建标题为的文章</span><br><span class="line">    * 文章标题可在对应的md文件改</span><br><span class="line">  * `hexo d `deploy</span><br><span class="line">    * 自动生成网站静态文件，并部署到设定的仓库</span><br><span class="line">  * `hexo clean`</span><br><span class="line">    * 清除缓存文件 `db.json` 和已生成的静态文件`public`</span><br><span class="line"></span><br><span class="line"># 将 hexo 与 github page 联系起来</span><br><span class="line"></span><br><span class="line">* **配置 git 个人信息**</span><br><span class="line"></span><br><span class="line">  * 设置 GIT 的 user name 和 email</span><br><span class="line"></span><br><span class="line">    * ```bash</span><br><span class="line">      git config --global user.name &quot;ZiHao256&quot;</span><br><span class="line">      git config --global user.email &quot;2638779206@qq.com&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
<li><p>生成密钥</p>
<ul>
<li>```bash<br> ssh-keygen -t rsa -C “<a href="mailto:&#50;&#54;&#51;&#x38;&#55;&#x37;&#57;&#50;&#48;&#x36;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;">&#50;&#54;&#51;&#x38;&#55;&#x37;&#57;&#50;&#48;&#x36;&#64;&#113;&#113;&#x2e;&#x63;&#111;&#x6d;</a>“<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">      </span><br><span class="line"></span><br><span class="line">* **配置 Deployment**</span><br><span class="line"></span><br><span class="line">  * 在`_config.yml`文件中，找到Deployment：</span><br><span class="line"></span><br><span class="line">    * ```bash</span><br><span class="line">      deploy:</span><br><span class="line">        type: git</span><br><span class="line">        repo: git@github.com:ZiHao256/ZiHao256.github.io.git</span><br><span class="line">        branch: master</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="写博客、发布文章"><a href="#写博客、发布文章" class="headerlink" title="写博客、发布文章"></a>写博客、发布文章</h1><ul>
<li><p>新建一篇博客</p>
<ul>
<li><code>hexo new post &quot;title&quot;</code></li>
<li>可在<code>source\_posts</code> 中看到<code>title.md</code>文件</li>
</ul>
</li>
<li><p>新建好后，修改md文件</p>
</li>
<li><p>运行生成、部署文章：</p>
<ul>
<li><p>生成：<code>hexo g</code></p>
</li>
<li><p>部署：<code>hexo d</code></p>
<ul>
<li><p>problem 1 : </p>
<p>![image-20210416124223198](E:\LearningNotes\Hexo\Hexo 博客.assets\image-20210416124223198.png)</p>
</li>
<li><p>solution : 未安装<code>hexo-deployer-git</code>插件，在<strong>站点目录</strong>(hexo init 目录)输入<code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p><a href="https://blog.csdn.net/qq_21808961/article/details/84476504">参考博客</a></p>
</li>
<li><p>problem 2:</p>
<p>![image-20210416125451770](E:\LearningNotes\Hexo\Hexo 博客.assets\image-20210416125451770.png) solution:    <code>Please make sure you have the correct access rights and the repository exist</code>: 确保您具有正确的访问权限并且存储库存在</p>
<p>原因：公钥出现问题</p>
<p><a href="https://blog.csdn.net/qq_43705131/article/details/107965888">参考博客</a></p>
<ol>
<li>删除.ssh文件</li>
<li>重新设置用户名和邮箱</li>
<li>重新生成ssh公钥</li>
<li>配置github</li>
</ol>
</li>
</ul>
</li>
<li><p>或直接在部署前生成：</p>
<ul>
<li><code>hexo d -g #在部署前先生成</code></li>
</ul>
</li>
</ul>
</li>
<li><p>部署成功后，在<code>https://ZiHao256.github.io</code>看到生成的文章</p>
</li>
</ul>
<h1 id="主题推荐"><a href="#主题推荐" class="headerlink" title="主题推荐"></a>主题推荐</h1><ul>
<li>主题配置文件在<code>_config.yml</code></li>
</ul>
<h2 id="NexT主题配置"><a href="#NexT主题配置" class="headerlink" title="NexT主题配置"></a>NexT主题配置</h2><ul>
<li>简洁美观</li>
<li>支持不同风格</li>
<li>提供完善配置说明</li>
<li>Hexo 两份主要配置文件：名称都是<code>_config.yml</code><ul>
<li><strong>站点配置文件</strong>站点根目录下 ：Hexo 本身的配置</li>
<li><strong>主题配置文件</strong>主题目录下 ：由主题作者提供，用于配置主题相关选项</li>
</ul>
</li>
</ul>
<h3 id="1-安装NexT"><a href="#1-安装NexT" class="headerlink" title="1 安装NexT"></a>1 安装NexT</h3><ul>
<li>只需要将主题文件拷贝至 <code>themes</code> 目录下，然后修改一下配置文件</li>
<li>若熟悉 git ，建议使用 克隆最新版本的方式，之后更新可以使用 <code>git pull</code> 快速更新</li>
<li>定位至Hexo 站点目录 <code>cd 至站点目录文件</code></li>
<li>使用git checkout <code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code><ul>
<li><strong>problem</strong> : git clone 很慢</li>
<li><strong>solution</strong>  : 使用国内镜像网站:<code>github.com.cnpnjs.org</code><ul>
<li>将命令中的<code>github.com</code>换成这个</li>
<li>效果拔群</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-启用主题"><a href="#2-启用主题" class="headerlink" title="2 启用主题"></a>2 启用主题</h3><ul>
<li>当 克隆/下载 至<code>themes</code>下后，打开 <strong>站点配置文件</strong>，找到 <strong>theme</strong> 字段，将其值改为<strong>主题名</strong></li>
<li>验证是否启用成功之前，需要使用<code>hexo clean</code>清除缓存</li>
</ul>
<h3 id="3-验证主题"><a href="#3-验证主题" class="headerlink" title="3 验证主题"></a>3 验证主题</h3><ul>
<li>首先，<code>hexo g</code>生成静态文件</li>
<li>其次，启动 Hexo 本地站点，并开启调试模式(<code>--debug</code>)<ul>
<li><code>hexo s --debug</code>, 若有异常可从命令行输出，帮助debug</li>
</ul>
</li>
<li>然后，<code>https://localhost:4000</code>，检查是否运行正常</li>
<li><strong>problem:</strong> ![image-20210416144717418](E:\LearningNotes\Hexo\Hexo 博客.assets\image-20210416144717418.png)<ul>
<li><strong>solution</strong> : ![image-20210416145430740](E:\LearningNotes\Hexo\Hexo 博客.assets\image-20210416145430740.png)</li>
<li><ol>
<li>手动配置：文件名和配置文件都无问题</li>
<li>更新主题文件：</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="4-主题设定"><a href="#4-主题设定" class="headerlink" title="4 主题设定"></a>4 主题设定</h3><ul>
<li>scheme : NexT 提供的一种特性，可提供多种外观<ul>
<li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 </li>
<li>Mist - Muse 的紧凑版本，整洁有序的单栏外观 </li>
<li>Pisces - 双栏 Scheme，小家碧玉似的清新</li>
</ul>
</li>
</ul>
<h3 id="5-设置语言"><a href="#5-设置语言" class="headerlink" title="5 设置语言"></a>5 设置语言</h3><ul>
<li>编辑站点配置文件，将<code>language</code>字段设置成需要的语言：<ul>
<li><code>language: zh-Hans</code></li>
</ul>
</li>
</ul>
<h3 id="6-设置菜单"><a href="#6-设置菜单" class="headerlink" title="6 设置菜单"></a>6 设置菜单</h3><ul>
<li><p><strong>菜单配置</strong>三个部分：<strong>主题配置文件</strong> 中 对应的字段<code>menu</code></p>
<ul>
<li><strong>菜单项：</strong>名称和链接<ul>
<li><code>item name:link</code><ul>
<li>item name 是一个名称，不直接显示在页面，而是用于匹配图标和翻译</li>
</ul>
</li>
</ul>
</li>
<li><strong>菜单项的显示文本</strong></li>
<li><strong>菜单项对应的图标</strong><ul>
<li>NexT 使用 <code>Font Awesome</code>提供的图标</li>
</ul>
</li>
</ul>
</li>
<li><p>示例：若站点在子目录中，去掉连接前的 <code>/</code></p>
<ul>
<li>```<br>menu:<br>  home: /<br>  archives: /archives<br>  #about: /about<br>  #categories: /categories<br>  tags: /tags<br>  #commonweal: /404.html<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* **NexT 默认的菜单项：**</span><br><span class="line"></span><br><span class="line">  * *键值*：**home**</span><br><span class="line">    * *设定值*：home:/</span><br><span class="line">    * *显示文本*：主页</span><br><span class="line">  * **archives**</span><br><span class="line">    * archives:/archives</span><br><span class="line">    * 归档页</span><br><span class="line">  * **categories**</span><br><span class="line">    * categories:/categories</span><br><span class="line">    * 分类页</span><br><span class="line">  * **tags**</span><br><span class="line">    * tags:/tags</span><br><span class="line">    * 标签页</span><br><span class="line">  * **about**</span><br><span class="line">    * about:/about</span><br><span class="line">    * 关于页</span><br><span class="line">  * **commonweal**</span><br><span class="line">    * commonweal:/404.html</span><br><span class="line">    * 公益 404</span><br><span class="line"></span><br><span class="line">* 设置菜单项的**显示文本：**</span><br><span class="line"></span><br><span class="line">  * Hexo 生成的时候，使用**菜单项的名称**查找对应的语言翻译，并且提取显示文本</span><br><span class="line">  * 显示文本在NexT 主题目录下的`language/&#123;language&#125;.yml`</span><br><span class="line"></span><br><span class="line">* 设置菜单项的**图标**，对应的字段`menu_icons`</span><br><span class="line"></span><br><span class="line">  * 设定格式`item name:icon name`</span><br><span class="line"></span><br><span class="line">    * icon name是Font Awesome 图表的名字</span><br><span class="line">    * enable 可用于是否显示图标</span><br><span class="line"></span><br><span class="line">  * 示例</span><br><span class="line"></span><br><span class="line">    * ```</span><br><span class="line">      menu_icons:</span><br><span class="line">        enable: true</span><br><span class="line">        # Icon Mapping.</span><br><span class="line">        home: home</span><br><span class="line">        about: user</span><br><span class="line">        categories: th</span><br><span class="line">        tags: tags</span><br><span class="line">        archives: archive</span><br><span class="line">        commonweal: heartbeat</span><br><span class="line">      </span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="7-侧栏"><a href="#7-侧栏" class="headerlink" title="7 侧栏"></a>7 侧栏</h3><ul>
<li><p><strong>默认情况</strong>：侧栏仅在文章页面（拥有目录列表时）才显示，放于右侧</p>
</li>
<li><p>可通过控制 主题配置文件 <code>sidebar</code>字段控制侧栏</p>
<ul>
<li><p><strong>侧栏的位置</strong>，<code>sidebar.position</code>, 目前仅Pisces Scheme支持</p>
<ul>
<li>left</li>
<li>right</li>
</ul>
</li>
<li><p><strong>侧栏显示的时机</strong>，<code>sidebar.display</code></p>
<ul>
<li><p><strong>post :</strong> 默认行为，在文章页面（拥有目录列表）时显示</p>
</li>
<li><p><strong>always:</strong> 在所有页面中都显示</p>
</li>
<li><p><strong>remove:</strong> 完全移除</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="8-头像"><a href="#8-头像" class="headerlink" title="8 头像"></a>8 头像</h3><ul>
<li>编辑 站点配置文件， 新增<code>avatar</code>字段，将其值设置为头像的链接地址：<ul>
<li>完整的互联网URL：</li>
<li>站点内的地址：<code>将头像放置主题目录下的 source/uploads/ （新建uploads目录若不存在） 配置为：avatar: /uploads/avatar.png 或者 放置在 source/images/ 目录下 , 配置为：avatar: /images/avatar.png</code></li>
</ul>
</li>
</ul>
<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="生成-分类-页并添加-type-属性"><a href="#生成-分类-页并添加-type-属性" class="headerlink" title="生成 分类 页并添加 type 属性"></a>生成 分类 页并添加 type 属性</h2><ul>
<li><code>hexo new page categories</code>: 生成分类页</li>
<li>找到<code>source/categories/index.md</code><ul>
<li>添加<code>type: &quot;xxx&quot;</code></li>
</ul>
</li>
</ul>
<h2 id="给文章添加-categories-属性"><a href="#给文章添加-categories-属性" class="headerlink" title="给文章添加 categories 属性"></a>给文章添加 categories 属性</h2><ul>
<li>打开文章，写入<code>categories : -xxx</code></li>
<li>hexo 不会产生两个分类，<strong>而是把分类嵌套</strong></li>
</ul>
<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>与分类类似</p>
<h1 id="个人博客主题优化"><a href="#个人博客主题优化" class="headerlink" title="个人博客主题优化"></a>个人博客主题优化</h1><p><a href="https://www.jianshu.com/p/efbeddc5eb19">参考博客</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/60424755">参考博客</a></p>
<p><a href="https://itrhx.blog.csdn.net/article/details/85420403?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-2.control">cankao</a></p>
<h2 id="统计站点的总访问量"><a href="#统计站点的总访问量" class="headerlink" title="统计站点的总访问量"></a>统计站点的总访问量</h2><h2 id="让百度收录-blog"><a href="#让百度收录-blog" class="headerlink" title="让百度收录 blog"></a>让百度收录 blog</h2><h2 id="底部小心心增加点击动画"><a href="#底部小心心增加点击动画" class="headerlink" title="底部小心心增加点击动画"></a>底部小心心增加点击动画</h2><p>博客1：</p>
<h3 id="3-1-添加头像"><a href="#3-1-添加头像" class="headerlink" title="3.1 添加头像"></a>3.1 添加头像</h3><h3 id="3-2-设置头像边框为圆形"><a href="#3-2-设置头像边框为圆形" class="headerlink" title="3.2 设置头像边框为圆形"></a>3.2 设置头像边框为圆形</h3><h3 id="3-3-特效：鼠标放置头像上旋转"><a href="#3-3-特效：鼠标放置头像上旋转" class="headerlink" title="3.3 特效：鼠标放置头像上旋转"></a>3.3 特效：鼠标放置头像上旋转</h3><h2 id="4-浏览页面时，显示当前浏览进度"><a href="#4-浏览页面时，显示当前浏览进度" class="headerlink" title="4 浏览页面时，显示当前浏览进度"></a>4 浏览页面时，显示当前浏览进度</h2><h2 id="5-侧边栏设置"><a href="#5-侧边栏设置" class="headerlink" title="5 侧边栏设置"></a>5 侧边栏设置</h2><h3 id="5-1-设置侧边栏社交链接"><a href="#5-1-设置侧边栏社交链接" class="headerlink" title="5.1 设置侧边栏社交链接"></a>5.1 设置侧边栏社交链接</h3><h3 id="5-2-设置侧边栏社交图标"><a href="#5-2-设置侧边栏社交图标" class="headerlink" title="5.2 设置侧边栏社交图标"></a>5.2 设置侧边栏社交图标</h3><h3 id="5-3-RSS"><a href="#5-3-RSS" class="headerlink" title="5.3 RSS"></a>5.3 RSS</h3><p>配置</p>
<h3 id="5-4-友情链接"><a href="#5-4-友情链接" class="headerlink" title="5.4 友情链接"></a>5.4 友情链接</h3><h2 id="6-主页文章添加边框阴影效果"><a href="#6-主页文章添加边框阴影效果" class="headerlink" title="6 主页文章添加边框阴影效果"></a>6 主页文章添加边框阴影效果</h2><h2 id="7-修改文章间分割线"><a href="#7-修改文章间分割线" class="headerlink" title="7 修改文章间分割线"></a>7 修改文章间分割线</h2><h2 id="8-代码块自定义样式"><a href="#8-代码块自定义样式" class="headerlink" title="8 代码块自定义样式"></a>8 代码块自定义样式</h2><h2 id="9-开启版权声明"><a href="#9-开启版权声明" class="headerlink" title="9 开启版权声明"></a>9 开启版权声明</h2><h2 id="10-自定义文章底部版权声明"><a href="#10-自定义文章底部版权声明" class="headerlink" title="10 自定义文章底部版权声明"></a>10 自定义文章底部版权声明</h2><h2 id="11-在右上角或者左上角实现fork-me-on-github"><a href="#11-在右上角或者左上角实现fork-me-on-github" class="headerlink" title="11 在右上角或者左上角实现fork me on github"></a>11 在右上角或者左上角实现<code>fork me on github</code></h2><h2 id="12-修改文章底部带-号的标签"><a href="#12-修改文章底部带-号的标签" class="headerlink" title="12 修改文章底部带 # 号的标签"></a>12 修改文章底部带 # 号的标签</h2><h2 id="13-添加顶部加载条"><a href="#13-添加顶部加载条" class="headerlink" title="13 添加顶部加载条"></a>13 添加顶部加载条</h2><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><h2 id="15-修改网页底部"><a href="#15-修改网页底部" class="headerlink" title="15 修改网页底部"></a>15 修改网页底部</h2><h3 id="1-修改桃心"><a href="#1-修改桃心" class="headerlink" title="1 修改桃心"></a>1 修改桃心</h3><h2 id="16"><a href="#16" class="headerlink" title="16"></a>16</h2><h2 id="23-新建404界面"><a href="#23-新建404界面" class="headerlink" title="23 新建404界面"></a>23 新建404界面</h2><h2 id="32-修改打赏字体不闪动"><a href="#32-修改打赏字体不闪动" class="headerlink" title="32 修改打赏字体不闪动"></a>32 修改打赏字体不闪动</h2><h2 id="39-添加网易云音乐"><a href="#39-添加网易云音乐" class="headerlink" title="39 添加网易云音乐"></a>39 添加网易云音乐</h2><h2 id="设置显示目录"><a href="#设置显示目录" class="headerlink" title="设置显示目录"></a>设置显示目录</h2><h2 id="统计字数"><a href="#统计字数" class="headerlink" title="统计字数"></a>统计字数</h2><p>博客2</p>
<h2 id="加宠物"><a href="#加宠物" class="headerlink" title="加宠物"></a>加宠物</h2><h2 id="网页底部的动态桃心图像"><a href="#网页底部的动态桃心图像" class="headerlink" title="网页底部的动态桃心图像"></a>网页底部的动态桃心图像</h2><h2 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a>404 页面</h2><h1 id="访客数访问次数"><a href="#访客数访问次数" class="headerlink" title="访客数访问次数"></a>访客数访问次数</h1><p><a href="https://blog.csdn.net/baidu_34310405/article/details/102665373">https://blog.csdn.net/baidu_34310405/article/details/102665373</a></p>
<h1 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h1><p><a href="https://tding.top/archives/761b6f4d.html">https://tding.top/archives/761b6f4d.html</a></p>
<h1 id="添加跳动的心"><a href="#添加跳动的心" class="headerlink" title="添加跳动的心"></a>添加跳动的心</h1><p><a href="https://io-oi.me/tech/hexo-next-optimization/#%E8%AE%A9%E9%A1%B5%E8%84%9A%E7%9A%84%E5%BF%83%E8%B7%B3%E5%8A%A8%E8%B5%B7%E6%9D%A5">https://io-oi.me/tech/hexo-next-optimization/#%E8%AE%A9%E9%A1%B5%E8%84%9A%E7%9A%84%E5%BF%83%E8%B7%B3%E5%8A%A8%E8%B5%B7%E6%9D%A5</a></p>
<h1 id="侧栏加入运行时间"><a href="#侧栏加入运行时间" class="headerlink" title="侧栏加入运行时间"></a>侧栏加入运行时间</h1><p><a href="https://io-oi.me/tech/hexo-next-optimization/#%E4%BE%A7%E6%A0%8F%E5%8A%A0%E5%85%A5%E5%B7%B2%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4">https://io-oi.me/tech/hexo-next-optimization/#%E4%BE%A7%E6%A0%8F%E5%8A%A0%E5%85%A5%E5%B7%B2%E8%BF%90%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4</a></p>
<h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><p><a href="https://zhuanlan.zhihu.com/p/266119565">https://zhuanlan.zhihu.com/p/266119565</a></p>
<h1 id="夜间模式切换‘"><a href="#夜间模式切换‘" class="headerlink" title="夜间模式切换‘"></a>夜间模式切换‘</h1><p><a href="https://www.techgrow.cn/posts/abf4aee1.html">https://www.techgrow.cn/posts/abf4aee1.html</a></p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>博客更新</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>DIY</tag>
      </tags>
  </entry>
  <entry>
    <title>Lab 0</title>
    <url>/p/20b5d973.html</url>
    <content><![CDATA[<h1 id="Lab-0"><a href="#Lab-0" class="headerlink" title="Lab 0"></a>Lab 0</h1><p>[toc]</p>
<ul>
<li>ucore运行环境：X86 硬件模拟器，QEMU、VirtualBox、VMware Player</li>
<li>ucore开发环境：GCC的gcc、gas、ld和MAKE，或集成开发环境Eclipse-CDT</li>
<li>分析源代码：understand</li>
<li>软件开发版本管理：GIT、SVN</li>
<li>比较文件和目录的不同，发现不同实验中的差异性和进行文件合并操作：meld、kdiff3、UltraCompare</li>
<li>调试（debug）发现设计中得出错误：gdb（配合QEMU）等调试工具软件</li>
</ul>
<h1 id="1-安装一个操作系统的开发过程："><a href="#1-安装一个操作系统的开发过程：" class="headerlink" title="1 安装一个操作系统的开发过程："></a>1 <strong>安装一个操作系统的开发过程：</strong></h1><ol>
<li><strong>Bootloader+toy ucore:</strong> 理解操作系统启动前的硬件状态和要做的准备工作，了解运行操作系统的外设硬件支持，操作系统如何加载到内存中，理解两类中断—“外设中断”，“陷阱中断”，内核态和用户态的区别；</li>
<li><strong>物理内存管理：</strong>理解x86分段/分页模式，了解操作系统如何管理物理内存；</li>
<li><strong>虚拟内存管理：</strong>理解OS虚存的基本原理和目标，以及如何结合页表+中断处理（缺页故障处理）来实现虚存的目标，如何实现基于页的内存替换算法和替换过程；</li>
<li><strong>内核线程管理：</strong>理解内核线程创建、执行、切换和结束的动态管理过程，以及内核线程的运行周期等；</li>
<li><strong>用户进程管理：</strong>理解用户进程创建、执行、切换和结束的动态管理过程，以及在用户态通过系统调用得到内核中各种服务的过程；</li>
<li><strong>处理器调度：</strong>理解操作系统的调度过程和调度算法；</li>
<li><strong>同步互斥与进程间通信：</strong>理解同步互斥的具体实现以及对系统性能的影响，研究死锁产生的原因，如何避免死锁，以及线程/进程间如何进行信息交换和共享；</li>
<li><strong>文件系统：</strong>理解文件系统的具体实现，与进程管理和内存管理等的关系，缓存对操作系统IO访问的性能改进，虚拟文件系统（VFS）、buffer cache和disk driver之间的关系。</li>
</ol>
<ul>
<li>每个开发步骤都是建立在上一个步骤之上的</li>
<li>从理解操作系统原理到实践操作系统设计与实现的探索过程</li>
</ul>
<p><img src="https://static.sitestack.cn/projects/simple_os_book/bf9d40a8440c97f51c06416e01c91a5f.png" alt="ucore操作系统架构"></p>
<h1 id="2-实验环境"><a href="#2-实验环境" class="headerlink" title="2 实验环境"></a>2 实验环境</h1><h2 id="2-1-使用-Linux-实验环境"><a href="#2-1-使用-Linux-实验环境" class="headerlink" title="2.1 使用 Linux 实验环境"></a>2.1 使用 Linux 实验环境</h2><ul>
<li><p>安装 Ubuntu Linux 20.04</p>
<ul>
<li><a href="https://blog.csdn.net/qq_31939617/article/details/100114546">参考博客</a></li>
<li>姓名：zihao</li>
<li>密码：123456</li>
<li>注意：不要 skip</li>
</ul>
</li>
<li><p>命令行方式的编译、调试、运行操作系统</p>
</li>
<li><p>命令模式的基本结构和概念：实现需要的所有操作</p>
</li>
<li><p>进入命令模式：GNOME菜单-&gt;附件-&gt;终端</p>
</li>
<li><p>命令行终端提示符：表示计算机已就绪，等待用户输入操作指令。此时输入任何指令按回车后，该指令将会被提交到计算机运行</p>
</li>
<li><p><strong>常用指令</strong>：</p>
<ul>
<li>ls：查询文件列表<ul>
<li>ls /: 列出根目录</li>
<li>ls -l: 列出更详细的文件清单</li>
<li>ls -a:列出包括隐藏文件（以.开头的文件）</li>
</ul>
</li>
<li>pwd：查询当前所在目录</li>
<li>cd /目录路径 : 进入其他目录</li>
<li>echo “字符串”: 在屏幕输出字符</li>
<li>cat：显示文件内容<ul>
<li>less/more作为选项显示比较大的文件内容</li>
</ul>
</li>
<li>cp: 复制文件</li>
<li>mv：移动文件</li>
<li>touch：建立一个空文本文件</li>
<li>mkdir：建立一个目录</li>
<li>rm：删除文件/目录</li>
</ul>
</li>
<li><p><strong>选项</strong>：</p>
<ul>
<li>-p: 让系统显示某一项的类型，比如是文件/文件夹/快捷链接</li>
<li>-i（interactive）：在系统删除操作前输出确定指示</li>
<li>-r（recursive）: 删除文件夹</li>
</ul>
</li>
<li><p><strong>其他基本指令</strong>：</p>
<ul>
<li>ps：查询当前进程<ul>
<li>列出所启动的所有进程</li>
<li>-a : 列出所有的（包括其他用户）</li>
<li>ps auxww:  列出除一些特殊进程以外的所有进程，并会以一个高可读的形式显示结果，每一个进程都会有较为详细的解释</li>
</ul>
</li>
</ul>
</li>
<li><p>控制流程</p>
<ul>
<li><p>输入/输出</p>
<ul>
<li>input：读取通过标准输入设备输入的信息</li>
<li>output：输出指定的输出内容。在遇到操作错误时，系统会自动调用这个命令输出标准错误提示</li>
</ul>
</li>
<li><p>重定向</p>
</li>
<li><p>管道：把几个简单命令联合成为复杂的功能</p>
<ul>
<li><code>|</code><ul>
<li><code>grep -i command &lt; myfile | sort &gt; result.text</code></li>
<li>搜索myfile中的命令，将输出分类并写入到分类文件result.text</li>
</ul>
</li>
</ul>
</li>
<li><p>后台进程：要启动一个进程到后台，追加 &amp; 到命令后面</p>
<ul>
<li><code>sleep 60 &amp;</code></li>
<li>睡眠命令在后台运行，宁依然可以与计算机交互。除了不同步启动命令外，</li>
<li>如果一个命令将占用很多时间，想让其放入后台运行</li>
<li><blockquote>
<p>sleep 60</p>
<p>&lt; ctrl z&gt;   # 停止</p>
<p>bg  #转入后台</p>
<p>fg  # 转回前台</p>
</blockquote>
</li>
<li><code>ctrl c</code>:杀死一个前台程序</li>
</ul>
</li>
</ul>
</li>
<li><p>环境变量</p>
</li>
<li><p>获得软件包</p>
<ul>
<li><p>命令行获取软件包</p>
<ul>
<li><p><code>apt-get</code>: 自动从互联网软件库中搜索、安装、升级以及卸载软件或者操作系统</p>
</li>
<li><p>一般需要root 执行权限</p>
</li>
<li><p>语法 <code>sudo apt-get install gcc</code></p>
</li>
<li><p>常见 apt 命令：</p>
<ul>
<li><blockquote>
<p>apt-get install <code>&lt;package&gt;</code> # 下载<code>&lt;package&gt;</code> 以及所依赖的软件包，同时进行软件包的安装或者升级</p>
<p>apt-get remove <code>&lt;package&gt;</code> #移除<code>&lt;package&gt;</code>以及所依赖的软件包</p>
<p>apt-cache search <code>&lt;pattern&gt;</code> #搜索满足pattern 的软件包</p>
<p>apt-cache show/showpkg <code>&lt;package&gt;</code> #显示软件包 <code>&lt;package&gt;</code> 的完整描述</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>解决 apt 下载速度太慢：</strong></p>
<ul>
<li><a href="https://blog.csdn.net/qq_34246778/article/details/92849180">选择最佳服务器</a></li>
</ul>
</li>
<li><p>图形界面软件包获取</p>
<ul>
<li><code>菜单栏-&gt;系统管理 -&gt; 新德里软件包管理器</code></li>
</ul>
</li>
<li><p>配置升级源</p>
<ul>
<li><blockquote>
<p>Ubuntu的软件包获取依赖升级源，可以通过修改 “/etc/apt/sources.list” 文件来修改升级源（需要 root 权限）；或者修改新立得软件包管理器中 “设置 &gt; 软件库”。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p>查找帮助文件</p>
<ul>
<li>命令 <code>man</code></li>
<li>对 Linux 下常用命令、安装软件、以及C语言常用函数进行查询</li>
<li>语法 <code>man 命令</code></li>
</ul>
</li>
</ul>
<h2 id="2-2-可能用到的软件"><a href="#2-2-可能用到的软件" class="headerlink" title="2.2 可能用到的软件"></a>2.2 可能用到的软件</h2><ul>
<li><p><strong>编辑器</strong></p>
<ul>
<li><p>gnome</p>
</li>
<li><p><strong>Vim</strong></p>
<ul>
<li><p>下载安装VIm <code>sudo spt-get install vim</code></p>
</li>
<li><p>查看 vim 版本命令 <code>vim --version</code></p>
</li>
<li><p>编辑配置文件至 <code>~/.vimrc</code></p>
<ul>
<li><blockquote>
<p>在启动vim时，当前用户根目录下的.vimrc文件会被自动读取，该文件可以包含一些设置甚至脚本，所以，一般情况下把.vimrc文件创建在当前用户的根目录下比较方便</p>
</blockquote>
</li>
</ul>
</li>
<li><blockquote>
<p>```<br>set nocompatible<br>set encoding=utf-8<br>set fileencodings=utf-8,chinese<br>set tabstop=4<br>set cindent shiftwidth=4<br>set backspace=indent,eol,start<br>autocmd Filetype c set omnifunc=ccomplete#Complete<br>autocmd Filetype cpp set omnifunc=cppcomplete#Complete<br>set incsearch<br>set number<br>set display=lastline<br>set ignorecase<br>syntax on<br>set nobackup<br>set ruler<br>set showcmd<br>set smartindent<br>set hlsearch<br>set cmdheight=1<br>set laststatus=2<br>set shortmess=atI<br>set formatoptions=tcrqn<br>set autoindent </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* **exuberant-ctags:** 为程序语言对象生成索引，其结果能够被一个文本编辑器或者其他工具简捷迅速的定位</span><br><span class="line"></span><br><span class="line"># 3 了解编程开发调试的基本工具</span><br><span class="line"></span><br><span class="line">## 3.1 gcc 的基本用法</span><br><span class="line"></span><br><span class="line">* 使用 vim 编辑一个 .c 文件</span><br><span class="line">* 用 gcc 编译文件：`gcc -Wall hello.c -o hello`</span><br><span class="line"></span><br><span class="line"> * &gt; 该命令将文件‘hello.c’中的代码**编译**为机器码并**存储**在可执行文件 ‘hello’中。机器码的文件名是通过 -o 选项指定的。该选项通常作为命令行中的最后一个参数。如果被省略，输出文件默认为 ‘a.out</span><br><span class="line"></span><br><span class="line">* `-Wall`: 开启编译器几乎所有常用的警告</span><br><span class="line">* 运行可执行文件：输入可执行文件的路径</span><br><span class="line"></span><br><span class="line"> * `./hello`</span><br><span class="line"> * &gt; 该命令将可执行文件**载入内存**，并**使CPU开始执行**其包含的指令</span><br><span class="line"></span><br><span class="line">./ 当前目录</span><br><span class="line"></span><br><span class="line">因此 `./hello`: 载入并执行当前目录下的可执行文件 hello</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 3.1.1 AT &amp; T汇编基本语法</span><br><span class="line"></span><br><span class="line">* Ucore 用的是 AT&amp;T 格式的汇编</span><br><span class="line"></span><br><span class="line"> * 1.**寄存器引用**： 在寄存器号前加 `%`</span><br><span class="line"> * 2.**操作数顺序**：从左到右</span><br><span class="line"> * 3.**立即数**：在数前面加 `$`</span><br><span class="line">   * 16 进制常数：`0x $`</span><br><span class="line"> * 4**.符号常数**：直接引用</span><br><span class="line">   * 在前加 `$`：引用符号地址</span><br><span class="line"> * 5.**操作数长度**：加在指令后</span><br><span class="line">   * b : 8-bit</span><br><span class="line">   * w: 16-bit</span><br><span class="line">   * l: 32-bit</span><br><span class="line">   * 若没有指定操作数长度，编译器按照**目标操作数**的长度来设置</span><br><span class="line"> * 6**.内存引用**：</span><br><span class="line">   * Intel 格式的简介内存引用：</span><br><span class="line">     * `section:[base+index*scale+displacement]`</span><br><span class="line">   * AT&amp;T 格式的间接内存引用：</span><br><span class="line">     * `section:displacement(base,index,scale)`</span><br><span class="line">* 与 Intel格式的汇编的不同</span><br><span class="line"></span><br><span class="line"> * </span><br><span class="line"> * ```</span><br><span class="line">   * 寄存器命名原则</span><br><span class="line">           AT&amp;T: %eax                      Intel: eax</span><br><span class="line">       * 源/目的操作数顺序 </span><br><span class="line">           AT&amp;T: movl %eax, %ebx           Intel: mov ebx, eax</span><br><span class="line">       * 常数/立即数的格式　</span><br><span class="line">           AT&amp;T: movl $_value, %ebx        Intel: mov eax, _value</span><br><span class="line">         把value的地址放入eax寄存器</span><br><span class="line">           AT&amp;T: movl $0xd00d, %ebx        Intel: mov ebx, 0xd00d</span><br><span class="line">       * 操作数长度标识 </span><br><span class="line">           AT&amp;T: movw %ax, %bx             Intel: mov bx, ax</span><br><span class="line">       * 寻址方式 </span><br><span class="line">           AT&amp;T:   immed32(basepointer, indexpointer, indexscale)</span><br><span class="line">           Intel:  [basepointer + indexpointer × indexscale + imm32)</span><br></pre></td></tr></table></figure></blockquote>
</li>
</ul>
</li>
<li><p>OS 工作于保护模式下时，用 32 位线性地址，所以在计算地址时不用考虑 segment ：offse</p>
</li>
<li><p>上式中的地址 <code>immed32+basepointer+indexpointer*indexscale</code></p>
</li>
<li><p>```</p>
<pre><code>* 直接寻址 
        AT&amp;T:  foo                         Intel: [foo]
        foo是一个全局变量。注意加上$是表示地址引用，不加是表示值引用。对于局部变量，可以通过堆栈指针引用。

* 寄存器间接寻址 
        AT&amp;T: (%eax)                        Intel: [eax]

* 变址寻址 
        AT&amp;T: _variable(%eax)               Intel: [eax + _variable]
        AT&amp;T: _array( ,%eax, 4)             Intel: [eax × 4 + _array]
        AT&amp;T: _array(%ebx, %eax,8)          Intel: [ebx + eax × 8 + _array]
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 3.1.4 GCC 基本内联汇编</span><br><span class="line"></span><br><span class="line">* GCC 支持在 C++ 代码中嵌入汇编代码：GCC Inline ASM——GCC 内联汇编</span><br><span class="line"></span><br><span class="line">  * 有利于将一些C++无法表达的指令直接嵌入</span><br><span class="line">  * 允许我们直接写汇编，来编写简洁代码</span><br><span class="line">* GCC 提供了两内联汇编语句（Inline asm statements）:</span><br><span class="line"></span><br><span class="line">  * 基本内联汇编语句（basic inline asm statements）</span><br><span class="line">    * 格式：`asm(&quot;statements&quot;);`</span><br><span class="line">  * 扩展内联汇编语句（extended inline asm statements）</span><br><span class="line">* `&quot;asm&quot;`和 `“_asm_”`的含义一致: 声明一个内联汇编表达式</span><br><span class="line"></span><br><span class="line">  * asm 是 GCC 关键字 asm的宏定义</span><br><span class="line">    * `#define _asm_ asm`</span><br><span class="line">* 若有多行汇编，每行最后加 `\n\t`</span><br><span class="line"></span><br><span class="line">  * \n : 换行符</span><br><span class="line">  * \t : tab符号</span><br><span class="line">  * 为了 使得 gcc 在编译内联汇编代码，成为一般的汇编代码时能够保证换行，和有一定的空格</span><br><span class="line">  * GCC 编译出来的汇编代码就是双引号中的内容</span><br><span class="line">* gcc 在处理汇编时，把asm（）的内容打印到汇编文件中，格式控制字符是必要的</span><br><span class="line">* ```</span><br><span class="line">      asm(&quot;movl %eax, %ebx&quot;);</span><br><span class="line">      asm(&quot;xorl %ebx, %edx&quot;);</span><br><span class="line">      asm(&quot;movl $0, _boo);</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>在上面的例子中，由于我们在<strong>内联汇编</strong>中改变了 edx 和 ebx 的值，但是由于 gcc 的特殊的处理方法，即先形成汇编文件，再交给 GAS 去汇编，所以 GAS 并不知道我们已经改变了 edx和 ebx 的值，如果程序的上下文需要 edx 或 ebx 作其他内存单元或变量的暂存，就会产生没有预料的多次赋值，引起严重的后果。对于变量 _boo也存在一样的问题。为了解决这个问题，就要用到<strong>扩展 GCC 内联汇编语法</strong>。</p>
</blockquote>
</li>
</ul>
<h3 id="3-1-5-GCC-扩展内联汇编"><a href="#3-1-5-GCC-扩展内联汇编" class="headerlink" title="3.1.5 GCC 扩展内联汇编"></a>3.1.5 GCC 扩展内联汇编</h3><p><a href="https://blog.csdn.net/u014160900/article/details/44900303">参考博客</a></p>
<ul>
<li><blockquote>
<pre><code>#define read_cr0() (&#123; \
 unsigned int __dummy; \
 __asm__( \
     &quot;movl %%cr0,%0\n\t&quot; \
     :&quot;=r&quot; (__dummy)); \ 
 __dummy; \
&#125;)
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">* GCC 扩展内联汇编基本格式</span><br><span class="line"></span><br><span class="line"> * &gt; asm [volatile] (Assembler Template</span><br><span class="line"></span><br><span class="line">    : Output operands</span><br><span class="line"></span><br><span class="line">    [ : Input Operands</span><br><span class="line"></span><br><span class="line">    [ : Clobbers  ] ] )</span><br><span class="line"></span><br><span class="line"> * asm 代表汇编代码的开始</span><br><span class="line"> * [volatile] : 可选项，避免 asm 指令被删除、移动或组合</span><br><span class="line"> * 指令 `“movl %%cr0,%0\n\t”`</span><br><span class="line"> * 数字前缀：`%1`, 表示使用寄存器的样板操作数</span><br><span class="line"></span><br><span class="line">   * 指令中几个操作数，表示有几个变量需要与寄存器结合，由gcc在编译时根据后面的输出部分和输入部分的约束条件进行相应的处理</span><br><span class="line">   * 可使用的操作数总数取决于具体CPU中通用寄存器的数量</span><br><span class="line">   * `%%cr0`: 两个 % ，表示用到具体的寄存器</span><br><span class="line"> * Output Operands list：输出部分，用以规定对输出变量（目标操作数）如何与寄存器结合的约束（constraint）。输出部分可以有多个约束，以逗号分开</span><br><span class="line"></span><br><span class="line">   * 每个约束语法：`“=约束字母” 关于变量结合的约束`</span><br><span class="line">   * `:&quot;=r&quot; (_dummy)`</span><br><span class="line"></span><br><span class="line">     * =r 表示相应的目标操作数（%0），可以使用任何一个通用寄存器，并且变量 _dummy 存放在这个寄存器中</span><br><span class="line">   * `:&quot;=m&quot; (_dummy)`</span><br><span class="line"></span><br><span class="line">     * =m 表示相应的目标操作数是存放在内存单元 _dummy 中</span><br><span class="line">   * 几个主要的约束字母</span><br><span class="line"></span><br><span class="line">     | 字母       | 含义                                             |</span><br><span class="line">     | ---------- | ------------------------------------------------ |</span><br><span class="line">     | m, v, o    | 内存单元                                         |</span><br><span class="line">     | R          | 任何通用寄存器                                   |</span><br><span class="line">     | Q          | 寄存器eax, ebx, ecx,edx之一                      |</span><br><span class="line">     | I, h       | 直接操作数                                       |</span><br><span class="line">     | E, F       | 浮点数                                           |</span><br><span class="line">     | G          | 任意                                             |</span><br><span class="line">     | a, b, c, d | 寄存器eax/ax/al, ebx/bx/bl, ecx/cx/cl或edx/dx/dl |</span><br><span class="line">     | S, D       | 寄存器esi或edi                                   |</span><br><span class="line">     | I          | 常数（0～31）                                    |</span><br><span class="line"> * ==Input Operand list: 输入部分==</span><br><span class="line"></span><br><span class="line">   * 与输出部分相似，但没有 `=`</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line"></span><br><span class="line">### 3.1.6 **Extended Asm**</span><br><span class="line"></span><br><span class="line">[参考博客](https://www.jianshu.com/p/1782e14a0766)</span><br><span class="line"></span><br><span class="line">* 内联函数：在C语言中，指定编译器将一个函数代码直接复制到调用其代码的地方执行。</span><br><span class="line"></span><br><span class="line"> * 内联函数降低了函数的调用开销</span><br><span class="line"> * 指定编译器将一个函数处理为内联函数，只要在函数申明前加上 inline 关键字</span><br><span class="line">* 内联汇编：用汇编语句写成的内联函数</span><br><span class="line"></span><br><span class="line"> * GCC（CNU Compiler Collection for Linux） 中声明一个内联汇编函数，用 asm 关键字</span><br><span class="line"> * 操作 C 语言变量</span><br><span class="line">* 在扩展形式中，可以指定操作数，选择输入输出寄存器，指明要修改的寄存器列表</span><br><span class="line">* 形式：</span><br><span class="line"></span><br><span class="line"> * ```cpp</span><br><span class="line">   asm ( assembler template</span><br><span class="line">           : output operands                /* optional */</span><br><span class="line">           : input operands                   /* optional */</span><br><span class="line">           : list of clobbered registers   /* optional */</span><br><span class="line">   );</span><br></pre></td></tr></table></figure>
</code></pre>
</blockquote>
<ul>
<li><p><code>assembler template</code>: 汇编指令部分</p>
</li>
<li><p>括号内的operands：C 语言表达式中常量字符串，不同部分之间用冒号分隔</p>
<p>相同部分语句中的每个小部分用逗号分隔</p>
<p>最多指定10个操作数</p>
</li>
</ul>
</li>
<li><p>若没有 output operands ,有input operands，需要保留output 前的冒号</p>
<ul>
<li><p>```cpp<br>asm ( “cld\n\t”</p>
<pre><code>      &quot;rep\n\t&quot;
      &quot;stosl&quot;
     : /* no output registers */
     : &quot;c&quot; (count), &quot;a&quot; (fill_value), &quot;D&quot; (dest)
     : &quot;%ecx&quot;, &quot;%edi&quot;
  );
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 例子：用汇编代码把a的值赋给b</span><br><span class="line"></span><br><span class="line">  * ```php</span><br><span class="line">    int a=10, b;</span><br><span class="line">    asm ( &quot;movl %1, %%eax;</span><br><span class="line">               movl %%eax, %0;&quot;</span><br><span class="line">              :&quot;=r&quot;(b)           /* output */</span><br><span class="line">              :&quot;r&quot;(a)              /* input */</span><br><span class="line">              :&quot;%eax&quot;         /* clobbered register */</span><br><span class="line">    );</span><br></pre></td></tr></table></figure>

<ul>
<li>b 是输出操作数，用 %0 访问</li>
<li>a 是输入操作数，用 %1 访问</li>
<li>r 是constraint：让 GCC 自己选择一个寄存器存储变量a<ul>
<li>输出部分constraint 前需要 = 修饰</li>
</ul>
</li>
<li>用 %% 和 % 区分操作数和寄存器<ul>
<li>操作数已经用一个%做前缀，寄存器只能用%%做前缀</li>
</ul>
</li>
<li>clobbered register：代表内联汇编代码会改变寄存器eax的内容</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="汇编模板（assembler-template）"><a href="#汇编模板（assembler-template）" class="headerlink" title="汇编模板（assembler template）"></a>汇编模板（assembler template）</h4><ul>
<li>嵌入在C中的汇编指令<ul>
<li>每条指令放在一个双引号内，或都在一个双引号</li>
<li>每条指令后 <code>\n\t</code></li>
<li>访问 <strong>C 语言变量</strong>用 %0，%1…</li>
</ul>
</li>
</ul>
<h4 id="操作数（Operands）"><a href="#操作数（Operands）" class="headerlink" title="操作数（Operands）"></a>操作数（Operands）</h4><ul>
<li><p>格式 <code>&quot;constraint&quot; (C expr) //&quot;=r&quot;(result)</code></p>
</li>
<li><p>asm 内部使用<strong>C语言字符串</strong>作为操作数</p>
</li>
<li><p>操作数都要放在双引号内</p>
<ul>
<li>对于 output 操作数要用 =</li>
</ul>
</li>
<li><p>constraint 和 修饰都放在双引号内</p>
</li>
<li><p>constraint：指定操作数的寻址类型（内存寻址或者寄存器寻址），也用来指明使用那个寄存器</p>
</li>
<li><p>若有多个操作数，使用逗号隔开</p>
</li>
<li><p>在汇编模板部分，按顺序用数字去引用操作数</p>
</li>
<li><p>输出操作数表达式必须是左值，输入操作数不一定是</p>
<ul>
<li>可以使用表达式或者变量</li>
</ul>
</li>
<li><p>例子：把一个数字乘以五</p>
<ul>
<li>```cpp<br>asm ( “leal (%1,%1,4), %0”<pre><code>    : &quot;=r&quot; (five_times_x)
    : &quot;r&quot; (x)
 );
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  * 输入操作数是 x，未指定具体使用那个寄存器</span><br><span class="line">* 修改 constraint 部分内容，使得 GCC 固定使用同一个寄存器处理输入输出操作数,但未指定具体哪个寄存器</span><br><span class="line"></span><br><span class="line">  * ```cpp</span><br><span class="line">    asm( &quot;lea (%0,%0,4),%0&quot;</span><br><span class="line">            : &quot;=r&quot; (five_times_x)</span><br><span class="line">            : &quot;0&quot; (x)</span><br><span class="line">        );</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>需要指定具体的寄存器</p>
<ul>
<li>```cpp<br>asm ( “leal (%%ecx,%%ecx,4), %%ecx”<pre><code>    : &quot;=c&quot; (x)
    : &quot;c&quot; (x) 
</code></pre>
);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 不需要填写ClobberList</span><br><span class="line"></span><br><span class="line">  * 指定GCC自己选择合适的寄存器</span><br><span class="line">  * 因为 GCC 知道x将存入 ecx ，GCC完全知道ecx的值</span><br><span class="line"></span><br><span class="line">#### 破坏列表 Clobber List</span><br><span class="line"></span><br><span class="line">* 如果某个指令改变了某个寄存器的值，就必须在第三个冒号后标识出该寄存器</span><br><span class="line">* 为了告知 GCC ，让其不在假定之前寄存器中的值依然合法</span><br><span class="line">* 输入输出寄存器不用放入Clobber List</span><br><span class="line">  * GCC 能够知道asm将使用这些寄存器</span><br><span class="line">  * 已经被显示地指定输入输出</span><br><span class="line">  * 其他使用到的寄存器无论是显示或隐式都需要标明</span><br><span class="line">* 若指令中已无法意料的形式修改了内存值，需要在 Clobber List 中加入 memory</span><br><span class="line">  * 使得 GCC 不去缓存这些内存值</span><br><span class="line">  * Clobber List 中列出的寄存器可以被多次写读</span><br><span class="line"></span><br><span class="line">#### 特征修饰符 Volatile</span><br><span class="line"></span><br><span class="line">* 要求汇编代码必须在被放置的位置执行（不能被循环优化或移除循环）</span><br><span class="line">* 禁止这些代码被移动或删除</span><br><span class="line">* `asm volatile ();`</span><br><span class="line"></span><br><span class="line">#### 约束 Constraints</span><br><span class="line"></span><br><span class="line">* 寄存器操作数 constraints：`r`</span><br><span class="line"></span><br><span class="line">  * 操作数将被存储在通用寄存器中</span><br><span class="line">  * `asm (&quot;movl %%eax, %0&quot;: &quot;=r&quot; (myval));`</span><br><span class="line"></span><br><span class="line">    * 变量 myval 将被保存在 GCC 自己选择的寄存器中</span><br><span class="line">    * eax 中的值被拷贝到这个寄存器中</span><br><span class="line">    * 在内存中的 myval 值也会按照这个寄存器值更新</span><br><span class="line">    * r GCC 可能会在任何一个可用的通用寄存器中保存这个值</span><br><span class="line">  * 具体指定使用那个寄存器：</span><br><span class="line">  * | r | Register(s)     |</span><br><span class="line">    | :- | :-------------- |</span><br><span class="line">    | a | %eax, %ax, %al  |</span><br><span class="line">    | b | %ebx, %bx, %bl  |</span><br><span class="line">    | c | %ecx, %cx, %cl  |</span><br><span class="line">    | d | %edx, %dx, %adl |</span><br><span class="line">    | S | %esi, %si       |</span><br><span class="line">    | D | %edi, %di       |</span><br><span class="line">* 内存操作数constraint：`m`</span><br><span class="line"></span><br><span class="line">  * 当操作数在内存中时，任何对其操作会直接在内存中运行</span><br><span class="line">    * 指定寄存器：内存操作时会把值存在一个寄存器中，修改后再将该值 协会到该内存中</span><br><span class="line">* 匹配 constraint</span><br><span class="line"></span><br><span class="line">#### 约束 Constraints Modifiers修饰符</span><br><span class="line"></span><br><span class="line">#### 常用代码示例</span><br><span class="line"></span><br><span class="line">## 3.2 make 和 Makefile</span><br><span class="line"></span><br><span class="line">* GNU make 是一种代码维护工具</span><br><span class="line">  * 项目中，根据程序各个模块的更新情况，自动的维护和生成目标代码</span><br><span class="line">* 执行 make 命令时，需要 makefile 文件，以告诉make命令，需要怎样去编译和链接程序</span><br><span class="line">* 编译和链接的规则</span><br><span class="line">  * 如果这个工程没有编译过，那么我们的所有c文件都要编译并被链接。</span><br><span class="line">  * 如果这个工程的某几个c文件被修改，那么我们只编译被修改的c文件，并链接目标程序。</span><br><span class="line">  * 如果这个工程的头文件被改变了，那么我们需要编译引用了这几个头文件的c文件，并链接目标程序。</span><br><span class="line">* 编写好 makefile 后，只需要 make 命令，就可自动的根据当前的文件修改情况来确定哪些文件需要重新编译并重新链接</span><br><span class="line"></span><br><span class="line">### 3.2.1 makefile 的规则</span><br><span class="line"></span><br><span class="line">* &gt; target ... :prerequisites ...</span><br><span class="line">  &gt;</span><br><span class="line">  &gt;     command</span><br><span class="line">  &gt;</span><br><span class="line">  &gt;     ...</span><br><span class="line">  &gt;</span><br><span class="line">  &gt;     ...</span><br><span class="line">  &gt;</span><br><span class="line"></span><br><span class="line">  * target 是一个目标文件 : 可以是 object 文件，也可以是执行文件，也可以是一个 label</span><br><span class="line">  * prerequisite：要生成那个 target 所需要的文件</span><br><span class="line">  * command：make 需要执行的命令（任意的 shell 命令）</span><br><span class="line">  * 文件依赖关系</span><br><span class="line">    * target 文件依赖于 prerequisite 中的文件</span><br><span class="line">    * 生成规则 定义在 command 中</span><br><span class="line">  * 如果 prerequisites 中有文件比 target 文件新，那么command所定义的命令就被执行</span><br><span class="line"></span><br><span class="line">##3.3  gdb 的使用</span><br><span class="line"></span><br><span class="line">[参考博客](https://wiki.ubuntu.org.cn/%E7%94%A8GDB%E8%B0%83%E8%AF%95%E7%A8%8B%E5%BA%8F#.E7.9B.B8.E5.85.B3.E8.AF.8D.E6.9D.A1)</span><br><span class="line"></span><br><span class="line">* 调试命令 `gcc -g  -Wall 原文件.c -o 输出的目标文件`</span><br><span class="line">  * -g : 调试 C/C++ 程序，在编译时，就需要把调试信息加到可执行文件中</span><br><span class="line">  * 没有 -g 的话，看不见程序函数名、变量名，而是运行时的内存代码</span><br><span class="line">* 启动 gdb ：进入 gdb 环境和加载被调试程序同时进行：</span><br><span class="line">  * `gdb 可执行文件名`</span><br><span class="line">  * `gdb 可执行文件名 core`</span><br><span class="line">    * 用gdb 同时调试一个运行程序和core文件（程序非法执行后 core dump 后产生的文件）</span><br><span class="line">  * `gdb 可执行文件名 &lt;PID&gt;`</span><br><span class="line">    * 若程序是一个服务程序，可以指定服务程序运行时的进程 ID</span><br><span class="line">* gdb 启动开关</span><br><span class="line">* `help`:查看命令种类</span><br><span class="line">  * `help 命令`：查看种类中的命令</span><br><span class="line">* 调试已运行的程序</span><br><span class="line">  * 1. `ps` 查看正在运行的程序 ID，`gdb &lt;program&gt; PID` 格式挂接正在运行的程序</span><br><span class="line">    2. `gdb &lt;program&gt;` 关联上源代码，并进行gdb，在 gdb 环境中 用 `attach` 命令来挂接进程 PID ，用 `detach` 取消挂接</span><br><span class="line">* 暂停/恢复程序运行</span><br><span class="line">  * 可以设置程序在哪行停，在什么条件下停，在受到什么信号时停</span><br><span class="line">  * `info program` 查看程序是否在运行，进程号，被暂停原因</span><br><span class="line">  * 暂停方式：</span><br><span class="line">    * BreakPoint: 断点</span><br><span class="line">    * WatchPoint: 观察点</span><br><span class="line">    * CatchPoint：捕捉点</span><br><span class="line">    * Signals：信号</span><br><span class="line">    * ThreadStops：线程停止</span><br><span class="line">  * 恢复程序运行：`c` / `continue`</span><br><span class="line"></span><br><span class="line">### 设置断点（Break Points）</span><br><span class="line"></span><br><span class="line">* `break &lt;function&gt;`: 在进入指定函数时停住</span><br><span class="line">* `break &lt;linenum&gt;`: 在指定行号停住</span><br><span class="line">* `break +offset`: 在当前行号前面的 offset 行停住</span><br><span class="line">* `break -offset`: 在当前行号后面 offset 行挺住</span><br><span class="line">* `break filename: linenum`: 在源文件 filename 的 linenum 行停住</span><br><span class="line">* `break filename: function`: 在源文件filename的function入口处同住</span><br><span class="line">* `break *address`: 在程序运行的内存地址处停住</span><br><span class="line">* `break`: 没有参数时，表示在下一条指令处停住</span><br><span class="line">* `break ... if &lt;conditon&gt;`: 在条件成立时停住</span><br><span class="line">  * `...` 是上述参数，conditon 表示条件</span><br><span class="line">* 查看断点：n 为断点号</span><br><span class="line">  * `info breakpoints [n]`</span><br><span class="line">  * `info break [n]`</span><br><span class="line"></span><br><span class="line">### 设置观察点（Watch Points）</span><br><span class="line"></span><br><span class="line">观察点一般来观察某个表达式（或变量）的值是否变化，若变化则停住</span><br><span class="line"></span><br><span class="line">* `watch &lt;expr&gt;`:  为表达式 expr 设置观察点</span><br><span class="line">* `rwatch &lt;expr&gt;`: 当表达式 expr 被读时，停住</span><br><span class="line">* `awatch &lt;expr&gt;`: 当表达式的值被读或写时，停住</span><br><span class="line">* `info watchpoints`: 列出所有观察点</span><br><span class="line"></span><br><span class="line">### 设置捕捉点（Catch Points）</span><br><span class="line"></span><br><span class="line">设置捕捉点来捕捉程序运行时的一些事件</span><br><span class="line"></span><br><span class="line">* `catch &lt;event&gt;`: 当event发生时，停住</span><br><span class="line">  * throw 一个C++ 抛出的异常</span><br><span class="line">  * catch 一个C++捕捉到的异常</span><br><span class="line">  * exec 调用系统调用 exec 时</span><br><span class="line">  * fork 调用系统调用 fork 时</span><br><span class="line">  * vfork 调用系统调用 vfork 时</span><br><span class="line">  * load</span><br><span class="line">  * unload</span><br><span class="line">* `tcatch &lt;event&gt;`: 值设置一次捕捉点，当程序停住后，该店被自动删除</span><br><span class="line"></span><br><span class="line">### 维护停止点</span><br><span class="line"></span><br><span class="line">停止点即上述三类</span><br><span class="line"></span><br><span class="line">* clear</span><br><span class="line">  * `clear` : 清除所有已定义的停止点</span><br><span class="line">  * `clear &lt;function&gt;` / `clear &lt;filename: function&gt;`: 清除所有设置在函数上的停止点</span><br><span class="line">  * `clear &lt;linenum&gt;` /  `clear &lt;filename: linenum&gt;`: 清除所有设置在指定行上的停止点</span><br><span class="line">* delete</span><br><span class="line">  * `delete [breakpoints] [range...]`: 删除指定的断点，断点号，若不指定断点号则删除所有断点。range 表示断点号范围</span><br><span class="line">* disable：gdb 不会删除，enable 可以恢复</span><br><span class="line">  * `disable [breakpoints] [range]`:</span><br><span class="line">  * `enable [breakpoints] [range]`</span><br><span class="line">  * `enable [breakpoints] once range...`</span><br><span class="line">  * `enable [breakpoints] delete range ...`</span><br><span class="line"></span><br><span class="line">### 停止条件维护</span><br><span class="line"></span><br><span class="line">断点条件设置好后，用 conditon 命令修改条件（仅break和watch支持if）</span><br><span class="line"></span><br><span class="line">* `condition &lt;bnum&gt; &lt;expr&gt;`: 修改断点号为 bnum 的停止条件为 expr</span><br><span class="line">* `condition &lt;bnum&gt;` : 清除断点号为 bnum 的停止条件</span><br><span class="line"></span><br><span class="line">### 为停止点设定运行命令</span><br><span class="line"></span><br><span class="line">### 断电菜单</span><br><span class="line"></span><br><span class="line">### 恢复程序运行和单步调试</span><br><span class="line"></span><br><span class="line">当程序被停住，可以用 continue 命令恢复程序运行直到结束，或下一个断点，</span><br><span class="line"></span><br><span class="line">也可以使用 step 或 next 命令单步跟踪程序</span><br><span class="line"></span><br><span class="line">* `continue [ignore-count]` / c / fg</span><br><span class="line">  * 恢复程序运行至结束或者下一个断点</span><br><span class="line">  * 或者设置忽略的次数</span><br><span class="line">* `step &lt;count&gt;`</span><br><span class="line">  * 单步跟踪，若有函数调用会进入函数</span><br><span class="line">* `next &lt;count&gt;`</span><br><span class="line">  * 单步跟踪，若有函数调用，不会进入函数</span><br><span class="line">* `set step-mod`</span><br><span class="line">* `set step-mod on`</span><br><span class="line">* `set step-mod off`</span><br><span class="line">* `finish`</span><br><span class="line">* `until / u`</span><br><span class="line">  * 退出循环体</span><br><span class="line">* `stepi`</span><br><span class="line">* `nexti`</span><br><span class="line"></span><br><span class="line">### 信号（Signals）</span><br><span class="line"></span><br><span class="line">### 线程（Thread Stops）</span><br><span class="line"></span><br><span class="line">* 功能强大的调试程序</span><br><span class="line"></span><br><span class="line">  * 设置断点</span><br><span class="line">  * 监视程序变量的值</span><br><span class="line">  * 程序的单步执行</span><br><span class="line">  * 显示/修改变量的值</span><br><span class="line">  * 显示/修改寄存器</span><br><span class="line">  * 查看程序的堆栈情况</span><br><span class="line">  * 远程调试</span><br><span class="line">  * 调试线程</span><br><span class="line">* 必须先用 -g 或 -ggdb 编译选项编译源文件，才能使用 gdb 调试程序</span><br><span class="line"></span><br><span class="line">  * 运行 gdb 调试程序命令：`gdb progname`</span><br><span class="line">* 在 gdb 提示符处键入 help ，</span><br><span class="line"></span><br><span class="line">  * aliases：命令别名</span><br><span class="line">  * breakpoints：断点定义</span><br><span class="line">  * data：数据查看</span><br><span class="line">  * files：指定并查看文件</span><br><span class="line">  * internals：维护命令</span><br><span class="line">  * running：程序执行</span><br><span class="line">  * stack：调用栈查看</span><br><span class="line">  * status：状态查看</span><br><span class="line">  * tracepoints: 跟踪程序执行</span><br><span class="line">* `help 命令`：该命令的详细</span><br><span class="line">* gdb 常用命令</span><br><span class="line"></span><br><span class="line">  * | break FILENAME:NUM | 在特定源文件特定行上设置断点                            |</span><br><span class="line">    | ------------------ | ------------------------------------------------------- |</span><br><span class="line">    | clear FILENAME:NUM | 删除设置在特定源文件特定行上的断点                      |</span><br><span class="line">    | run                | 运行调试程序                                            |</span><br><span class="line">    | step               | 单步执行调试程序，不会直接执行函数                      |</span><br><span class="line">    | next               | 单步执行调试程序，会直接执行函数                        |</span><br><span class="line">    | backtrace          | 显示所有的调用栈帧。该命令可用来显示函数的调用顺序      |</span><br><span class="line">    | where continue     | 继续执行正在调试的程序                                  |</span><br><span class="line">    | display EXPR       | 每次程序停止后显示表达式的值,表达式由程序定义的变量组成 |</span><br><span class="line">    | file FILENAME      | 装载指定的可执行文件进行调试                            |</span><br><span class="line">    | help CMDNAME       | 显示指定调试命令的帮助信息                              |</span><br><span class="line">    | info break         | 显示当前断点列表，包括到达断点处的次数等                |</span><br><span class="line">    | info files         | 显示被调试文件的详细信息                                |</span><br><span class="line">    | info func          | 显示被调试程序的所有函数名称                            |</span><br><span class="line">    | info prog          | 显示被调试程序的执行状态                                |</span><br><span class="line">    | info local         | 显示被调试程序当前函数中的局部变量信息                  |</span><br><span class="line">    | info var           | 显示被调试程序的所有全局和静态变量名称                  |</span><br><span class="line">    | kill               | 终止正在被调试的程序                                    |</span><br><span class="line">    | list               | 显示被调试程序的源代码                                  |</span><br><span class="line">    | quit               | 退出 gdb                                                |</span><br><span class="line"></span><br><span class="line">## Eclipse + CDT 下载安装</span><br><span class="line"></span><br><span class="line">[参考博客](https://blog.csdn.net/qq_42824983/article/details/114671702)</span><br><span class="line"></span><br><span class="line">* JDK: 是 Java 语言的软件开发包，包含了 Java 的运行环境</span><br><span class="line">* Eclipse ：运行依赖于 JDK</span><br><span class="line">* CDT：C/C++ Developing Tools</span><br><span class="line">* </span><br><span class="line"></span><br><span class="line"># 4 基于硬件模拟器实现源码级调试</span><br><span class="line"></span><br><span class="line">## 4.1 安装硬件模拟器 QEMU</span><br><span class="line"></span><br><span class="line">* 用于模拟一台 X86 计算机，让 uCore 运行在 QEMU 上</span><br><span class="line">* 直接使用 Ubuntu 中提供的 QEMU</span><br><span class="line">  * `sudo apt-gett install qemu-system`</span><br><span class="line"></span><br><span class="line">## 4.2 Linux 环境下的源码级安装 QEMU</span><br><span class="line"></span><br><span class="line">[参考博客](https://blog.csdn.net/wxh0000mm/article/details/90056912?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-4&amp;spm=1001.2101.3001.4242)</span><br><span class="line"></span><br><span class="line">* 安装时遇到的问题：</span><br><span class="line">  * analysis: 未安装到默认路径</span><br><span class="line">  * problem;输入 `qemu` 无反应</span><br><span class="line">  * solution：[参考博客](https://blog.csdn.net/u013045749/article/details/53575639)</span><br><span class="line">  * 若输入 `qemu-system-x86_64说明安装成功，需要对其进行链接：`sudo ln -s /usr/bin/qumu-system-x86_64 /usr/bin/qemu`</span><br><span class="line"></span><br><span class="line">## 4.3 使用 QEMU</span><br><span class="line"></span><br><span class="line">### 4.3.1 运行参数</span><br><span class="line"></span><br><span class="line">* 默认安装路径：`/usr/local/bin`</span><br><span class="line">* 运行命令：`qemu`</span><br><span class="line">* qemu 运行多参数格式 `qemu [options] [disk_image]`</span><br><span class="line"></span><br><span class="line">  * disk_image：硬盘镜像文件</span><br><span class="line">* 部分参数：</span><br><span class="line"></span><br><span class="line">  * ```</span><br><span class="line">    `-hda file&#x27;        `-hdb file&#x27; `-hdc file&#x27; `-hdd file&#x27;</span><br><span class="line">     使用 file  作为硬盘0、1、2、3镜像。</span><br><span class="line">    `-fda file&#x27;  `-fdb file&#x27;</span><br><span class="line">     使用 file  作为软盘镜像，可以使用 /dev/fd0 作为 file 来使用主机软盘。</span><br><span class="line">    `-cdrom file&#x27;</span><br><span class="line">     使用 file  作为光盘镜像，可以使用 /dev/cdrom 作为 file 来使用主机 cd-rom。</span><br><span class="line">    `-boot [a|c|d]&#x27;</span><br><span class="line">     从软盘(a)、光盘(c)、硬盘启动(d)，默认硬盘启动。</span><br><span class="line">    `-snapshot&#x27;</span><br><span class="line">     写入临时文件而不写回磁盘镜像，可以使用 C-a s 来强制写回。</span><br><span class="line">    `-m megs&#x27;</span><br><span class="line">     设置虚拟内存为 msg M字节，默认为 128M 字节。</span><br><span class="line">    `-smp n&#x27;</span><br><span class="line">     设置为有 n 个 CPU 的 SMP 系统。以 PC 为目标机，最多支持 255 个 CPU。</span><br><span class="line">    `-nographic&#x27;</span><br><span class="line">     禁止使用图形输出。</span><br><span class="line">    其他：</span><br><span class="line">     可用的主机设备 dev 例如：</span><br><span class="line">         vc</span><br><span class="line">             虚拟终端。</span><br><span class="line">         null</span><br><span class="line">             空设备</span><br><span class="line">         /dev/XXX</span><br><span class="line">             使用主机的 tty。</span><br><span class="line">         file: filename</span><br><span class="line">             将输出写入到文件 filename 中。</span><br><span class="line">         stdio</span><br><span class="line">             标准输入/输出。</span><br><span class="line">         pipe：pipename</span><br><span class="line">             命令管道 pipename。</span><br><span class="line">         等。</span><br><span class="line">     使用 dev 设备的命令如：</span><br><span class="line">         `-serial dev&#x27;</span><br><span class="line">             重定向虚拟串口到主机设备 dev 中。</span><br><span class="line">         `-parallel dev&#x27;</span><br><span class="line">             重定向虚拟并口到主机设备 dev 中。</span><br><span class="line">         `-monitor dev&#x27;</span><br><span class="line">             重定向 monitor 到主机设备 dev 中。</span><br><span class="line">     其他参数：</span><br><span class="line">         `-s&#x27;</span><br><span class="line">             等待 gdb 连接到端口 1234。</span><br><span class="line">         `-p port&#x27;</span><br><span class="line">             改变 gdb 连接端口到 port。</span><br><span class="line">         `-S&#x27;</span><br><span class="line">             在启动时不启动 CPU， 需要在 monitor 中输入 &#x27;c&#x27;，才能让qemu继续模拟工作。</span><br><span class="line">         `-d&#x27;</span><br><span class="line">             输出日志到 qemu.log 文件。</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>将用到的命令：</p>
<ul>
<li><code>qemu -hda ucore.img -parallel stdip</code>: 使得ucore在qemu模拟的 x86 硬件环境中执行</li>
<li><code>qemu -S -s -hda ucore.img -monitor stdio</code>: 用于与 gdb 配合进行源码调试</li>
</ul>
</li>
</ul>
<h4 id="常用调试命令"><a href="#常用调试命令" class="headerlink" title="常用调试命令"></a>常用调试命令</h4><ul>
<li><p>qemu 中 monitor 的常用命令：</p>
<ul>
<li><table>
<thead>
<tr>
<th>help</th>
<th>查看 qemu 帮助，显示所有支持的命令。</th>
</tr>
</thead>
<tbody><tr>
<td>q|quit|exit</td>
<td>退出 qemu。</td>
</tr>
<tr>
<td>stop</td>
<td>停止 qemu。</td>
</tr>
<tr>
<td>c|cont|continue</td>
<td>连续执行。</td>
</tr>
<tr>
<td>x /fmt addr xp /fmt addr</td>
<td>显示内存内容，其中 ‘x’ 为虚地址，’xp’ 为实地址。 参数 /fmt i 表示反汇编，缺省参数为前一次参数。</td>
</tr>
<tr>
<td>p|print’</td>
<td>计算表达式值并显示，例如 $reg 表示寄存器结果。</td>
</tr>
<tr>
<td>memsave addr size file pmemsave addr size file</td>
<td>将内存保存到文件，memsave 为虚地址，pmemsave 为实地址。</td>
</tr>
<tr>
<td>breakpoint 相关：</td>
<td>设置、查看以及删除 breakpoint，pc执行到 breakpoint，qemu 停止。（暂时没有此功能）</td>
</tr>
<tr>
<td>watchpoint 相关：</td>
<td>设置、查看以及删除 watchpoint, 当 watchpoint 地址内容被修改，停止。（暂时没有此功能）</td>
</tr>
<tr>
<td>s|step</td>
<td>单步一条指令，能够跳过断点执行。</td>
</tr>
<tr>
<td>r|registers</td>
<td>显示全部寄存器内容。</td>
</tr>
<tr>
<td>info 相关操作</td>
<td>查询 qemu 支持的关于系统状态信息的操作。</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p><code>single arg</code>: arg为参数，设置单步标志命令</p>
<ul>
<li><code>single on</code>: 允许单步<ul>
<li>在此情况下使用 <code>cont</code> 进行单步操作</li>
</ul>
</li>
<li><code>single off</code>: 禁止单步</li>
</ul>
</li>
</ul>
<h2 id="4-4-结合-gdb-和-qemu-源码级调试-uCore"><a href="#4-4-结合-gdb-和-qemu-源码级调试-uCore" class="headerlink" title="4.4 结合 gdb 和 qemu 源码级调试 uCore"></a>4.4 结合 gdb 和 qemu 源码级调试 uCore</h2><h3 id="编译可调式的目标文件"><a href="#编译可调式的目标文件" class="headerlink" title="编译可调式的目标文件"></a>编译可调式的目标文件</h3><ul>
<li>需要在使用 gcc 编译源文件时，添加参数 -g</li>
<li>这样编译出来的目标文件中才会包含可以用于 gdb 调试的相关符号信息</li>
</ul>
<h3 id="ucore-代码编译"><a href="#ucore-代码编译" class="headerlink" title="ucore 代码编译"></a>ucore 代码编译</h3><ul>
<li>编译过程：解压缩后的 ucore 源码包中使用 make 命令<ul>
<li>将生成一些列目标文件</li>
<li>例如 lab1：<code>[]:~/lab1$ make</code><ul>
<li>ucore.img: 被qemu访问过的虚拟硬盘文件</li>
<li>kernel: ELF 格式的 toy ucore kernel 执行文件，被嵌入到了 ucore.img 中</li>
<li>bootblock：虚拟的硬盘主引导扇区（512字节），包含了 bootloader 执行代码，被嵌入到了 ucore.img 中</li>
<li>sign：外部执行程序，用来生成虚拟的硬盘主引导扇区</li>
</ul>
</li>
</ul>
</li>
<li>保存修改:<ul>
<li>使用 diff 命令对修改后的 ucore 代码 和 ucore 源码进行比较，比较之前使用 make clean 清除掉不必要文件</li>
</ul>
</li>
<li>应用修改：</li>
</ul>
<h3 id="使用远程调试"><a href="#使用远程调试" class="headerlink" title="使用远程调试"></a>使用远程调试</h3><ul>
<li><p>与 qemu 配合进行源代码级别的调试，需要先让 qemu 进入等待 gdb 调试器的接入并且还不能让 qemu 的CPU执行</p>
<ul>
<li>因此启动 qemu 时，需要使用 -S -s</li>
<li><code>qemu -S -s</code>：qemu 中的CPU并不会马上执行</li>
</ul>
</li>
<li><p>然后启动 gdb ，<code>target remote 127.0.0.1:1234</code> 连接到qemu</p>
</li>
<li><p><code>c</code>: qemu 继续执行</p>
</li>
<li><p><strong>遇到的问题</strong>：<img src="E:\LearningNotes\TH操作系统\操作系统实验\lab0.assets\image-20210403211514163.png" alt="image-20210403211514163"></p>
<ul>
<li>analysis：</li>
<li>solution：</li>
</ul>
</li>
<li><p>为了使得 gdb 获知符号信息，需要指定调试目标文件，gdb 中 <code>file ./bin/kernel</code></p>
<ul>
<li>gdb 便可载入这个文件中的符号信息</li>
</ul>
</li>
<li><p>遇到的问题：</p>
</li>
<li><p>通过 gdb 可以对 ucore 代码进行调试</p>
</li>
<li><p>例如： 调试memset函数：</p>
<ol>
<li>运行 <code>qemu -S -s -hda ./bin/ucore.img -monitor stdio</code></li>
<li>运行 gdb 并与 qemu 进行连接</li>
<li>设置断点并执行</li>
<li>qemu 单步调试</li>
</ol>
</li>
</ul>
<h3 id="使用-gdb-配置文件"><a href="#使用-gdb-配置文件" class="headerlink" title="使用 gdb 配置文件"></a>使用 gdb 配置文件</h3><h3 id="加载调试目标"><a href="#加载调试目标" class="headerlink" title="加载调试目标"></a>加载调试目标</h3><ul>
<li>因为在指定了执行文件时就已经加载了文件中包含的调试信息，因此不用在使用 gdb 命令专门加载</li>
<li>但是在使用 qemu 进行远程调试的时候，我们必须手动加载符号表，即 <code>file</code></li>
</ul>
<h3 id="设定调试目标架构"><a href="#设定调试目标架构" class="headerlink" title="设定调试目标架构"></a>设定调试目标架构</h3><ul>
<li>在调试的时候，若需要调试不是 i386 保护模式代码，比如8086实模式代码，需要设定当前使用的架构：<code>(gdb) set arch i8086</code></li>
<li></li>
</ul>
<h1 id="5-了解处理器硬件"><a href="#5-了解处理器硬件" class="headerlink" title="5 了解处理器硬件"></a>5 了解处理器硬件</h1><ul>
<li>了解处理器体系结构（了解硬件对 uCore 的影响）和机器指令集（读懂 uCore 的汇编）</li>
<li>uCore 目前支持的硬件环境是基于Intel 80386以上的计算机系统</li>
</ul>
<h2 id="5-1-Intel-80386-运行模式"><a href="#5-1-Intel-80386-运行模式" class="headerlink" title="5.1 Intel 80386 运行模式"></a>5.1 Intel 80386 运行模式</h2><ul>
<li>一般CPU 只有一种运行模式，<ul>
<li>能够支持多个程序在各自独立的内存空间中并发执行，</li>
<li>且有用户特权级和内核特权级的区分，使得一般用户不能破坏操作系统内核和执行特权级指令</li>
</ul>
</li>
<li>80386 处理器有四种运行模式<ul>
<li>实模式</li>
<li>保护模式</li>
<li>SMM 模式</li>
<li>虚拟8086 模式</li>
</ul>
</li>
<li><strong>实模式</strong><ul>
<li>个人计算机早期8086处理器采用的一种简单运行模式</li>
<li>加电启动后处于实模式运行状态</li>
<li>实模式状态下，软件<strong>可访问的物理内存地址空间不能超过1 MB</strong>，且无法发挥 Intel 80386以上级别<strong>32位 CPU 的4 GB 内存管理能力</strong></li>
<li>实模式将整个物理内存看成分段区域，程序代码和数据位于不同区域</li>
<li><strong>操作系统和用户程序未区别对待</strong>，每一个指针都指向实际的物理地址</li>
<li>注意：若用户程序的一个指针指向了操作系统区域或者其他用户程序区域，并修改，后果不堪设想</li>
</ul>
</li>
</ul>
<blockquote>
<p>对于ucore无必要涉及</p>
</blockquote>
<ul>
<li><strong>保护模式</strong><ul>
<li><strong>主要目标</strong>是确保应用程序无法对操作系统进行破坏</li>
<li>实际上，80386就是通过在<strong>实模式</strong>下初始化<strong>控制寄存器</strong>（如GDTR，LDTR，IDTR与TR等管理寄存器）以及<strong>页表</strong>，然后再通过设置<strong>CR0寄存器</strong>使其中的<strong>保护模式</strong> <strong>使能位置位</strong>，从而进入到80386的保护模式</li>
<li>当80386工作在<strong>保护模式</strong>下的时候，其所有的<strong>32根地址线</strong>都可供寻址，物理寻址空间高达4 GB</li>
<li>在保护模式下，支持<strong>内存分页机制</strong>，提供了<strong>对虚拟内存的良好支持</strong></li>
<li><strong>保护模式</strong>下80386支持<strong>多任务</strong>，还支持<strong>优先级机制</strong>，<strong>不同的程序可以运行在不同的特权级上</strong><ul>
<li>特权级一共分0～3四个级别，操作系统运行在最高的特权级0上，应用程序则运行在比较低的级别上；</li>
<li>配合良好的检查机制后，既可以在任务间<strong>实现数据的安全共享</strong>也可以很好地<strong>隔离各个任务</strong>。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-2-Intel-80386内存架构"><a href="#5-2-Intel-80386内存架构" class="headerlink" title="5.2 Intel 80386内存架构"></a>5.2 Intel 80386内存架构</h2><ul>
<li><strong>32</strong> 位的处理器：<strong>可以寻址的物理内存地址空间</strong>为 2^32 = 4 G 字节</li>
<li>三个地址空间概念：<ul>
<li><strong>物理地址</strong><ul>
<li>处理器提交到总线上用于访问计算机系统中的内存和外设的<strong>最终地址</strong></li>
<li>一个计算机系统中只有一个物理地址空间</li>
</ul>
</li>
<li><strong>线性地址</strong><ul>
<li>80386处理器通过<strong>段（Segment）机制</strong>控制下的形成的地址空间</li>
<li><strong>段机制</strong><ul>
<li>在操作系统的管理下，<strong>每个运行</strong>的应用程序有<strong>相对独立</strong>的一个或多个内存空间段，每个段有各自的起始地址和长度属性，大小不固定，这样可让多个运行的应用程序之间<strong>相互隔离</strong>，实现<strong>对地址空间的保护</strong>。</li>
<li>在操作系统完成对80386处理器段机制的<strong>初始化和配置</strong>（<em>主要是需要操作系统通过特定的指令和操作建立<strong>全局描述符表</strong>，完成虚拟地址与线性地址的映射关系</em>）后，80386处理器的<strong>段管理功能单元</strong>负责把虚拟地址转换成线性地址</li>
</ul>
</li>
<li><strong>页机制</strong><ul>
<li><strong>页机制</strong>，每个页的大小是固定的<strong>（4 KB）</strong>，可完成<strong>对内存单元的安全保护，隔离</strong>，可有效<strong>支持大量应用程序分散的使用大内存</strong>的情况</li>
<li>在操作系统完成对80386处理器页机制的<strong>初始化和配置</strong>（<em>主要是需要操作系统通过特定的指令和操作建立页表，完成虚拟地址与线性地址的映射关系</em>）后，应用程序看到的<strong>逻辑地址先被处理器中的段管理功能单元转换为线性地址</strong>，然后再通过80386<strong>处理器中的页管理功能单元把线性地址转换成物理地址</strong>。</li>
</ul>
</li>
</ul>
</li>
<li><strong>逻辑地址</strong></li>
</ul>
</li>
</ul>
<blockquote>
<p>页机制和段机制有一定程度的功能重复，但Intel公司为了向下兼容，使得两者一直共存</p>
</blockquote>
<ul>
<li>分段机制启动，分页机制为启动时：逻辑地址——<strong>段机制处理</strong>——&gt;线性地址==物理地址</li>
<li>两个机制都启动时：逻辑地址——<strong>段机制处理</strong>——&gt;线性地址——<strong>页机制处理</strong>——&gt;物理地址</li>
</ul>
<h2 id="5-3-Intel-80386-寄存器"><a href="#5-3-Intel-80386-寄存器" class="headerlink" title="5.3 Intel 80386 寄存器"></a>5.3 Intel 80386 寄存器</h2><ul>
<li><p>80386 寄存器可分为8类：宽度都为 32 位</p>
<ol>
<li><p><strong>通用寄存器</strong>（General Register）</p>
<ul>
<li><p>EAX（<strong>累加器</strong>）/EBX（<strong>基址寄存器</strong>）/ECX（<strong>计数器</strong>）/EDX（<strong>数据寄存器</strong>）/</p>
<p>ESI（<strong>源地址指针寄存器</strong>）/EDI（<strong>目的地址指针寄存器</strong>）/ESP（<strong>堆栈指针寄存器</strong>）/EBP（<strong>基址指针寄存器</strong>）</p>
<ul>
<li>低十六位：AX/BX/CX/DX/SI/DI/SP/BP<ul>
<li>可以单独存取AX,BX,CX,DX 的高八位和低八位</li>
<li>AH,AL/BH,BL/CH,CL/DH,DL</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>段寄存器</strong>（Segment Register）: 都是 16 位的</p>
<ul>
<li>CS,  <strong>代码段</strong>（Code Segment）</li>
<li>DS, <strong>数据段</strong>（Data Segment）</li>
<li>ES, <strong>附加数据段</strong>（Extra Segment）</li>
<li>SS, <strong>堆栈段</strong>（Stack Segment）</li>
<li>FS, <strong>附加段</strong></li>
<li>GS, <strong>附加段</strong></li>
</ul>
</li>
<li><p><strong>指令指针寄存器</strong>（Instruction Pointer）</p>
<ul>
<li>EIP 的低 16 位就是8086的IP，他存储的是下一条要执行指令的内存地址，在分段地址转换中，表示指令的段内偏移地址</li>
</ul>
</li>
<li><p><strong>标志寄存器</strong>（Flag Register）：</p>
<ul>
<li>EFLAGS，和8086的16位标志寄存器相比，增加了4个控制位，者20位控制/标志位：<ul>
<li><img src="https://objectkuan.gitbooks.io/ucore-docs/content/lab0_figs/image006.png" alt="状态寄存器"></li>
<li>控制/标志位含义：</li>
</ul>
</li>
</ul>
</li>
<li><p>系统地址寄存器</p>
</li>
<li><p>控制寄存器</p>
</li>
<li><p>调试寄存器</p>
</li>
<li><p>测试寄存器</p>
</li>
</ol>
</li>
</ul>
<h1 id="6-了解-uCore-编程方法和通用数据结构"><a href="#6-了解-uCore-编程方法和通用数据结构" class="headerlink" title="6 了解 uCore 编程方法和通用数据结构"></a>6 了解 uCore 编程方法和通用数据结构</h1><h2 id="6-1-面向对象编程方法"><a href="#6-1-面向对象编程方法" class="headerlink" title="6.1 面向对象编程方法"></a>6.1 面向对象编程方法</h2><ul>
<li>uCore 设计中采用了一定的面向对象编程方法</li>
<li>需要注意，我们并不需要用 C 语言模拟出一个常见C++编译器已经实现的对象模型</li>
<li>uCore 的面向对象编程方法，目前主要是采用了类似 C++ 的接口（interface）<ul>
<li>即是让实现细节不同的某类内核子系统（比如物理内存分配器、调度器，文件系统等）有共同的操作方式</li>
<li>虽然内存子系统的实现千差万别，但它的访问接口是不变的</li>
</ul>
</li>
<li>接口在 C 语言中，表现为一组函数指针的集合</li>
<li>接口设计的难点是如何找出各种内核子系统的共性访问/操作模式，从而可以根据访问模式提取出函数指针列表</li>
</ul>
<h2 id="6-2-通用数据结构双向循环链表"><a href="#6-2-通用数据结构双向循环链表" class="headerlink" title="6.2 通用数据结构双向循环链表"></a>6.2 通用数据结构双向循环链表</h2><h3 id="6-2-1-双向循环链表"><a href="#6-2-1-双向循环链表" class="headerlink" title="6.2.1 双向循环链表"></a>6.2.1 双向循环链表</h3><ul>
<li><p>数据结构课程中</p>
<ul>
<li>专门的成员变量 data</li>
<li>两个指向该类型的指针 next 和 prev</li>
<li>```C<br>typedef struct foo {<pre><code>ElemType data;
struct foo *prev;
struct foo *next;
</code></pre>
} foo_t;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 特点：</span><br><span class="line"></span><br><span class="line">  * 尾节点的后继指向首节点</span><br><span class="line">  * ![双向循环链表](https://objectkuan.gitbooks.io/ucore-docs/content/lab0_figs/image007.png)</span><br><span class="line">* 潜在问题：由于每种特定数据结构类型不一致，需要为每种特定数据结构类型 定义针对这个数据结构的特定链表插入、删除等操作</span><br><span class="line">* 在uCore中，借鉴了 Linux 内核的双向链表实现：</span><br><span class="line"></span><br><span class="line">  * ```C</span><br><span class="line">    struct list_entry_t &#123;</span><br><span class="line">        struct list_entry_t *prev, *next;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li>
<li>链表节点 list_entry_t 没有包含数据域，而是<strong>在具体的数据结构中包含该链表节点</strong></li>
</ul>
</li>
<li><p>例如 lab 2 中的空闲内存块列表，<strong>空闲块链表的头指针</strong>定义为：</p>
<ul>
<li><p>```C<br>/* free_area_t - maintains a doubly linked list to record free (unused) pages */</p>
<p>typedef struct {</p>
<pre><code>list_entry_t free_list;         // the list header
unsigned int nr_free;           // # of free pages in this free list
</code></pre>
<p>} free_area_t;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 每一个**空闲块链表节点**定义为：</span><br><span class="line"></span><br><span class="line">  * ```C</span><br><span class="line">    /* *</span><br><span class="line">     * struct Page - Page descriptor structures. Each Page describes one</span><br><span class="line">     * physical page. In kern/mm/pmm.h, you can find lots of useful functions</span><br><span class="line">     * that convert Page to other data types, such as phyical address.</span><br><span class="line">     * */</span><br><span class="line">    struct Page &#123;</span><br><span class="line">        atomic_t ref;          // page frame&#x27;s reference counter</span><br><span class="line">        ……</span><br><span class="line">        list_entry_t page_link;         // free list link</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><img src="https://objectkuan.gitbooks.io/ucore-docs/content/lab0_figs/image008.png" alt="空闲块双向循环链表" style="zoom:150%;" /></li>
<li><p>通用双向循环链表结构</p>
<ul>
<li>避免了为每个特定数据结构类型 定义针对这个数据结构的特定链表的麻烦，</li>
<li>让所有的特定数据结构共享通用的链表操作函数</li>
</ul>
</li>
<li><p>通用双向循环链表函数定义：</p>
<ul>
<li><p>初始化：</p>
<ul>
<li><p>uCore 只定义了链表节点，没有专门定义链表头</p>
</li>
<li><p>内联函数（<strong>inline function</strong>）list_init:</p>
<ul>
<li>```C<br>static inline void<br>list_init(list_entry_t *elm) {<pre><code>elm-&gt;prev = elm-&gt;next = elm;
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  * 调用 list_init(free_area.free_list) ，</span><br><span class="line"></span><br><span class="line">    * 声明了一个名为 free_area.free_list 的链表头</span><br><span class="line">    * 空链表，链表头的 next 和 prev 都初始化指向自己</span><br><span class="line">    * 可以用next 是否指向自己判断是否为空</span><br><span class="line">* 插入：</span><br><span class="line"></span><br><span class="line">  * 表头插入（**list_add_after**）</span><br><span class="line">  * 表尾插入（**list_add_before**）</span><br><span class="line">  * 由于双向循环链表的链表头 next 和 prev 分别指向链表中第一个和最后一个节点，两者实现区别并不大</span><br><span class="line">  * uCore</span><br><span class="line"></span><br><span class="line">    * **list_add(elm, listelm, listelm-&gt;next)** 实现表头插入</span><br><span class="line">    * **list_add(elm, listelm-&gt;prev, listelm)** 实现表尾插入</span><br><span class="line">  * list_add:</span><br><span class="line"></span><br><span class="line">    * ```C</span><br><span class="line">      static inline void</span><br><span class="line">      __list_add(list_entry_t *elm, list_entry_t *prev, list_entry_t *next) &#123;</span><br><span class="line">          prev-&gt;next = next-&gt;prev = elm;</span><br><span class="line">          elm-&gt;next = next;</span><br><span class="line">          elm-&gt;prev = prev;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>表头插入：插入在listelm 后，即插在链表的最前位置</p>
</li>
<li><p>表尾插入：插入在 listelm-&gt;prev 之后，即插入在链表最后位置</p>
</li>
</ul>
</li>
<li><p>删除</p>
<ul>
<li>删除空闲块链表中的 Page 结构的链表节点时，调用 内联函数 list_del , list_del 进一步调用了_list_del 完成具体的删除操作</li>
<li>```C<br>static inline void<br>list_del(list_entry_t *listelm) {<pre><code>__list_del(listelm-&gt;prev, listelm-&gt;next);
</code></pre>
}<br>static inline void<br>__list_del(list_entry_t *prev, list_entry_t *next) {<pre><code>prev-&gt;next = next;
next-&gt;prev = prev;
</code></pre>
}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  * 如果要确保 被删除的节点 listelm 不在指向链表中其他节点，可以通过调用 list_init 来把 listelm 的pre、next 指针分别指向自身——可以通过 list_del_int 完成</span><br><span class="line">* 访问链表节点所在的宿主数据结构</span><br><span class="line"></span><br><span class="line">  * list_entry_t 通用双向循环链表 仅仅保存了某特定数据结构中链表节点成员变量的地址</span><br><span class="line">  * 如何通过这个链表节点成员变量访问到他的所有者（某特定数据结构的变量）</span><br><span class="line">  * Linux 提供了针对该数据结构 XXX 的 leXXX 的宏</span><br><span class="line"></span><br><span class="line">    * le 为 list entry 简称，是指向数据结构 XXX 中 list_entry_t 成员变量的指针，即存储在双向链表中的结点地址值</span><br><span class="line">    * member 是指 XXX数据类型中包含的链表节点的成员变量</span><br><span class="line">  * ```C</span><br><span class="line">    //free_area是空闲块管理结构，free_area.free_list是空闲块链表头</span><br><span class="line">    free_area_t free_area;</span><br><span class="line">    list_entry_t * le = &amp;free_area.free_list;  //le是空闲块链表头指针</span><br><span class="line">    while((le=list_next(le)) != &amp;free_area.free_list) &#123; //从第一个节点开始遍历</span><br><span class="line">        struct Page *p = le2page(le, page_link); //获取节点所在基于Page数据结构的变量</span><br><span class="line">        ……</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>le2page 宏：</p>
<ul>
<li><pre><code class="C">// convert list entry to page
#define le2page(le, member)                 \
to_struct((le), struct Page, member)
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>课程实验</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Lab 1 系统软件启动过程</title>
    <url>/p/32a74a00.html</url>
    <content><![CDATA[<h1 id="Lab-1-系统软件启动过程"><a href="#Lab-1-系统软件启动过程" class="headerlink" title="Lab 1 系统软件启动过程"></a>Lab 1 系统软件启动过程</h1><p><a href="https://www.jianshu.com/p/2f95d38afa1d">参考博客</a></p>
<p><a href="https://www.git2get.com/av/102915460.html">参考博客</a></p>
<p>[toc]</p>
<h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1 实验目的"></a>1 实验目的</h1><ul>
<li>需要某种机制加载并运行操作系统<ul>
<li>更加简单的软件——Bootloader</li>
<li>能完成切换到 x86 保护模式并显示字符</li>
<li>为启动 ucore</li>
</ul>
</li>
<li>整个 Bootloader 执行代码小于512个字节，能放到硬盘的主引导扇区</li>
</ul>
<p>分析和实现 Bootloader和ucore</p>
<ul>
<li><strong>计算机原理</strong><ul>
<li>CPU 的编址与寻址：基于分段机制的内存管理   <strong>【连续物理内存分配</strong></li>
<li>CPU 的中断机制</li>
<li>外设：串口/并口/CGA（显示器），时钟（产生时钟中断），硬盘（读取）</li>
</ul>
</li>
<li><strong>Bootloader</strong><ul>
<li>编译运行 Bootloader 的过程</li>
<li>调试的方法</li>
<li>PC 启动 Bootloader 的过程</li>
<li>ELF执行文件的格式和加载</li>
<li>外设访问：读硬盘，在CGA上显示字符串</li>
</ul>
</li>
<li><strong>ucore OS</strong><ul>
<li>编译运行</li>
<li>启动过程</li>
<li>调试方法</li>
<li>函数调用关系：在汇编级了解函数调用栈的结构和处理过程</li>
<li>中断管理：与软件相关的中断处理    <strong>【系统调用，异常</strong></li>
<li>外设管理：时钟</li>
</ul>
</li>
</ul>
<h1 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2 实验内容"></a>2 实验内容</h1><ul>
<li>lab 1 中包含一个 Bootloader 和 一个 OS<ul>
<li>Bootloader 可以切换到 x86 保护模式，能够读磁盘并加载ELF执行文件格式，并显示字符</li>
<li>OS 只是一个可以处理时钟中断并显示字符的 OS</li>
</ul>
</li>
</ul>
<h2 id="2-1-练习"><a href="#2-1-练习" class="headerlink" title="2.1 练习"></a>2.1 练习</h2><ul>
<li>lab 1 提供了 6 个<strong>基本练习</strong>和 1 个<strong>扩展练习</strong></li>
<li>完成实验报告<ul>
<li>基于markdown 格式，以文本方式为主</li>
<li>填写各个基本练习中要求完成的报告内容</li>
<li>完成试验后，分析 ucore_lab 提供的参考答案，并在实验报告中说明你的实现与参考答案的区别</li>
<li>列出本实验中重要的知识点，以及对应的 OS 原理知识点，并简要说明你对二者的含义，关系，差异等方面的理解</li>
<li>列出你认为 OS 原理中很重要，但实验中没有对应的知识点</li>
</ul>
</li>
</ul>
<h3 id="练习一：理解通过-make-生成执行文件的过程"><a href="#练习一：理解通过-make-生成执行文件的过程" class="headerlink" title="练习一：理解通过 make 生成执行文件的过程"></a>练习一：理解通过 make 生成执行文件的过程</h3><ul>
<li>通过静态分析代码来了解：<ul>
<li><strong>操作系统镜像文件</strong> <code>ucore.img</code> 如何一步一步生成的（需要比较详细的解释Makefile 中每一条相关命令和命令参数的含义，以及说明命令导致的结果）</li>
<li>一个被系统认为是符合规范的<strong>硬盘主引导扇区</strong>的特征是什么</li>
</ul>
</li>
<li>补充材料：<ul>
<li>如何调试 <code>Makefile</code></li>
<li>当执行 <code>make</code>时，一般只会显示输出，不会显示 <code>make</code>执行了那些命令</li>
<li>如想了解 <code>make</code>执行那些命令，可以执行 <code>make V=</code></li>
<li>上网查询 make，执行 <code>man make</code></li>
</ul>
</li>
</ul>
<h4 id="报告"><a href="#报告" class="headerlink" title="报告"></a>报告</h4><h5 id="问题一：操作系统镜像文件-ucore-img-如何一步一步生成的（需要比较详细的解释Makefile-中每一条相关命令和命令参数的含义，以及说明命令导致的结果）"><a href="#问题一：操作系统镜像文件-ucore-img-如何一步一步生成的（需要比较详细的解释Makefile-中每一条相关命令和命令参数的含义，以及说明命令导致的结果）" class="headerlink" title="问题一：操作系统镜像文件 ucore.img 如何一步一步生成的（需要比较详细的解释Makefile 中每一条相关命令和命令参数的含义，以及说明命令导致的结果）"></a><strong>问题一：</strong>操作系统镜像文件 <code>ucore.img</code> 如何一步一步生成的（需要比较详细的解释Makefile 中每一条<strong>相关命令</strong>和<strong>命令参数</strong>的含义，以及说明命令导致的结果）</h5><ul>
<li><p><strong>GCC</strong> 相关编译选项：</p>
<ul>
<li><blockquote>
<p><strong>GCC</strong><br><code>-g</code>  增加gdb的调试信息<br><code>-Wall</code>   显示告警信息<br><code>-O2 </code>    优化处理 (有 0，1，2，3，0是不优化)<br><code>-fno-builtin</code>   只接受以”__”开头的内建函数<br><code>-ggdb</code>   让gcc为gdb生成比较丰富的调试信息<br><code>-m32</code>    编译32位程序<br><code>-gstabs</code>     此选项以stabs格式生成调试信息，但是不包括gdb调试信息<br><code>-nostdinc</code>   不在标准系统目录中搜索头文件，只在-l指定的目录中搜索<br><code>-fstack-protector-all </code>  启用堆栈保护，为所有函数插入保护代码<br><code>-E</code>  仅做预处理，不进行编译，汇编和链接<br><code>-x c</code>  指明使用的语言为C语言</p>
<p><strong>LDD Flags</strong><br><code>-nostdlib</code>   不连接系统标准启动文件和标准库文件，只把指定的文件传递给连接器<br><code>-m elf\_i386</code>    使用 <code>elf_i386</code>模拟器<br><code>-N</code>      把text和data节设置为可读写，同时取消数据节的页对齐，取消对共享库的链接<br><code>-e func</code>     以符号 <code>func</code>的位置作为程序开始运行的位置<br><code>-Ttext addr</code>  是连接时将初始地址重定向为 <code>addr</code> （若不注明此，则程序的起始地址为0）</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>编译 bootloader</strong></p>
<ul>
<li><p>用于<strong>加载</strong> Kernel 操作系统</p>
</li>
<li><p>先把 <code>bootasm.S</code> , <code>bootmain.c</code> 编译成相应的 <strong>目标文件</strong></p>
</li>
<li><p>在使用<strong>连接器</strong>连接到一起，使用 <code>start</code> 符号作为入口，并指定 text 段在程序中的绝对位置 是 <code>0x7c00</code></p>
<ul>
<li><code>0x7c00</code> : 是<strong>操作系统一开始加载的地址</strong></li>
</ul>
</li>
<li><p>```bash<br>//bootasm.o</p>
<ul>
<li>cc boot/bootasm.S<br>gcc -Iboot/ -fno-builtin  -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootasm.S -o obj/boot/bootasm.o</li>
</ul>
<p>//生成bootmain.o</p>
<ul>
<li>cc boot/bootmain.c<br>gcc -Iboot/ -fno-builtin  -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Os -nostdinc -c boot/bootmain.c -o obj/boot/bootmain.o</li>
</ul>
<p>//ld bin/bootblock<br>ld -m    elf_i386 -nostdlib -N -e start -Ttext 0x7C00 obj/boot/bootasm.o obj/boot/bootmain.o -o obj/bootblock.o</p>
<p>‘obj/bootblock.out’ size: 468 bytes<br>build 512 bytes boot sector: ‘bin/bootblock’ success!</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* **编译 Kernel**</span><br><span class="line"></span><br><span class="line">  * 操作系统本身</span><br><span class="line">  * 先把.c文件 和 .S 汇编文件生成**目标文件**，之后使用**连接器**生成 Kernel</span><br><span class="line">  * ```bash</span><br><span class="line">    + cc kern/init/init.c</span><br><span class="line">    gcc -Ikern/init/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/init/init.c -o obj/kern/init/init.o</span><br><span class="line">    + cc kern/libs/readline.c</span><br><span class="line">    gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/readline.c -o obj/kern/libs/readline.o</span><br><span class="line">    + cc kern/libs/stdio.c</span><br><span class="line">    gcc -Ikern/libs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/libs/stdio.c -o obj/kern/libs/stdio.o</span><br><span class="line">    + cc kern/debug/kdebug.c</span><br><span class="line">    gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kdebug.c -o obj/kern/debug/kdebug.o</span><br><span class="line">    + cc kern/debug/kmonitor.c</span><br><span class="line">    gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/kmonitor.c -o obj/kern/debug/kmonitor.o</span><br><span class="line">    + cc kern/debug/panic.c</span><br><span class="line">    gcc -Ikern/debug/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/debug/panic.c -o obj/kern/debug/panic.o</span><br><span class="line">    + cc kern/driver/clock.c</span><br><span class="line">    gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/clock.c -o obj/kern/driver/clock.o</span><br><span class="line">    + cc kern/driver/console.c</span><br><span class="line">    gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/console.c -o obj/kern/driver/console.o</span><br><span class="line">    + cc kern/driver/intr.c</span><br><span class="line">    gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/intr.c -o obj/kern/driver/intr.o</span><br><span class="line">    + cc kern/driver/picirq.c</span><br><span class="line">    gcc -Ikern/driver/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/driver/picirq.c -o obj/kern/driver/picirq.o</span><br><span class="line">    + cc kern/trap/trap.c</span><br><span class="line">    gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trap.c -o obj/kern/trap/trap.o</span><br><span class="line">    + cc kern/trap/trapentry.S</span><br><span class="line">    gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/trapentry.S -o obj/kern/trap/trapentry.o</span><br><span class="line">    + cc kern/trap/vectors.S</span><br><span class="line">    gcc -Ikern/trap/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/trap/vectors.S -o obj/kern/trap/vectors.o</span><br><span class="line">    + cc kern/mm/pmm.c</span><br><span class="line">    gcc -Ikern/mm/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/ -Ikern/debug/ -Ikern/driver/ -Ikern/trap/ -Ikern/mm/ -c kern/mm/pmm.c -o obj/kern/mm/pmm.o</span><br><span class="line">    + cc libs/printfmt.c</span><br><span class="line">    gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/printfmt.c -o obj/libs/printfmt.o</span><br><span class="line">    + cc libs/string.c</span><br><span class="line">    gcc -Ilibs/ -fno-builtin -Wall -ggdb -m32 -gstabs -nostdinc  -fno-stack-protector -Ilibs/  -c libs/string.c -o obj/libs/string.o</span><br><span class="line"></span><br><span class="line">    + ld bin/kernel</span><br><span class="line">    ld -m    elf_i386 -nostdlib -T tools/kernel.ld -o bin/kernel  obj/kern/init/init.o obj/kern/libs/readline.o obj/kern/libs/stdio.o obj/kern/debug/kdebug.o obj/kern/debug/kmonitor.o obj/kern/debug/panic.o obj/kern/driver/clock.o obj/kern/driver/console.o obj/kern/driver/intr.o obj/kern/driver/picirq.o obj/kern/trap/trap.o obj/kern/trap/trapentry.o obj/kern/trap/vectors.o obj/kern/mm/pmm.o  obj/libs/printfmt.o obj/libs/string.o</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>编译 sign</strong></p>
<ul>
<li>用于生成一个<strong>符合规范</strong> 的 <strong>硬盘主引导扇区</strong></li>
<li>```bash<ul>
<li>cc tools/sign.c<br>gcc -Itools/ -g -Wall -O2 -c tools/sign.c -o obj/sign/tools/sign.o<br>gcc -g -Wall -O2 obj/sign/tools/sign.o -o bin/sign<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* **生成 ucore.img**</span><br><span class="line"></span><br><span class="line">  * **dd** - **转换和拷贝文件**</span><br><span class="line"></span><br><span class="line">    * &gt; `if`  代表**输入文件**。如果不指定if，默认就会从 `stdin`中读取输入。</span><br><span class="line">      &gt; `of`  代表**输出文件**。如果不指定of，默认就会将 `stdout`作为默认输出。</span><br><span class="line">      &gt; `bs` 代表字节为单位的块大小。</span><br><span class="line">      &gt; `count` 代表被复制的块数。</span><br><span class="line">      &gt; `/dev/zero` 是一个字符设备，会不断返回0值字节（\0）</span><br><span class="line">      &gt; `conv=notrunc`    输入文件的时候，源文件不会被截断</span><br><span class="line">      &gt; `seek=blocks`     从输出文件开头跳过 blocks(512字节) 个块后再开始复制</span><br><span class="line">      &gt;</span><br><span class="line">  * **过程**：生成一个空的软盘镜像，然后把 bootloader 以不截断的方式填充到**开始的块**中，然后 kernel 跳过bootloader 所在的块，再填充</span><br><span class="line">  * ```bash</span><br><span class="line">    dd if=/dev/zero of=bin/ucore.img count=10000</span><br><span class="line">    dd if=bin/bootblock of=bin/ucore.img conv=notrunc</span><br><span class="line">    dd if=bin/kernel of=bin/ucore.img seek=1 conv=notrunc</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
<p><strong>uCore.img的生成过程：</strong></p>
<ol>
<li><strong>编译</strong>所有生成 bin/<strong>kernel</strong> 所需的文件(.S汇编文件, .c文件)</li>
<li><strong>链接</strong>生成 bin/<strong>kernel</strong></li>
<li><strong>编译</strong> bootasm.S bootmain.c  sign.c</li>
<li>根据 sign 规范<strong>生成</strong> obj/bootblock.o</li>
<li>生成 <strong>ucore.img</strong></li>
</ol>
<ul>
<li><p><strong>生成 Kernel 文件</strong></p>
<ol>
<li>根据 .c, .s 文件生成 .o文件</li>
<li>根据 <code>kernel.ld </code>文件，使用 <code>ld</code>链接器，将 .o 文件链接成 kernel 文件</li>
</ol>
</li>
<li><p><strong>生成 Bootblock 文件</strong></p>
<ol>
<li>将 <code>bootasm.S</code> , <code>bootmain.c </code>编译成各自相对应 .o 文件，并生成 .d</li>
<li>使用 链接器 将 .o 文件生成 bootblock.o 文件</li>
<li>使用 <code>objcopy</code> 将 bootblock.o 二进制拷贝至 <code>bootblock.out</code></li>
<li><code>sign.c</code> 生成 <code>sign.o</code>， 再由 <code>sign.o </code>生成 sign 文件</li>
<li>用 <code>sig</code>n 程序，利用 <code>bootblock.out</code>生成 bootblock 文件</li>
</ol>
</li>
<li><p><strong>利用dd命令，使用 kernel、bootblock 生成 ucore.img</strong></p>
<ol>
<li><p>从 <code>/dev/zero</code> 文件，获得 10000 个block（每个block 512 字节），均为空字符，输出到 ucore.img</p>
</li>
<li><p>从 bootblock 文件中获取数据，输出到 ucore.img 中的第一个block</p>
<ul>
<li><code>-notruct</code> 不对数据进行删减</li>
</ul>
</li>
<li><p>从 kernel 文件获取数据，输出到 ucore.img 的第二个 block</p>
<ul>
<li><code>seek = 1</code> 跳过第一个block</li>
</ul>
</li>
</ol>
</li>
</ul>
<h5 id="问题二：一个被系统认为是符合规范的-硬盘主引导扇区-的特征是什么"><a href="#问题二：一个被系统认为是符合规范的-硬盘主引导扇区-的特征是什么" class="headerlink" title="问题二：一个被系统认为是符合规范的 硬盘主引导扇区 的特征是什么"></a><strong>问题二：</strong>一个被系统认为是<strong>符合规范的 硬盘主引导扇区 的特征</strong>是什么</h5><ul>
<li><code>less tools/sign.c</code><ul>
<li><img src="C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210405162827372.png" alt="image-20210405162827372"></li>
<li>该扇区第 510 个字节是 <code>0x55</code>, 第 511 个字节是 <code>0xAA</code></li>
<li>该扇区有 512 个字节</li>
<li>多余空间填 0</li>
</ul>
</li>
</ul>
<h3 id="练习二：使用-qemu-执行并调试-lab-1-中的软件（在报告中写出练习过程）"><a href="#练习二：使用-qemu-执行并调试-lab-1-中的软件（在报告中写出练习过程）" class="headerlink" title="练习二：使用 qemu 执行并调试 lab 1 中的软件（在报告中写出练习过程）"></a>练习二：使用 qemu 执行并调试 lab 1 中的软件（在报告中写出练习过程）</h3><ul>
<li><p><strong>为了熟悉使用 qemu 和 gdb 进行的调试工作，小练习：</strong></p>
<ol>
<li>从 CPU 加电后执行的第一条指令开始，单步跟踪 BIOS 的执行</li>
<li>在初始化位置设置 0x7c00 设置时地址断点，测试断点正常</li>
<li>从 0x7c00 开始跟踪代码运行，将单步跟踪反汇编得到的代码与 bootasm.S 和 bootblock.asm 进行比较</li>
<li>自己找一个 bootloader 或内核中的代码位置，设置断点并进行测试</li>
</ol>
</li>
<li><p>提示：参考 附录“启动后第一条执行的指令”，可了解更详细的解释，以及如何单步调试并查看 BIOS 代码</p>
</li>
<li><p>提示：查看 <code>labcodes_answer/lab1_result/tools/lab1init </code>文件，用如下命令试试如何调试bootloader第一条指令：</p>
<ul>
<li>```<br>$ cd labcodes_answer/lab1_result/<br>$ make lab1-mon<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* **默认的 gdb 需要进行一些额外的配置才进行 qemu 的调试**，qemu 和gdb之间使用 网络端口 1234 进行通讯</span><br><span class="line"></span><br><span class="line">  * 打开qemu 进行模拟之后，执行gdb并输入 `target remote local:1234`</span><br><span class="line">  * 可连接qemu，此时qemu进入停止状态，听从 gdb 命令</span><br><span class="line">* *gdb 的地址断点*：</span><br><span class="line"></span><br><span class="line">  * `b *[地址]`：在指定内存地址设置断点，当qemu 中的 CPU 执行到指定地址时，便会将控制权交给 gdb</span><br><span class="line">* *关于代码的反汇编*</span><br><span class="line"></span><br><span class="line">  * 可能 gdb 无法正确获取 当前 qemu 执行的汇编指令，如下配置可以在每次 gdb 命令行前强制反汇编当前的指令，在 gdb 命令行或配置文件中添加：</span><br><span class="line"></span><br><span class="line">    * ```</span><br><span class="line">      define hook-stop</span><br><span class="line">      x/i $pc</span><br><span class="line">      end</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><em>gdb 的单步命令：</em></p>
<ul>
<li>next ： 单步到程序源代码的下一行，不进入函数</li>
<li>nexti ： 但不一条机器指令，不进入函数</li>
<li>step：单步到下一个不同的源代码行（进入函数）</li>
<li>stepi：单步一条机器指令，进入函数</li>
</ul>
</li>
</ul>
<h4 id="报告-1"><a href="#报告-1" class="headerlink" title="报告"></a>报告</h4><h5 id="2-1-从CPU-加电后执行的第一条指令开始，单步跟踪-BIOS-的执行"><a href="#2-1-从CPU-加电后执行的第一条指令开始，单步跟踪-BIOS-的执行" class="headerlink" title="2.1 从CPU 加电后执行的第一条指令开始，单步跟踪 BIOS 的执行"></a>2.1 从CPU 加电后执行的第一条指令开始，单步跟踪 BIOS 的执行</h5><ul>
<li><p>附录：<strong>单步调试和查看 BIOS 代码</strong></p>
<ol>
<li><p>修改 <code> lab1/tools/gdbinit</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set architecture i8086</span><br><span class="line">target remote :1234</span><br></pre></td></tr></table></figure></li>
<li><p>在 lab 1 目录下，执行 <code>make debug</code></p>
<p>这时，gdb 停在 BIOS 的第一条指令处：<code>0xffff0: ljmp $0xf000, $0xe05b</code></p>
</li>
<li><p>在进入 gdb 调试界面后，执行如下命令，可以看到 BIOS 在执行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">si</span><br><span class="line">si</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>此时的 <code>CS=0xf, IP=fff0</code>,如果想看 BIOS 代码</p>
<p><code>x /2i 0xffff0</code></p>
<p>可以看到：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0xffff0: ljmp $0xf000,$0xe05b</span><br><span class="line">0xffff5: xor %dh,0x322f</span><br></pre></td></tr></table></figure>

<p>进一步执行 <code>x /10i 0xfe05b</code></p>
<p>可以看到后续代码</p>
</li>
</ol>
</li>
<li><p><code>gdbinit  </code>原内容为：对内核代码进行调试，并且将断点设置在内核代码的入口地址，即 <code>kern_intit</code>  函数</p>
<ul>
<li>```<br>file bin/kernel            //对内核代码进行调试<br>target remote :1234<br>break kern_init            //将断点设置在kern_init<br>continue<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 为了从CPU 加电后执行的第一条指令开始调试，将 `gdbinit`内容改为：</span><br><span class="line"></span><br><span class="line">  * ```</span><br><span class="line">    set architecture i8086		//改动</span><br><span class="line"></span><br><span class="line">    target remote :1234</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>执行 <code>make debug</code>：弹出 QEMU 和 Terminal窗口，因为我们在 Makefile 中定义了debug的操作正是启动 QEMU、Terminal并在其中运行 gdb</p>
<ul>
<li><p>-hda file: 硬盘选项</p>
</li>
<li><p>-S : 启动的时候不直接从CPU启动，需要在窗口中按 c 来继续</p>
</li>
<li><p>-parallel dev : 重定向虚拟<strong>并口</strong>到主机设备</p>
</li>
<li><p>-serial dev：重定向虚拟<strong>串口</strong>到主机设备</p>
<ul>
<li>vc: 虚拟控制台</li>
<li>pty：仅仅linux有效，虚拟tty（一个虚拟伪终端会被立刻分配</li>
<li>none：没有设备被分配</li>
<li>null：无效设备</li>
</ul>
</li>
<li><p>gdb：</p>
<ul>
<li>-x ：从文件中执行 gdb</li>
<li>-q：不要打印介绍和版权信息</li>
<li>-tui：可以将终端屏幕分成源文本窗口和控制台的多个子窗口</li>
</ul>
</li>
<li><p>```<br>debug: $(UCOREIMG)</p>
<pre><code>$(V)$(QEMU) -S -s -parallel stdio -hda $&lt; -serial null &amp;    
$(V)sleep 2
$(V)$(TERMINAL) -e &quot;gdb -q -tui -x tools/gdbinit&quot;
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* `make debug` : Terminal 窗口此时停在 `0x0000fff0`位置，这是 eip 寄存器的值</span><br><span class="line"></span><br><span class="line">      而cs 寄存器的值为`0xf000`</span><br><span class="line"></span><br><span class="line">  ![image-20210406205944058](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210406205944058.png)</span><br><span class="line">* 输入 `si`，执行一步, eip 变成 `0xe05b`，而cs 不变</span><br><span class="line"></span><br><span class="line">  * ![image-20210406210105732](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210406210105732.png)</span><br><span class="line"></span><br><span class="line">##### 2.2 在初始化位置设置 0x7c00 设置时地址断点，测试断点正常</span><br><span class="line"></span><br><span class="line">* `break *adress`: 在指定地址处设置断点，一般在没有源代码时使用</span><br><span class="line">* 输入 `break *0x7c00`</span><br><span class="line">* 输入 `continue`</span><br><span class="line"></span><br><span class="line">  * ![image-20210406210223703](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210406210223703.png)</span><br><span class="line"></span><br><span class="line">##### 2.3 从 0x7c00 开始跟踪代码运行，将单步跟踪反汇编得到的代码与 bootasm.S 和 bootblock.asm 进行比较</span><br><span class="line"></span><br><span class="line">* `x/10i $pc`:显示程序当前位置开始往后 10 条汇编指令</span><br><span class="line">* 输入 `x/10i $pc`</span><br><span class="line"></span><br><span class="line">  * ![image-20210406210251460](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210406210251460.png)</span><br><span class="line"></span><br><span class="line">##### 2.4 自己找一个 bootloader 或内核中的代码位置，设置断点并进行测试</span><br><span class="line"></span><br><span class="line">* 调试 bootblock 的代码</span><br><span class="line">* 设置断点为 0x7c00地址 处</span><br><span class="line">* 修改 `tools/gdbinit`为</span><br><span class="line"></span><br><span class="line">  * ```</span><br><span class="line">    //tools/gdbinit&quot;  </span><br><span class="line">    file obj/bootblock.o </span><br><span class="line">    target remote :1234 </span><br><span class="line">    set architecture i8086 </span><br><span class="line">    b *0x7c00 </span><br><span class="line">    continue </span><br><span class="line">    x /10i $pc</span><br></pre></td></tr></table></figure></li>
<li><p>![image-20210405213757021](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210405213757021.png)</p>
</li>
<li><p>![image-20210405213817816](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210405213817816.png)</p>
</li>
</ul>
</li>
</ul>
<h3 id="练习三：分析-bootloader-进入保护模式的过程"><a href="#练习三：分析-bootloader-进入保护模式的过程" class="headerlink" title="练习三：分析 bootloader 进入保护模式的过程"></a>练习三：分析 bootloader 进入保护模式的过程</h3><ul>
<li><strong>BIOS</strong> 将通过<strong>读取硬盘主引导扇区到内存</strong>，并跳转到对应内存中的位置执行 bootloader</li>
<li>分析 bootloader 如何从实模式进入保护模式</li>
<li>需要阅读：<strong>保护模式和分段机制</strong> 和 <code>lab1/boot/bootasm.S</code> 源码，<ul>
<li>为何开启 A20 ，以及如何开启</li>
<li>如何初始化 GDT 表</li>
<li>如何 使能 和 进入保护模式</li>
</ul>
</li>
</ul>
<h4 id="报告-2"><a href="#报告-2" class="headerlink" title="报告"></a>报告</h4><p>bootloader 从实模式进入保护模式的代码 保持在 <code>lab1/boot/bootasm.S</code> 中</p>
<h5 id="为何开启-A20-，-如何开启A-20"><a href="#为何开启-A20-，-如何开启A-20" class="headerlink" title="为何开启 A20 ， 如何开启A 20"></a>为何开启 A20 ， 如何开启A 20</h5><ul>
<li><p>bootloader 的入口 为 start</p>
</li>
<li><p>bootloader 会被 BIOS 加载到内存 <code>0x7c00</code> 处 <code>cs = 0, eip = 0x7c</code></p>
</li>
<li><p>刚进入 bootloader 时，先执行：</p>
<ul>
<li>![image-20210407191652178](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407191652178.png)</li>
<li>关闭中断</li>
<li>清除 <code>EFLAGS</code> 的 <code> DF</code> 位</li>
<li>将 <code>ax、ds、es、ss</code> 初始化为0</li>
</ul>
</li>
<li><p><strong>为何开启 A20 :</strong></p>
<ul>
<li>为了使得 CPU 进入保护模式后，能充分使用 32 位的寻址能力</li>
</ul>
</li>
<li><p><strong>如何开启 A20：</strong></p>
<ul>
<li>等待 8042 控制器 Input Buffer为空</li>
<li>发送 P2命令到Input Buffer</li>
<li>等待 Input Buffer 为空</li>
<li>将 P2 得到的第二个位（A20选通）置为1</li>
<li>写回Input Buffer</li>
</ul>
</li>
<li><p>首先，从0x64内存地址中（映射到8042的status register）中读取8042的状态，直到读取到的该字节的第二位（input buffer）为0，表示此时 input buffer中无数据</p>
<ul>
<li>![image-20210407194037024](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407194037024.png)</li>
</ul>
</li>
<li><p>接下来向 0x64 中写入 0xd1 命令，表示修改 8042 P2 port</p>
<ul>
<li>![image-20210407194155534](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407194155534.png)</li>
</ul>
</li>
<li><p>接下来等待 input buffer为空</p>
<ul>
<li>![image-20210407194234798](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407194234798.png)</li>
</ul>
</li>
<li><p>接下来，向 0x60 端口写入 0xdf, 表示将 P2 port的第二个位（A20）选通，置为1</p>
<ul>
<li>![image-20210407194403140](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407194403140.png)</li>
</ul>
</li>
<li></li>
</ul>
<h5 id="如何初始化-GDT（全局描述符表）"><a href="#如何初始化-GDT（全局描述符表）" class="headerlink" title="如何初始化 GDT（全局描述符表）"></a>如何初始化 GDT（全局描述符表）</h5><ul>
<li>在 bootasm.S 中已经静态的描述了一个简单的 GDT<ul>
<li>![image-20210407194832302](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407194832302.png)</li>
<li>GDT 中代码段和数据段 的base均设置为了 0</li>
<li>而 limit设置为了 2^32-1 即 4 G，使得逻辑地址等于线性地址</li>
</ul>
</li>
</ul>
<h5 id="如何-使能-和-进入保护模式"><a href="#如何-使能-和-进入保护模式" class="headerlink" title="如何 使能 和 进入保护模式"></a>如何 使能 和 进入保护模式</h5><ul>
<li>只需要将cr0 寄存器的PE位 置为1，即可切换至保护模式<ul>
<li>A20 开启后，<code>lgdt gdtdesc</code> 可载入全局描述符表</li>
<li>![image-20210407195211157](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407195211157.png)</li>
</ul>
</li>
<li>使用长跳转指令 , 将 cs 修改为 32 位寄存器，并且跳转到 protcseg 这一32位代码入口，此时CPU进入32位模式：<ul>
<li>![image-20210407195333677](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407195333677.png)</li>
</ul>
</li>
</ul>
<h3 id="练习四：分析-bootloader-加载-ELF-格式的-OS-的过程"><a href="#练习四：分析-bootloader-加载-ELF-格式的-OS-的过程" class="headerlink" title="练习四：分析 bootloader 加载 ELF 格式的 OS 的过程"></a>练习四：分析 bootloader 加载 ELF 格式的 OS 的过程</h3><p>要求：</p>
<ul>
<li>通过阅读 <code>bootmain.c</code>, 了解 bootloader 如何加载 ELF 文件</li>
<li>通过分析源代码和通过 qemu 来运行 并调试bootloader和OS<ul>
<li>bootloader 如何读取硬盘扇区</li>
<li>bootloader 如何加载 ELF 格式的 OS</li>
</ul>
</li>
</ul>
<h4 id="报告-3"><a href="#报告-3" class="headerlink" title="报告"></a>报告</h4><h5 id="bootloader-如何读取硬盘扇区"><a href="#bootloader-如何读取硬盘扇区" class="headerlink" title="bootloader 如何读取硬盘扇区"></a>bootloader 如何读取硬盘扇区</h5><p>对 bootmain.c 中与读取硬盘扇区代码分析：</p>
<ul>
<li><p>首先，<code>waitdisk</code>, 该函数的作用是连续不断地从 <code>0x1f7</code>地址，读取磁盘的状态，直到磁盘不忙为止</p>
<ul>
<li>![image-20210407204024075](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407204024075.png)</li>
</ul>
</li>
<li><p>接下来，<code>readsect</code>, 读取一个硬盘扇区，</p>
<ul>
<li><p>```c<br>static void<br>readsect(void *dst, uint32_t secno) {</p>
<pre><code>waitdisk(); // 等待磁盘到不忙为止

outb(0x1F2, 1);             // 往0X1F2地址中写入要读取的扇区数，由于此处需要读一个扇区，因此参数为1
outb(0x1F3, secno &amp; 0xFF); // 输入LBA参数的0...7位；
outb(0x1F4, (secno &gt;&gt; 8) &amp; 0xFF); // 输入LBA参数的8-15位；
outb(0x1F5, (secno &gt;&gt; 16) &amp; 0xFF); // 输入LBA参数的16-23位；
outb(0x1F6, ((secno &gt;&gt; 24) &amp; 0xF) | 0xE0); // 输入LBA参数的24-27位（对应到0-3位），第四位为0表示从主盘读取，其余位被强制置为1；
outb(0x1F7, 0x20);                      // 向磁盘发出读命令0x20

waitdisk(); // 等待磁盘直到不忙

insl(0x1F0, dst, SECTSIZE / 4); // 从数据端口0x1F0读取数据，除以4是因为此处是以4个字节为单位的，这个从指令是以l(long)结尾这点可以推测出来；
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  * **读取磁盘扇区的过程：**</span><br><span class="line"></span><br><span class="line">    * 等待磁盘不忙</span><br><span class="line">    * 向 `0x1f2-0x1f6`中 设置读取扇区需要的参数，</span><br><span class="line">      * 读取的扇区数</span><br><span class="line">      * LBA 参数</span><br><span class="line">    * 向 `0x1f7`发送命令 `0X20`——读命令</span><br><span class="line">    * 等待磁盘完成读操作</span><br><span class="line">    * 从数据端口 `0x1f0`读取数据到指定内存中</span><br><span class="line">* 另外一个与读取磁盘相关的函数 `readseg`，</span><br><span class="line"></span><br><span class="line">  * 将 `readsec`进一步封装</span><br><span class="line">  * 提供能够从磁盘 第二个扇区起（kernel） offset 个位置处，读取 count 个字节到指定内存</span><br><span class="line">  * `readsec` 只能对整个扇区进行读取</span><br><span class="line"></span><br><span class="line">##### bootloader 如何将 ELF 格式的 OS 加载入内存</span><br><span class="line"></span><br><span class="line">* bootloader 加载 ELF 格式的 OS 代码位于·`bootmain.c` 中的 bootmain 函数</span><br><span class="line">  * **首先，**从磁盘的第一个扇区（kernel，第零个扇区为bootloader）中读取kernel最开始的 4 KB代码，然后判断最开始的四个字节是否等于指定的 `ELF_MAGIC`, 用于判断 ELF header是否合法</span><br><span class="line">    * ![image-20210407205626699](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407205626699.png)</span><br><span class="line">  * **接下来**，从 `ELFHDR `——ELF 头文件中获取到 `program header`**表**的位置，以及该表的入口数目，然后遍历该表每一项，并且从每一个program header中获取到 **段** 应该被加载到内存中的位置（Load Address，虚拟地址），以及段的大小，然后调用 `readseg` 函数将每一个段加载到内存中，至此完成了将 OS 加载到内存中的操作</span><br><span class="line">    * ![image-20210407210008007](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407210008007.png)</span><br><span class="line">  * **最后**，从 `ELFHDR`——ELF 头文件中查询到 OS kernel的**入口地址**，然后使用函数调用的方式跳转到该地址</span><br><span class="line">    * ![image-20210407210213172](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210407210213172.png)</span><br><span class="line"></span><br><span class="line">### 练习五：实现函数调用堆栈跟踪函数</span><br><span class="line"></span><br><span class="line">* 在 `lab1` 中完成 `kdebug.c` 中函数 `print_stackframe`的实现</span><br><span class="line"></span><br><span class="line">  * 可以通过该函数 跟踪函数调用堆栈中记录的返回地址</span><br><span class="line">* 若能正确实现该函数，`make qemu`后：</span><br><span class="line"></span><br><span class="line">  * ```bash</span><br><span class="line">    ……</span><br><span class="line">    ebp:0x00007b28 eip:0x00100992 args:0x00010094 0x00010094 0x00007b58 0x00100096</span><br><span class="line">        kern/debug/kdebug.c:305: print_stackframe+22</span><br><span class="line">    ebp:0x00007b38 eip:0x00100c79 args:0x00000000 0x00000000 0x00000000 0x00007ba8</span><br><span class="line">        kern/debug/kmonitor.c:125: mon_backtrace+10</span><br><span class="line">    ebp:0x00007b58 eip:0x00100096 args:0x00000000 0x00007b80 0xffff0000 0x00007b84</span><br><span class="line">        kern/init/init.c:48: grade_backtrace2+33</span><br><span class="line">    ebp:0x00007b78 eip:0x001000bf args:0x00000000 0xffff0000 0x00007ba4 0x00000029</span><br><span class="line">        kern/init/init.c:53: grade_backtrace1+38</span><br><span class="line">    ebp:0x00007b98 eip:0x001000dd args:0x00000000 0x00100000 0xffff0000 0x0000001d</span><br><span class="line">        kern/init/init.c:58: grade_backtrace0+23</span><br><span class="line">    ebp:0x00007bb8 eip:0x00100102 args:0x0010353c 0x00103520 0x00001308 0x00000000</span><br><span class="line">        kern/init/init.c:63: grade_backtrace+34</span><br><span class="line">    ebp:0x00007be8 eip:0x00100059 args:0x00000000 0x00000000 0x00000000 0x00007c53</span><br><span class="line">        kern/init/init.c:28: kern_init+88</span><br><span class="line">    ebp:0x00007bf8 eip:0x00007d73 args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8</span><br><span class="line">    &lt;unknow&gt;: -- 0x00007d72 –</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>前置知识：函数堆栈：</p>
<ul>
<li>了解编译器如何建立<strong>函数调用关系</strong></li>
<li>查看 <code>bootblock.asm</code>, 了解bootloader源码与机器码的语句和地址等对应关系</li>
<li>查看 <code>kernel.asm</code>, 了解 ucore 源码与机器码的语句和地址等对应关系</li>
<li>完成 <code>kern/debug/kdebug.c::print_stackframe</code>的实现</li>
</ul>
</li>
</ul>
<h4 id="报告-4"><a href="#报告-4" class="headerlink" title="报告"></a>报告</h4><p>前提知识：</p>
<p>一般而言：<code>ss:[ebp+4]</code>为<strong>返回地址</strong>，<code>ss:[ebp+8]</code>为<strong>第一个参数值（</strong>最后一个入栈）,<code>ss:[ebp-4]</code>为第一个局部变量，<code>ss:[ebp]</code>为<strong>上一层 ebp 值</strong></p>
<ul>
<li><strong>ebp 中的地址处总是上一层函数调用时 ebp 的值</strong></li>
<li>而每一层函数调用中，都能通过当时的 ebp 值，<strong>向上（栈底方向）获取返回地址，参数值；向下（栈顶方向）获取函数局部变量值</strong></li>
<li>由此形成递归，直至到达栈底，这就是函数调用栈</li>
</ul>
<p>我的做法：</p>
<ul>
<li><p>尝试根据他的注释来做：</p>
<ul>
<li><p>![image-20210409150011984](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210409150011984.png)</p>
</li>
<li><p>(1) 调用 函数 <code>read_ebp()</code>得到 ebp的值</p>
</li>
<li><p>(2) 调用函数 <code>read_eip()</code> 得到 eip的值</p>
</li>
<li><p>(3) 对于栈帧 <code>0-STACKFRAME_DEPTH</code></p>
<ul>
<li><p>使用 <code>cprintf</code>输出 ebp和eip的值</p>
</li>
<li><p>有了ebp的值，需要我们打印前四个参数值，而我们知道 第一个参数值 在 <code>ss:[ebp+8]</code>，可用 <code>(uint32_t*)（ebp+8）</code>取得该内存地址的值</p>
</li>
<li><p>使用 <code>print_debuginfo()</code>打印函数名</p>
</li>
<li><p><em>获取上一层函数的返回地址和ebp的值</em></p>
<ul>
<li><blockquote>
<p>根据动态链查找当前函数的调用者(caller)的栈帧, 根据约定，caller的栈帧的base pointer存放在callee的ebp指向的内存单元，将其更新到ebp临时变量中，同时将eip(代码中对应的变量为ra)更新为调用当前函数的指令的下一条指令所在位置（return address），其根据约定存放在ebp+4所在的内存单元中；</p>
</blockquote>
<blockquote>
<p>如果ebp非零并且没有达到规定的 <code>STACKFRAME DEPTH</code>的上限，则跳转到2，继续循环打印栈上栈帧和对应函数的信息；</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>unknown：</strong></p>
<ul>
<li><code>*(uint32_t*)x</code>: x是一个地址，<code>(unint32_t*)将x强制转换成指向unint32_t的指针</code></li>
<li><code>read_ebp()</code></li>
<li><code>read_eip()</code></li>
<li><code>STACKFRAME_DEPTH</code></li>
<li><code>cprintf(&quot;\n&quot;)</code></li>
<li><code>print_debuginfo()</code></li>
</ul>
</li>
<li><p>```C<br>void print_stackframe(void) {</p>
<pre><code>uint32_t value_ebp = read_ebp();
uint32_t value_eip = read_eip();
for(int i = 0; i&lt;STACKFRAME_DEPTH; i++)&#123;
    cprintf(&quot;ebp: 0x%08x eip:0x%08x&quot;,value_ebp, value_eip);
    cprintf(&quot;arguments: &quot;);

    uint32_t* p = (uint32_t*)(value_ebp+8);
    cprintf(&quot;0x%08x 0x%08x 0x%08x 0x%08x &quot;,p[0],p[1],p[2],p[3]); 
    //(uint32_t)calling arguments [0..4] = the contents in address (uint32_t)ebp +2 [0..4]

    cprintf(&quot;\n&quot;);
    print_debuginfo(value_eip-1);

    value_eip = *(uint32_t*)(value_ebp+4);
    value_ebp = *(uint32_t*)(value_ebp);
    //popup a calling stackframe
&#125;
</code></pre>
</li>
</ul>
<p>  }<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* ![image-20210409161023480](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210409161023480.png)</span><br><span class="line">* 实现函数</span><br><span class="line"></span><br><span class="line">1. 首先使用read_ebp和read_eip函数获取当前stack frame的base pointer以及 `call read_eip`这条指令下一条指令的地址，存入ebp, eip两个临时变量中；</span><br><span class="line">2. 接下来使用cprint函数打印出ebp, eip的数值；</span><br><span class="line">3. 接下来打印出当前栈帧对应的函数可能的参数，根据c语言编译到x86汇编的约定，可以知道参数存放在ebp+8指向的内存上（栈），并且第一个、第二个、第三个...参数所在的内存地址分别为ebp+8, ebp+12, ebp+16, ...，根据要求读取出当前函数的前四个参数(用可能这些参数并不是全都存在，视具体函数而定)，并打印出来；</span><br><span class="line">4. 使用print_debuginfo打印出当前函数的函数名；</span><br><span class="line">5. 根据动态链查找当前函数的调用者(caller)的栈帧, 根据约定，caller的栈帧的base pointer存放在callee的ebp指向的内存单元，将其更新到ebp临时变量中，同时将eip(代码中对应的变量为ra)更新为调用当前函数的指令的下一条指令所在位置（return address），其根据约定存放在ebp+4所在的内存单元中；</span><br><span class="line">6. 如果ebp非零并且没有达到规定的STACKFRAME DEPTH的上限，则跳转到2，继续循环打印栈上栈帧和对应函数的信息；</span><br><span class="line"></span><br><span class="line">```C</span><br><span class="line">void</span><br><span class="line">print_stackframe(void) &#123;</span><br><span class="line">    uint32_t ebp = read_ebp();</span><br><span class="line">    uint32_t ra = read_eip(); </span><br><span class="line">    for (int i = 0; i &lt; STACKFRAME_DEPTH &amp;&amp; ebp != 0; ++ i) &#123;</span><br><span class="line">        cprintf(&quot;ebp:0x%08x eip:0x%08x &quot;, ebp, ra);</span><br><span class="line">        uint32_t* ptr = (uint32_t *) (ebp + 8);</span><br><span class="line">        cprintf(&quot;args:0x%08x 0x%08x 0x%08x 0x%08x\n&quot;, ptr[0], ptr[1], ptr[2], ptr[3]);</span><br><span class="line">        print_debuginfo(ra - 1);</span><br><span class="line">        ra = *((uint32_t *) (ebp + 4));</span><br><span class="line">        ebp = *((uint32_t *) ebp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>分析最后一行输出各个数值的意义：</p>
</li>
<li><p>```css<br>ebp:0x00007bf8 eip:0x00007d6e args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8</p>
<pre><code>&lt;unknow&gt;: -- 0x00007d6d --
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* ![image-20210408100708052](E:\LearningNotes\TH操作系统\操作系统实验\Lab 1 系统软件启动过程.assets\image-20210408100708052.png)</span><br><span class="line"></span><br><span class="line">##### 解释最后一行各个数值</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">ebp:0x00007bf8 eip:0x00007d6e args:0xc031fcfa 0xc08ed88e 0x64e4d08e 0xfa7502a8</span><br><span class="line">    &lt;unknow&gt;: -- 0x00007d6d --</span><br></pre></td></tr></table></figure></li>
<li><p><code>ebp:0x00007bf8</code>:第一个被调用函数栈帧的base pointer</p>
</li>
<li><p><code>eip:0x00007d6e</code>: 该栈帧对应函数中调用的下一个栈帧对应函数的指令的下一条指令</p>
</li>
<li><p><code>args:0xc031fcfa 0xc08ed88e 0x64e4d08e</code>: 传递给第一个被调用函数的参数</p>
</li>
<li><p><code>   &lt;unknow&gt;: -- 0x00007d6d --</code> : bootmain 函数调用OS kernel入口函数的该指令的地址</p>
</li>
</ul>
<h3 id="练习六：完善中断初始化和处理"><a href="#练习六：完善中断初始化和处理" class="headerlink" title="练习六：完善中断初始化和处理"></a>练习六：完善中断初始化和处理</h3><ol>
<li>中断描述符表（保护模式下的中断向量表）中一个表项占多少字节？其中哪几位代表中断处理代码？</li>
<li>编程完善 <code>kern/trap/trap.c</code>中对中断向量表进行初始化的函数 <code>idt_init</code>, 在该函数中，依次对所有中断入口进行初始化。使用 <code>mmu.h</code>中的 <code>SETGATE</code>宏，填充 <code>idt</code>数组内容。每个中断入口由 <code>tools/vector.c</code>生成，使用 <code>trap.c</code>中声明的vectors数据即可</li>
<li>编程完善trap.c中的中断处理函数trap , 在对时钟中断进行处理的部分填写trap函数中处理时钟中断的部分，使操作系统每遇到100次时钟中断后，调用print_ticks子程序，向屏幕打印一行文字 <code>100 ticks</code></li>
</ol>
<ul>
<li>注意：<ul>
<li>除了系统调用（<code>T_SYSCALL</code>）使用 <strong>陷阱门描述符</strong> 且权限为 <strong>用户态权限</strong> 以外</li>
<li>其他中断均使用<strong>特权级（DPL）为0</strong>的 <strong>中断门描述符</strong></li>
<li>uCore的应用程序处于特权级 3 ，需采用 <code>int 0x80</code></li>
<li>系统调用中断 <code>T_SYSCALL</code>所对应的中断门描述符中的特权级设置为 3</li>
</ul>
</li>
<li>要求：<ul>
<li>完成问题2和问题3 提出的相关函数实现，提交改进后的源代码包（可以编译执行），并在实验报告中简要说明实现过程，并写出对问题1的回答</li>
<li>完成这问题2和3要求的部分代码后，运行整个系统，可以看到大约每1秒会输出一次”100 ticks”，而按下的键也会在屏幕上显示</li>
</ul>
</li>
</ul>
<h4 id="报告-5"><a href="#报告-5" class="headerlink" title="报告"></a>报告</h4><blockquote>
<p><strong>中断向量表调用关系</strong><br>系统发生中断—&gt;中断号（0~255）–&gt;找到IDT，拿到段选择子和偏移—–&gt; 拿着段选择子找GDT，找到段基址，再使用偏移跳转到程序入口地址</p>
</blockquote>
<h5 id="第一问"><a href="#第一问" class="headerlink" title="第一问"></a>第一问</h5><blockquote>
<p>中断描述符表（保护模式下的中断向量表）中一个表项占多少字节？其中哪几位代表中断处理代码？</p>
</blockquote>
<ul>
<li>中断向量表一个表项占用8字节</li>
<li>2-3字节是段选择子，0-1字节和6-7字节拼成偏移，两者联合便是中断处理程序的入口地址</li>
</ul>
<h5 id="第二问"><a href="#第二问" class="headerlink" title="第二问"></a>第二问</h5><blockquote>
<p>编程完善 <code>kern/trap/trap.c</code>中对中断向量表进行初始化的函数 <code>idt_init</code>, 在该函数中，依次对所有中断入口进行初始化。使用 <code>mmu.h</code>中的 <code>SETGATE</code>宏，填充 <code>idt</code>数组内容。每个中断入口由 <code>tools/vector.c</code>生成，使用 <code>trap.c</code>中声明的vectors数据即可</p>
</blockquote>
<ul>
<li><p>在idt.init函数中，依次对所有中断入口进行初始化，使用mmu.h中的SETGATE宏</p>
<ul>
<li><blockquote>
<p>#define SETGATE(gate, istrap, sel, off, dpl) {<br>(gate).gd_off_15_0 = (uint32_t)(off) &amp; 0xffff;<br>(gate).gd_ss = (sel);<br>(gate).gd_args = 0;<br>(gate).gd_rsv1 = 0;<br>(gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;<br>(gate).gd_s = 0;<br>(gate).gd_dpl = (dpl);<br>(gate).gd_p = 1;<br>(gate).gd_off_31_16 = (uint32_t)(off) &gt;&gt; 16;<br>}<br>参数：<br>gate:<br>istrap:陷阱门设为1，中断门设为0.<br>sel:段选择子，全局描述符表的代码段段选择子 //memlayout.h里面有宏定义GD_KTEXT<br>off:处理函数的入口地址，即__vectors[]中的内容。<br>dpl:特权级.从实验指导书中可知，ucore中的应用程序处于特权级3，内核态特权级为0.</p>
</blockquote>
</li>
</ul>
</li>
<li><p>根据注释：</p>
<ul>
<li>```C<br>/* LAB1 YOUR CODE : STEP 2 */<pre><code> /* (1) Where are the entry addrs of each Interrupt Service Routine (ISR)?
  *     All ISR&#39;s entry addrs are stored in __vectors. where is uintptr_t __vectors[] ?
  *     __vectors[] is in kern/trap/vector.S which is produced by tools/vector.c
  *     (try &quot;make&quot; command in lab1, then you will find vector.S in kern/trap DIR)
  *     You can use  &quot;extern uintptr_t __vectors[];&quot; to define this extern variable which will be used later.
  * (2) Now you should setup the entries of ISR in Interrupt Description Table (IDT).
  *     Can you see idt[256] in this file? Yes, it&#39;s IDT! you can use SETGATE macro to setup each item of IDT
  * (3) After setup the contents of IDT, you will let CPU know where is the IDT by using &#39;lidt&#39; instruction.
  *     You don&#39;t know the meaning of this instruction? just google it! and check the libs/x86.h to know more.
  *     Notice: the argument of lidt is idt_pd. try to find it!
  */
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* ```C</span><br><span class="line">  void</span><br><span class="line">  idt_init(void) &#123;</span><br><span class="line">      extern uintptr_t __vectors[];</span><br><span class="line">      for(int i = 0; i &lt; sizeof(idt)/sizeof(struct gatedesc); i++)</span><br><span class="line">      &#123;</span><br><span class="line">          SETGATE(idt[i], 0, GD_KTEXT, __vectors[i]; 0);</span><br><span class="line">      &#125;</span><br><span class="line">      SETGATE(idt[T_SYSCALL], 0, GD_KTEXT, __vectors[T_SYSCALL]; 3);</span><br><span class="line">      lidt(&amp;idt_pd);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h5 id="第三问"><a href="#第三问" class="headerlink" title="第三问"></a>第三问</h5><blockquote>
<p>编程完善trap.c中的中断处理函数trap , 在对时钟中断进行处理的部分填写trap函数中处理时钟中断的部分，使操作系统每遇到100次时钟中断后，调用print_ticks子程序，向屏幕打印一行文字 <code>100 ticks</code></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> IRQ_OFFSET+IRQ_TIMER:</span><br><span class="line">    ticks++;</span><br><span class="line">    <span class="keyword">if</span> (ticks % TICK_NUM == <span class="number">0</span>) &#123;</span><br><span class="line">        print_ticks();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    make</span></span><br><span class="line"><span class="comment">    make qemu</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h1 id="3-从机器启动到操作系统运行的过程"><a href="#3-从机器启动到操作系统运行的过程" class="headerlink" title="3 从机器启动到操作系统运行的过程"></a>3 从机器启动到操作系统运行的过程</h1><h2 id="3-1-BIOS-启动过程"><a href="#3-1-BIOS-启动过程" class="headerlink" title="3.1 BIOS 启动过程"></a>3.1 BIOS 启动过程</h2><ul>
<li><p>计算机<strong>加电后</strong>，先执行<strong>系统初始化软件</strong>，完成<strong>基本IO初始化</strong>和<strong>引导加载功能</strong></p>
<ul>
<li><strong>初始化硬件设备</strong> ， 建立系统的内存空间映射图</li>
<li>将系统的软硬件环境带到一个合适的状态，以便最终调用操作系统内核准备好正确的环境</li>
<li><strong>最终引导加载程序</strong> 把操作系统内核映像 加载到 RAM中，并将系统控制权传递给它</li>
</ul>
</li>
<li><p>操作系统和应用软件 存放在 磁盘（硬盘/软盘）、光盘、EPROM、ROM、Flash等 可在掉电后继续保存数据的存储介质</p>
</li>
<li><p>计算机启动后，CPU 一开始会到一个特定的地址 开始执行指令，</p>
<ul>
<li>这个特定的地址 存放了<strong>系统初始化软件</strong>（Intel 80386 中是 BIOS, 其本质是一个固定在主板Flash/CMOS 上的软件），负责完成计算机的 <strong>基本的I/O初始化</strong></li>
</ul>
</li>
<li><p><strong>系统初始化软件</strong>：由 <strong>BIOS</strong> 和 位于 软盘/硬盘<strong>引导扇区</strong>中的 <strong>OS Bootloader</strong>（在ucore 中的 bootasm.S 和 bootmain.c ）一起组成</p>
</li>
<li><p><strong>BIOS</strong> ：<strong>固定在计算机 ROM（</strong>只读存储器） 芯片上的一个特殊软件，为上层软件提供最底层的、最直接的硬件控制与支持</p>
<ul>
<li>是 PC计算机硬件 与 上层软件程序 之间的桥梁，负责<strong>访问和控制硬件</strong></li>
</ul>
</li>
<li><p>对于 Intel 80386：</p>
<ul>
<li>计算机加电后，CPU 从物理地址 <code>0xfffffff0</code>（由初始化的 <code>CS: EIP</code> 确定，此时 CS 和 IP 的值分别是 <code>0xf000</code> 和 <code>0xfff0</code>）开始执行</li>
<li>在 <code>0xfffffff0</code> 处，存放了一条<strong>跳转指令</strong>，通过跳转指令跳到 <strong>BIOS 例行程序起始点</strong></li>
<li>BIOS 做完<strong>计算机硬件自检和初始化</strong>后，会选择一个启动设备（软盘、硬盘、光盘等），并且<strong>读取该设备的第一扇区（即主引导扇区或启动扇区）到内存一个特定的地址</strong> <code>0x7c00</code>处</li>
<li>然后将 <strong>CPU 控制权会转移</strong>到那个地址继续执行</li>
<li>至此，BIOS的初始化工作完成，进一步的工作交给 uCore 的<strong>bootloader</strong></li>
</ul>
</li>
</ul>
<h2 id="3-2-Bootloader-的启动过程"><a href="#3-2-Bootloader-的启动过程" class="headerlink" title="3.2 Bootloader 的启动过程"></a>3.2 Bootloader 的启动过程</h2><ul>
<li><strong>BIOS</strong> 将通过读取硬盘主引导扇区到内存，并跳转到对应内存中的位置执行 bootloader</li>
<li><strong>Bootloader：</strong><ul>
<li>切换到<strong>保护模式</strong>，启用<strong>分段机制</strong></li>
<li>读磁盘中 <strong>ELF 执行文件格式</strong>的 uCore 操作系统到内存</li>
<li>显示字符串信息</li>
<li>把<strong>控制权</strong>交给uCore操作系统</li>
</ul>
</li>
<li>Bootloader 工作的实现文件 在 <code>lab1/boot/</code> 下的 asm.h, bootasm.S 和 bootmain.c</li>
</ul>
<h3 id="3-2-1-保护模式和分段机制"><a href="#3-2-1-保护模式和分段机制" class="headerlink" title="3.2.1 保护模式和分段机制"></a>3.2.1 保护模式和分段机制</h3><ul>
<li>Intel 80386 只有进入保护模式，才能充分发挥其强大的功能<ul>
<li>提供更好的保护机制和强大的寻址能力</li>
</ul>
</li>
<li>若没有保护模式：只是一个快速的 8086 ，<ul>
<li>没有保护机制</li>
<li>任何应用软件都可以任意访问所有的计算机资源</li>
<li>且 分段机制 一直存在，无法屏蔽或避免</li>
</ul>
</li>
<li>操作系统功能（如分页机制）是建立在 Intel 80386的保护模式上来设计的</li>
</ul>
<h4 id="实模式"><a href="#实模式" class="headerlink" title="实模式"></a>实模式</h4><ul>
<li>在 Bootloader 接手 BIOS 的工作后，PC 系统处于实模式（16位模式）运行状态<ul>
<li>这种状态下，软件可访问的物理内存空间 不能超过 1 MB</li>
<li>无法发挥Intel 80386 以上级别的32位 CPU 的4 GB的内存管理能力</li>
</ul>
</li>
<li>实模式 将整个物理内存 看成分段区域<ul>
<li>程序代码 和 数据位于不同的区域</li>
<li>操作系统和用户程序并没有区别对待</li>
<li>每一个指针都是指向实际的物理地址</li>
</ul>
</li>
<li>通过修改 A20 地址线可以完成从实模式到保护模式的转换</li>
</ul>
<h4 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h4><ul>
<li>只有在保护模式下，80386的全部 32 根地址线有效<ul>
<li>寻址能力高达 4 GB 的线性地址空间和物理地址空间</li>
<li>可访问 64 TB （有2^14个段，每个段最带空间为 2^32 字节）的逻辑地址空间</li>
<li>可采用分段存储管理 和 分页存储管理机制</li>
<li>不仅为 <strong>存储共享和保护</strong> 提供了硬件支持，而且为<strong>实现虚拟存储</strong>提供了硬件支持</li>
<li>提供了 <strong>4个特权级</strong>和<strong>完善的特权检查机制</strong> ： 既能实现 <strong>资源共享</strong>，又能 <strong>保证代码数据的安全</strong> 及 <strong>任务的隔离</strong></li>
</ul>
</li>
<li>保护模式下，有两个段表：都可以包含 2^13 个<strong>描述符</strong>，因此最多可以同时存在 2*2^13 个段<ul>
<li><strong>GDT</strong> <strong>（Global Descriptor Table）</strong></li>
<li><strong>LDT</strong> <strong>（Local Descriptor Table）</strong></li>
</ul>
</li>
<li>实际上，段机制 并不能扩展物理地址空间，很大程度山，各个段的地址空间是相互重叠的<ul>
<li>所谓 64 TB（2^(14+32)）逻辑地址空间只是一个理论值</li>
<li>32 位保护模式下，真正的物理空间只有 2^32 字节</li>
</ul>
</li>
</ul>
<h4 id="分段存储管理机制"><a href="#分段存储管理机制" class="headerlink" title="分段存储管理机制"></a>分段存储管理机制</h4><ul>
<li><p>只能在保护模式下使用</p>
</li>
<li><p>分段机制：将内存划分成以 <strong>起始地址</strong> 和 <strong>长度限制</strong> 这两个二维参数表示的内存块——<strong>段（Segment）</strong></p>
<ul>
<li>即编译器将源程序编译成执行程序时用到的 代码段、数据段、堆和栈等</li>
</ul>
</li>
<li><p>分段机制：</p>
<ul>
<li><strong>逻辑地址</strong></li>
<li><strong>段描述符</strong>：描述段的属性</li>
<li><strong>段描述符表</strong>：包含多个段描述符的 数组</li>
<li><strong>段选择子</strong>：段寄存器，用于定位段描述符表中 表项的<strong>索引</strong></li>
</ul>
</li>
<li><p><strong>逻辑地址</strong> ——&gt; <strong>物理地址</strong></p>
<ul>
<li><strong>分段地址转换</strong>：<strong>CPU</strong> 把逻辑地址（由<strong>段选择子 selector</strong> 和 <strong>段偏移 offset</strong> 组成）<ul>
<li>将 <strong>段选择子</strong> 的内容 作为 <strong>段描述符表</strong> 的索引，找到表中对应的 <strong>段描述符</strong>，然后把 段描述符 中保存的 <strong>段基址</strong> 加上 <strong>段偏移值</strong>，形成 <strong>线性地址（Linear address）</strong></li>
<li>若不启动 分页存储管理机制，则线性地址 等于 物理地址</li>
<li><img src="https://objectkuan.gitbooks.io/ucore-docs/content/lab1_figs/image002.png" alt="分段地址转换基本过程"></li>
</ul>
</li>
<li><strong>分页地址转换</strong>：<ul>
<li>把线性地址转换成物理地址</li>
</ul>
</li>
<li>线性地址空间 由一维的线性地址构成，线性地址空间和物理地址空间对等<ul>
<li>线性地址 32 位长，线性地址空间容量为 4 GB</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="段描述符"><a href="#段描述符" class="headerlink" title="段描述符"></a>段描述符</h5><ul>
<li><p>保护模式下的分段管理机制，每个段有三个参数构成：</p>
<ul>
<li><blockquote>
<p>在ucore中的kern/mm/mmu.h中的struct segdesc 数据结构中有具体的定义。</p>
</blockquote>
</li>
<li><p><strong>段基地址（Base Address）</strong>：规定线性地址空间中 段的起始地址</p>
<ul>
<li>80386 保护模式下，段基地址 长 32 位</li>
<li>与寻址地址长度相同，所以任何一个段都可以从32位线性地址空间中的任何一个字节开始，不像实模式下规定的边界必须被 16整除</li>
</ul>
</li>
<li><p><strong>段界限（Limit）</strong>：规定端的大小。</p>
<ul>
<li>80386 保护模式下，用 20 位表示</li>
<li>段界限 可以是以 字节 为单位或以 4 K 字节为单位</li>
</ul>
</li>
<li><p><strong>段属性（Attributes）</strong>：确定段的各种性质</p>
<ul>
<li>段属性中的粒度位</li>
<li>类型</li>
<li>描述符特权级</li>
<li>段存在位</li>
<li>已访问位</li>
</ul>
</li>
</ul>
</li>
<li><p><img src="https://objectkuan.gitbooks.io/ucore-docs/content/lab1_figs/image003.png" alt="段描述符结构"></p>
</li>
</ul>
<h5 id="全局描述符表"><a href="#全局描述符表" class="headerlink" title="全局描述符表"></a>全局描述符表</h5><ul>
<li><p>保存<strong>多个段描述符的 “数组”</strong></p>
</li>
<li><p>其 起始地址 保存在 全局描述符表寄存器 GDTR</p>
<ul>
<li>GDTR 长48位，高32位为基地址，低16位为段界限</li>
</ul>
</li>
<li><p>由于 GDT 不能有 GDT 本身之内的描述符进行描述定义，所以 处理器 采用 GDTR 为 GDT 这一特殊的系统段</p>
</li>
<li><p>全局描述符表 中第一个段描述符设定为空段描述符</p>
</li>
<li><p>GDTR 中的段界限以字节 为单位</p>
<ul>
<li>对于含有 N 个描述符的描述符表，段界限可设为 <code>8*N-1</code></li>
<li><blockquote>
<p>在ucore中的boot/bootasm.S中的gdt地址处和kern/mm/pmm.c中的全局变量数组gdt[]分别有基于汇编语言和C语言的全局描述符表的具体实现</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h5 id="选择子"><a href="#选择子" class="headerlink" title="选择子"></a>选择子</h5><ul>
<li>线性地址部分的选择子：选择 段描述符表 和 在该表中索引 一个段描述符</li>
<li>选择子可以作为 指针变量的一部分<ul>
<li><img src="https://objectkuan.gitbooks.io/ucore-docs/content/lab1_figs/image004.png" alt="段选择子结构"></li>
<li>索引 Index : 在描述符表中从 8192 个描述符中选择一个<ul>
<li>处理器自动将这个索引值 乘 8，再加上描述符表的基地址来索引描述符表，从而选择一个合适的描述符</li>
</ul>
</li>
<li>表指示位 Table Indicator（TI）：选择访问哪一个描述符表，<ul>
<li>0：GDT</li>
<li>1：LDT</li>
</ul>
</li>
<li>请求特权级（Request Privilege Level，RPL）：保护机制</li>
</ul>
</li>
</ul>
<blockquote>
<p>全局描述符表的第一项是不能被CPU使用，所以当一个段选择子的索引（Index）部分和表指示位（Table Indicator）都为0的时（即段选择子指向全局描述符表的第一项时），可以当做一个空的选择子（见mmu.h中的SEG_NULL）。当一个段寄存器被加载一个空选择子时，处理器并不会产生一个异常。但是，当用一个空选择子去访问内存时，则会产生异常</p>
</blockquote>
<h4 id="保护模式下的特权级"><a href="#保护模式下的特权级" class="headerlink" title="保护模式下的特权级"></a>保护模式下的特权级</h4><ul>
<li>保护模式下，特权级共四个：0 - 3，被称为保护环（protection ring）<ul>
<li>ring 0 为最高特权级 : 内核态</li>
<li>ring 3 最低特权级：一般给 应用程序使用，用户态</li>
</ul>
</li>
<li>受到保护的资源：内存，I/O端口，执行特殊机器指令的能力</li>
<li>在任意时刻，x86 CPU 都是在一个特定的特权级下运行的<ul>
<li>决定代码可以做什么，不可以做什么</li>
</ul>
</li>
<li>大约 15 条机器指令被 CPU 限制只能在内核态执行<ul>
<li>若被用户模式的程序使用，会引起混乱</li>
<li>导致一个一般保护异常（general-protection exception）</li>
</ul>
</li>
<li><strong>数据段选择子</strong> 的整个内容可由程序直接加载到各个寄存器（SS, DS）<ul>
<li>包含了 请求特权级字段（Requested Privilege Level）</li>
</ul>
</li>
<li>代码段寄存器（CS） 的内容，不能由装载指令（如 MOV）直接设置，只能被间接设置<ul>
<li>CS 拥有一个由CPU 维护的当前特权级字段 （Current Privilege Level）</li>
<li><img src="https://objectkuan.gitbooks.io/ucore-docs/content/lab1_figs/image005.png" alt="DS和CS的结构图"></li>
</ul>
</li>
<li></li>
</ul>
<h3 id="3-2-3-硬盘访问概述"><a href="#3-2-3-硬盘访问概述" class="headerlink" title="3.2.3 硬盘访问概述"></a>3.2.3 硬盘访问概述</h3><ul>
<li><p>bootloader 使得CPU进入保护模式后，下一步从硬盘上加载并运行 OS</p>
</li>
<li><p>bootloader 的访问硬盘都是 LBA 模式的 <strong>PIO(Program IO)方式</strong>，</p>
<ul>
<li>即<strong>所有的 IO 操作</strong>，都是通过 CPU <strong>访问硬盘的 IO 地址寄存器</strong>完成</li>
</ul>
</li>
<li><p>一般，主板拥有 2 个 IDE通道，每个通道可以接 2 个 IDE 硬盘</p>
<ul>
<li>访问第一个硬盘的扇区，可设置 IO 地址寄存器为 <code>0x1f0-0x1f7</code>实现</li>
</ul>
</li>
<li><p>硬盘数据是存储到硬盘扇区中，一个扇区为 512 字节</p>
</li>
<li><p>都一个扇区的流程在 <code>boot/bootmain.c</code>中实现：</p>
<ul>
<li>等待磁盘准备好</li>
<li>发出读取扇区的命令</li>
<li>等待磁盘准备好</li>
<li>把磁盘扇区的数据读到指定内存</li>
</ul>
</li>
</ul>
<h3 id="ELF-格式文件概述"><a href="#ELF-格式文件概述" class="headerlink" title="ELF 格式文件概述"></a>ELF 格式文件概述</h3><ul>
<li><p><strong>Executable and Linking Format</strong></p>
<ul>
<li>是 Linux 系统下的一种常用<strong>目标文件（object file）</strong>格式，三种主要类型<ul>
<li><strong>用于执行的可执行文件（Executable file）</strong>，用于提供程序的进程映像，加载的内存执行</li>
<li><strong>用于连接的可重定位文件（relocatable file）</strong>，可与其他目标文件一起创建可执行文件和共享目标文件</li>
<li><strong>共享目标文件（shared object file）</strong>，连接器可将他与其他可重定位文件和共享目标文件连接成其他的目标文件，动态链接器又可将它与可执行文件和其他共享目标文件结合起来创建一个进程映像</li>
</ul>
</li>
</ul>
</li>
<li><p>与本实验相关的 ELF 可执行文件</p>
<ul>
<li><strong>ELF header</strong>在文件开头处，描述了整个文件的组织</li>
<li>ELF 的文件头包含了整个执行文件的控制结构，其定义在 <code>elf.h</code>中</li>
</ul>
</li>
<li><p><strong>program header</strong>， 仅对可执行文件 和 共享目标文件有意义</p>
<ul>
<li>描述与程序执行直接相关的<em>目标文件结构信息</em>，用于在文件中<em>定位各个段的映像</em>，同时包含其他一些用来<em>为程序创建进程映像所必需的信息</em></li>
</ul>
</li>
<li><p>可执行文件的程序头部是一个 program header结构的数组，每个结构描述了一个段或者系统准备程序执行所必需的其他信息</p>
</li>
<li><p><strong>目标文件 的段</strong>包含一个或者多个 <strong>节区 （section）</strong>，也就是 <strong>段内容（segment contents）</strong></p>
</li>
<li><p>可执行目标文件在ELF头部的 <code>e_phentsize</code> , <code>e_phnum</code>成员中给出其自身程序头部大小</p>
<ul>
<li><p>程序头部的数据结构：</p>
<ul>
<li>```C<br>struct proghdr {<br>  uint type;   // 段类型<br>  uint offset;  // 段相对文件头的偏移值<br>  uint va;     // 段的第一个字节将被放到内存中的虚拟地址<br>  uint pa;<br>  uint filesz;<br>  uint memsz;  // 段在内存映像中占用的字节数<br>  uint flags;<br>  uint align;<br>};<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 根据 `elfhdr`, `prohdr`的结构描述，bootloader 可以完成对 ELF 格式的ucore的加载过程</span><br><span class="line"></span><br><span class="line">## 3.3 操作系统启动过程</span><br><span class="line"></span><br><span class="line">### 3.3.1 函数堆栈</span><br><span class="line"></span><br><span class="line">* 理解调用栈：**栈的结构** 和 **EBP寄存器的使用**</span><br><span class="line">* ebp ：基址寄存器</span><br><span class="line">* esp：栈指针寄存器</span><br><span class="line">* eip：程序指令指针，当前程序运行的指令</span><br><span class="line">* 一个函数调用动作：</span><br><span class="line"></span><br><span class="line">  * 0-n 个 **PUSH** 指令，一个 **CALL** 指令。**CALL** 指令内部暗含一个将**返回地址**压栈的动作</span><br><span class="line">    * PUSH ： 参数入栈</span><br><span class="line">    * 返回地址：CALL 指令下一条指令的地址</span><br><span class="line">    * 将返回地址压栈：由硬件完成</span><br><span class="line">* 几乎每个本地编译器都会在每个函数体之前插入：</span><br><span class="line"></span><br><span class="line">  * ```assembly</span><br><span class="line">    pushl   %ebp</span><br><span class="line">    movl   %esp , %ebp</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>执行到程序的实际指令前，参数、返回地址、ebp寄存器 已按顺序入栈：</p>
<ul>
<li><pre><code class="assembly">+|  栈底方向        | 高位地址
 |    ...        |
 |    ...        |
 |  参数3        |
 |  参数2        |
 |  参数1        |
 |  返回地址        |
 |  上一层[ebp]    | &lt;-------- [ebp]
 |  局部变量        |  低位地址
</code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>首先将 ebp 寄存器入栈，然后将栈顶指针 esp 赋值给 ebp</p>
<ul>
<li>在给 ebp 赋值前，原 ebp 值已经被压栈（位于栈顶），而新的 ebp 又恰恰指向栈顶</li>
<li><strong>此时 ebp 寄存器处于十分重要的地位</strong>：ebp中存储着栈中的一个地址（原ebp入栈后的栈顶），从该地址为基准，<ul>
<li>向上（栈底方向）能获取返回地址、参数值，</li>
<li>向下（栈顶方向）能获取到函数局部变量值，而改地址处有存储着上一层函数调用时的 ebp 值</li>
</ul>
</li>
</ul>
</li>
<li><p>一般而言：<code>ss:[ebp+4]</code>为返回地址，<code>ss:[ebp+8]</code>为第一个参数值（最后一个入栈）,<code>ss:[ebp-4]</code>为第一个局部变量，<code>ss:[ebp]</code>为上一层 ebp 值</p>
<ul>
<li>ebp 中的地址处总是上一层函数调用时 ebp 的值</li>
<li>而每一层函数调用中，都能通过当时的 ebp 值，向上（栈底方向）获取返回地址，，参数值；向下（栈顶方向）获取函数局部变量值</li>
<li>由此形成递归，直至到达栈底，这就是函数调用栈</li>
</ul>
</li>
</ul>
<h3 id="3-3-2-中断与异常"><a href="#3-3-2-中断与异常" class="headerlink" title="3.3.2 中断与异常"></a>3.3.2 中断与异常</h3><ul>
<li><p>操作系统需要对计算机系统中的各种外设进行管理，需要 CPU 和外设能够相互通信</p>
</li>
<li><p>需要 OS 和 CPU能够一起提供某种机制，让外设在需要操作系统处理外设相关事件的时候，能主动通知操作系统</p>
<ul>
<li>即打断操作系统和应用的正常执行，使得操作系统完成外设的相关处理，</li>
<li>然后恢复OS 和应用的正常执行</li>
<li>该机制即为中断机制</li>
</ul>
</li>
<li><p>中断机制给操作系统提供了处理意外情况的能力，同时也是实现 进程/线程 抢占式调度的重要基石</p>
</li>
<li><p>三种特殊的中断事件：</p>
<ul>
<li><strong>异步中断(asynchronous interrupt)</strong>, 也称外部中断，简称中断<ul>
<li>由 CPU <strong>外部设备</strong>引起的外部事件（IO中断、时钟中断、控制台中断）是异步产生，即产生的时刻不确定，与CPU的执行无关</li>
</ul>
</li>
<li><strong>同步中断（synchronous interrupt）</strong>,内部中断，简称异常（exception）<ul>
<li>在 CPU <strong>执行指令期间检测到不正常的 或 非法的条件</strong>（除0，地址访问越界），所引起的内部事件</li>
</ul>
</li>
<li><strong>陷入中断（trap interrupt）</strong>，也称软中断（soft interrupt），系统调用简称trap<ul>
<li>在程序中使用 <strong>请求系统服务的系统调用</strong>而引发的事件</li>
</ul>
</li>
</ul>
</li>
<li><p>当 CPU 收到中断或者异常事件时，会暂停执行当前的程序或任务，通过一定的机制跳转到负责处理这个信号的相关处理例程中，完成对这个时间段的处理后在跳回到刚才被打断的程序或任务中。</p>
<ul>
<li>中断向量和中断服务例程的对应关系，主要是由 IDT（中断描述符表负责）</li>
<li>操作系统 在IDT 中设置好各种<strong>中断向量</strong>对应的<strong>中断描述符</strong>，等 CPU 在产生中断后查询对应终端服务例程的起始地址</li>
<li>而IDT本身的起始地址保存在 idtr中</li>
</ul>
<ol>
<li><p><strong>中断描述符表（Interrupt Descriptor Table)</strong></p>
<ul>
<li><p>IDT 将每个中断或异常编号 和 一个指向中断服务例程的描述符联系起来。</p>
</li>
<li><p>和 GDT 一样，IDT是一个8 bit的描述符数组，但 IDT 第一项可以包含一个描述符</p>
</li>
<li><p>CPU 把中断（异常）编号 乘以 8 作为IDT的索引</p>
</li>
<li><p>IDT 可以位于内存的任意位置，CPU 通过IDT寄存器（idtr）的内容来寻找 IDT的起始地址</p>
</li>
<li><p>操作 IDTR 的指令：LIDT，SIDT</p>
<ul>
<li>都有一个显示的操作数：一个6 字节表示的内存地址</li>
<li><strong>LIDT(Load IDT Register)：</strong>使用一个包含线性地址 <strong>基质和界限</strong> 的内存操作数加载IDT。<ul>
<li>操作系统创建 IDT 时，需要执行它来设定<strong>IDT的起始地址</strong></li>
<li>该指令只能在特权级 0 执行</li>
<li><code>libs/x86.h</code>中的lidt函数实现，是一条汇编指令</li>
</ul>
</li>
<li><strong>SIDT(Store IDT Register)：</strong>拷贝 IDTR 的 <strong>基址和界限</strong>部分到一个内存地址<ul>
<li>可在任意特权级执行</li>
</ul>
</li>
<li><img src="https://objectkuan.gitbooks.io/ucore-docs/content/lab1_figs/image007.png" alt="IDT和IDTR寄存器的结构和关系图"></li>
</ul>
</li>
<li><blockquote>
<p>在保护模式下，最多会存在256个Interrupt/<strong>Exception Vectors</strong>。</p>
<p>范围[0，31]内的32个向量被异常Exception和NMI使用，但当前并非所有这32个向量都已经被使用，有几个当前没有被使用的，请不要擅自使用它们，它们被保留，以备将来可能增加新的Exception。</p>
<p>范围[32，255]内的向量被保留给用户定义的Interrupts。Intel没有定义，也没有保留这些Interrupts。用户可以将它们用作外部I/O设备中断（8259A IRQ），或者系统调用（System Call 、Software Interrupts）等</p>
</blockquote>
</li>
</ul>
</li>
<li><p><strong>IDT gate descriptors</strong></p>
<ul>
<li><strong>Interrupts/Exceptions</strong> 应该使用<strong>Interrupt Gate</strong>和<strong>Trap Gate</strong><ul>
<li>唯一的区别：当调用Interrupt Gate时，<strong>Interrupt会被CPU自动禁止</strong><ul>
<li>自动禁止：CPU 跳转到Interrupt Gate里的地址时，在将EFLAGS保存在栈上后，清除EFLAGS里的IF位，以免重复触发中断。</li>
</ul>
</li>
<li>而当调用Trap Gate时，<strong>CPU则不会去禁止或打开中断</strong>，而是保留他原来的样子</li>
</ul>
</li>
<li>在IDT中，可以包含3种类型的 Descriptor：<ul>
<li>Task-gate descriptor</li>
<li>Interrupt-gate descriptor: 中断方式用到</li>
<li>Trap-gate descriptor：系统调用用到</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>中断处理中硬件负责完成的工作</strong></p>
<ul>
<li><p>中断服务例程包括具体负责处理中断（异常）的代码是操作系统的重要组成部分。</p>
<ul>
<li><p>硬件中断处理过程（起始）:从CPU受到中断事件后，打断当前程序或任务的执行，根据某种机制跳转到中断服务例程去执行的过程：</p>
<ul>
<li><blockquote>
<ul>
<li>CPU在执行完当前程序的每一条指令后，都会去确认在执行刚才的指令过程中中断控制器（如：8259A）是否发送中断请求过来，如果有那么CPU就会在相应的时钟脉冲到来时从总线上读取中断请求对应的中断向量；</li>
<li>CPU根据得到的中断向量（以此为索引）到IDT中找到该向量对应的中断描述符，中断描述符里保存着中断服务例程的段选择子；</li>
<li>CPU使用IDT查到的中断服务例程的段选择子从GDT中取得相应的段描述符，段描述符里保存了中断服务例程的段基址和属性信息，此时CPU就得到了中断服务例程的起始地址，并跳转到该地址；</li>
<li>CPU会根据CPL和中断服务例程的段描述符的DPL信息确认是否发生了特权级的转换。比如当前程序正运行在用户态，而中断程序是运行在内核态的，则意味着发生了特权级的转换，这时CPU会从当前程序的TSS信息（该信息在内存中的起始地址存在TR寄存器中）里取得该程序的内核栈地址，即包括内核态的ss和esp的值，并立即将系统当前使用的栈切换成新的内核栈。这个栈就是即将运行的中断服务程序要使用的栈。紧接着就将当前程序使用的用户态的ss和esp压到新的内核栈中保存起来；</li>
<li>CPU需要开始保存当前被打断的程序的现场（即一些寄存器的值），以便于将来恢复被打断的程序继续执行。这需要利用内核栈来保存相关现场信息，即依次压入当前被打断程序使用的eflags，cs，eip，errorCode（如果是有错误码的异常）信息；</li>
<li>CPU利用中断服务例程的段描述符将其第一条指令的地址加载到cs和eip寄存器中，开始执行中断服务例程。这意味着先前的程序被暂停执行，中断服务程序正式开始工作。</li>
</ul>
</blockquote>
</li>
</ul>
</li>
<li><p>硬件中断处理过程（结束）:每个中断服务例程在有中断处理工作完成后需要通过 <code>iret</code>指令恢复被打断的程序执行：</p>
<ul>
<li><blockquote>
<ul>
<li>程序执行这条iret指令时，首先会从内核栈里弹出先前保存的被打断的程序的现场信息，即eflags，cs，eip重新开始执行；</li>
<li>如果存在特权级转换（从内核态转换到用户态），则还需要从内核栈中弹出用户态栈的ss和esp，这样也意味着栈也被切换回原先使用的用户态的栈了；</li>
<li>如果此次处理的是带有错误码（errorCode）的异常，CPU在恢复先前程序的现场时，并不会弹出errorCode。这一步需要通过软件完成，即要求相关的中断服务例程在调用iret返回之前添加出栈代码主动弹出errorCode。</li>
</ul>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>中断产生后的堆栈变化</strong></p>
<ul>
<li>相同特权级和不同特权级情况下中断产生后的堆栈变换：<ul>
<li><img src="https://objectkuan.gitbooks.io/ucore-docs/content/lab1_figs/image010.png" alt="相同特权级和不同特权级情况下中断产生后的堆栈栈变化示意图"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>中断处理的特权级转换</strong></p>
<ul>
<li><p>通过门描述符（gate descriptor）和相关指令完成</p>
</li>
<li><p>一个门描述符就是一个系统类型的段描述符，一共四个子类型：</p>
<ul>
<li>调用门描述符(call-gate)</li>
<li>中断门描述符(interrupt-gate)</li>
<li>陷阱门描述符(trap-gate)</li>
<li>任务门描述符(task-gate)</li>
</ul>
</li>
<li><p>与中断处理相关：中断门描述符，陷阱门描述符</p>
</li>
<li><p>这些门描述符被存储在中断描述符表（IDT）</p>
</li>
<li><p>CPU 把中断向量当作IDT表项的索引，指出当中断发生时，使用那一个门描述符来处理中断</p>
</li>
<li><blockquote>
<p>门中的DPL和段选择符一起控制着访问，同时，段选择符结合偏移量（Offset）指出了中断处理例程的入口点。内核一般在门描述符中填入内核代码段的段选择子。产生中断后，CPU一定不会将运行控制从高特权环转向低特权环，特权级必须要么保持不变（当操作系统内核自己被中断的时候），或被提升（当用户态程序被中断的时候）。无论哪一种情况，作为结果的CPL必须等于目的代码段的DPL。如果CPL发生了改变，一个堆栈切换操作（通过TSS完成）就会发生。如果中断是被用户态程序中的指令所触发的（比如软件执行INT n生产的中断），还会增加一个额外的检查：门的DPL必须具有与CPL相同或更低的特权。这就防止了用户代码随意触发中断。如果这些检查失败，会产生一个一般保护异常（general-protection exception）。</p>
</blockquote>
</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>课程实验</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Lab 2 物理内存管理</title>
    <url>/p/e2bef277.html</url>
    <content><![CDATA[<h1 id="Lab-2-物理内存管理"><a href="#Lab-2-物理内存管理" class="headerlink" title="Lab 2 物理内存管理"></a>Lab 2 物理内存管理</h1><h1 id="1-实验目的"><a href="#1-实验目的" class="headerlink" title="1 实验目的"></a>1 实验目的</h1><ul>
<li>理解基于<strong>段页式内存地址的转换机制</strong></li>
<li>页表的建立和使用</li>
<li>物理内存的管理方法</li>
</ul>
<h1 id="2-实验内容"><a href="#2-实验内容" class="headerlink" title="2 实验内容"></a>2 实验内容</h1><p><strong>三个部分：</strong></p>
<ul>
<li>发现<strong>系统中的物理内存</strong></li>
<li>建立对物理内存的初步管理：了解<strong>连续内存管理</strong></li>
<li>建立<strong>页表实现虚拟内存到物理内存之间的映射</strong>，了解段页式内存管理机制</li>
</ul>
<h2 id="2-1-练习"><a href="#2-1-练习" class="headerlink" title="2.1 练习"></a>2.1 练习</h2><ul>
<li>分析 ucore提供的答案，说明自己的实现与参考答案区别</li>
<li>列出本实验中重要的知识点<ul>
<li>对应的 OS 原理</li>
</ul>
</li>
<li>未出现但很重要的知识点</li>
</ul>
<h3 id="练习0：填写已有实验"><a href="#练习0：填写已有实验" class="headerlink" title="练习0：填写已有实验"></a>练习0：填写已有实验</h3><ul>
<li>本实验依赖于实验一</li>
<li>需要将实验一的代码填入lab2相应位置</li>
</ul>
<h3 id="练习1：实现first-fit-连续物理内存分配算法"><a href="#练习1：实现first-fit-连续物理内存分配算法" class="headerlink" title="练习1：实现first-fit 连续物理内存分配算法"></a>练习1：实现first-fit 连续物理内存分配算法</h3><h1 id="3-物理内存管理"><a href="#3-物理内存管理" class="headerlink" title="3 物理内存管理"></a>3 物理内存管理</h1><h2 id="3-1-实验执行流程概述"><a href="#3-1-实验执行流程概述" class="headerlink" title="3.1 实验执行流程概述"></a>3.1 实验执行流程概述</h2><ul>
<li>总控函数：kern_init<ul>
<li>调用完成物理内存初始化的pmm_init函数之前和之后的区别：<ul>
<li>首先，bootloader工作有所增加，在bootloader中完成了对内存资源的探测工作，使得 ucore kernel 在后续执行中能够基于其探测出的物理内存情况进行物理内存管理初始化工作</li>
<li>其次，bootloader 不像lab1，直接调用kern_init，而是先调用kern_entry函数（<code>/lab2/kern/init/entry.S</code>）完成以下工作后，再调用kern_init<ul>
<li><strong>kern_entry</strong> 主要任务：为了执行kern_init建立良好的C语言运行环境（设置堆栈），并且临时建立一个段映射关系，为之后建立分页机制的过程做准备</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>kern_init 在完成一些输出并对lab1实验结果检查后，进入物理内存管理初始化工作<ul>
<li>即调用pmm_init函数完成对物理内存的管理的初始化（lab 2）</li>
<li>接着，执行中断 和 异常相关的初始化工作（即调用pic_init和idt_init），这些工作与lab 1中断异常初始化工作内容一样</li>
</ul>
</li>
<li>物理内存管理：<ul>
<li>首先，探测可用的物理内存空间资源；了解物理内存位于何处、大小<ul>
<li>便可用固定页面大小来划分整个物理内存空间，并准备以此为最小内存分配单元来管理整个物理内存，管理在内核运行过程中每页内存（状态：free、used、reserved）</li>
</ul>
</li>
<li>接着，ucore kernel 建立页表，启动分页机制，使得 CPU 中的 MMU 把预先建立好的页表中的页表项读入TLB，根据页表项描述的 虚拟页（Page）与物理页帧（Page Frame）的对应关系完成CPU对内存的读写和执行操作。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>课程实验</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 入门学习2</title>
    <url>/p/d222e203.html</url>
    <content><![CDATA[<h1 id="Linux-入门学习2"><a href="#Linux-入门学习2" class="headerlink" title="Linux 入门学习2"></a>Linux 入门学习2</h1><p><a href="https://jiannan.blog.csdn.net/article/details/79512948">参考博客</a></p>
<p>[toc]</p>
<p>学习如何创建文件、文件夹、以及文件的复制粘贴剪切等操作。</p>
<h1 id="1-文件、文件夹的创建"><a href="#1-文件、文件夹的创建" class="headerlink" title="1 文件、文件夹的创建"></a>1 文件、文件夹的创建</h1><h2 id="1-1-创建文件夹"><a href="#1-1-创建文件夹" class="headerlink" title="1.1 创建文件夹"></a>1.1 创建文件夹</h2><ul>
<li>命令：<code>mkdir</code> make directories</li>
<li>默认登陆所在目录是 <code>root</code>的 <code>home</code>目录</li>
<li>指定在某个目录下创建：<code>mkdir /目录名/文件夹名</code></li>
<li>创建文件夹的同时创建子文件夹：<code>mkdir -p 文件夹名/子文件夹名</code><ul>
<li><code>-p</code>选项：递归创建</li>
</ul>
</li>
</ul>
<h2 id="1-2-创建文件"><a href="#1-2-创建文件" class="headerlink" title="1.2 创建文件"></a>1.2 创建文件</h2><ul>
<li>命令：<code>touch</code></li>
<li>语法：<code>touch /目录/文件名</code><ul>
<li>在目录下创建文件</li>
</ul>
</li>
<li>注意：<ul>
<li><code>目录</code>需要写绝对路径</li>
</ul>
</li>
</ul>
<h1 id="2-查看当前目录以及切换目录"><a href="#2-查看当前目录以及切换目录" class="headerlink" title="2 查看当前目录以及切换目录"></a>2 查看当前目录以及切换目录</h1><h2 id="2-1-查看当前目录"><a href="#2-1-查看当前目录" class="headerlink" title="2.1 查看当前目录"></a>2.1 查看当前目录</h2><ul>
<li>命令：<code>pwd</code></li>
</ul>
<h2 id="2-2-切换目录"><a href="#2-2-切换目录" class="headerlink" title="2.2 切换目录"></a>2.2 切换目录</h2><ul>
<li>命令：<code>cd</code>,<code>change directories</code></li>
<li>语法：<code>cd /目录</code></li>
</ul>
<h1 id="3-对文件进行复制、粘贴、删除操作"><a href="#3-对文件进行复制、粘贴、删除操作" class="headerlink" title="3 对文件进行复制、粘贴、删除操作"></a>3 对文件进行复制、粘贴、删除操作</h1><h2 id="3-1-复制"><a href="#3-1-复制" class="headerlink" title="3.1 复制"></a>3.1 复制</h2><ul>
<li>命令：<code>cp</code>,copy</li>
<li>语法：<code>cp 原文件路径 目标路径</code></li>
<li>选项：<ul>
<li><code>-r</code>: 复制一个目录</li>
<li><code>-p</code>: 复制文件的属性与之前原文件一致</li>
</ul>
</li>
<li>复制改名一起完成：再复制的目标路径最后写上文件名</li>
</ul>
<h2 id="3-2-删除"><a href="#3-2-删除" class="headerlink" title="3.2 删除"></a>3.2 删除</h2><ul>
<li>删除空目录<ul>
<li>命令：<code>rmdir</code>，删除<strong>空目录</strong></li>
</ul>
</li>
<li>删除文件<ul>
<li>命令：<code>rm</code></li>
<li>选项<ul>
<li><code>-f</code>: 无确认提示</li>
</ul>
</li>
</ul>
</li>
<li>删除目录：必须进行递归操作，需要加上选项 <code>-r</code><ul>
<li>命令：<code>rm -r 目录</code><ul>
<li>会一个一个提示是否删除里面的文件</li>
</ul>
</li>
<li>命令：<code>rm -rf 目录</code><ul>
<li>不会提示</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-3-剪切"><a href="#3-3-剪切" class="headerlink" title="3.3 剪切"></a>3.3 剪切</h2><ul>
<li>命令：<code>mv</code>,move</li>
<li>语法：<code>mv 原文件路径 目标路径</code></li>
<li>剪切同时改名：最后写上文件名</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>操作系统学习</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 入门学习1</title>
    <url>/p/4b2bb3b9.html</url>
    <content><![CDATA[<h1 id="Linux-入门学习1"><a href="#Linux-入门学习1" class="headerlink" title="Linux 入门学习1"></a>Linux 入门学习1</h1><p><a href="https://jiannan.blog.csdn.net/article/details/79473507">参考博客</a></p>
<p>[toc]</p>
<h1 id="1-学习命令基本格式"><a href="#1-学习命令基本格式" class="headerlink" title="1 学习命令基本格式"></a>1 学习命令基本格式</h1><h2 id="1-1-基本格式"><a href="#1-1-基本格式" class="headerlink" title="1.1 基本格式"></a>1.1 基本格式</h2><ul>
<li><strong>命令</strong>由三部分组成：<code>命令 [-选项] [参数]</code><ul>
<li><strong>选项</strong>与<strong>参数</strong>可以省略</li>
<li>有多个选项是可以写在一起的，“-”代表选项</li>
<li><strong>参数</strong>可以是一个<strong>对象</strong>，也可以是<strong>目录</strong></li>
</ul>
</li>
</ul>
<p><strong>例：</strong><code>ls -l /</code> 代表<strong>查看目录</strong></p>
<ul>
<li><code>ls</code>: <strong>查看目录</strong>。显示目录下的文件或者文件夹（只能看到文件名）</li>
<li><code>-l</code>: 显示目录下的<strong>详细</strong>文件或者文件夹的信息</li>
<li><code>/</code>: <strong>根目录</strong>。夹上参数后，表示<strong>查看 根目录 下的文件</strong></li>
</ul>
<h2 id="1-2-目录"><a href="#1-2-目录" class="headerlink" title="1.2 目录"></a>1.2 目录</h2><pre><code>查看根目录时，可以看到许多文件夹，如下图所示：
</code></pre>
<p><img src="C:\Users\Light\AppData\Roaming\Typora\typora-user-images\image-20210307101148483.png" alt="image-20210307101148483"></p>
<ol>
<li><code>/</code>: 根目录，无上一级</li>
<li><code>/home</code>: 每个用户的家目录，在我们创建一个新用户时，home目录下会创建一个以用户名文名称的文件夹</li>
<li><code>/tmp</code>: 临时存放文件的地方</li>
<li><code>/bin</code>: 命令保存的目录</li>
<li><code>/boot</code>: 启动目录，包含系统启动时的相关文件</li>
<li><code>/root</code>: root用户的家目录，</li>
</ol>
<h1 id="2-ls-目录命令处理"><a href="#2-ls-目录命令处理" class="headerlink" title="2 ls 目录命令处理"></a>2 <code>ls</code> 目录命令处理</h1><pre><code>`ls`目录处理命令，全称: `list`

其他目录命令：
</code></pre>
<ul>
<li><code>ls -a</code>或 <code>ls --all</code>: 查看目录下的全部文件（包括隐藏文件）<ul>
<li>![image-20210307103745762](E:\LearningNotes\Linux\Linux 入门学习1.assets\image-20210307103745762.png)</li>
<li><code>ls</code>命令后加 <code>-a</code>可以查看到<strong>当前目录</strong>下的<strong>全部文件</strong></li>
<li>隐藏文件的名称以 <code>.</code>开始</li>
<li>隐藏文件的意义:告诉用户，其是系统的文件，不要随意的更改</li>
<li><code>-a</code> 是 <code>--all</code> 的简化</li>
</ul>
</li>
<li><code>ls -l</code>: 查看目录下的详细文件信息<ul>
<li>![image-20210307103816519](E:\LearningNotes\Linux\Linux 入门学习1.assets\image-20210307103816519.png)</li>
<li>可以查看文件的<strong>大小</strong>,<strong>修改日期</strong>及<strong>文件名</strong>等</li>
<li>值得注意的是，文件大小 <code>1255</code>,<code>26533</code>等，大小单位为<strong>字节</strong></li>
<li><code>l</code>全称为 <code>long</code></li>
</ul>
</li>
<li><code>ls -al</code>: 查看这个目录下全部文件的详细信息<ul>
<li>![image-20210307103854462](E:\LearningNotes\Linux\Linux 入门学习1.assets\image-20210307103854462.png)</li>
</ul>
</li>
<li><code>ls -al /tmp</code>: 查看 <code>tmp</code> 文件下的全部文件的详细信息<ul>
<li>![image-20210307103921974](E:\LearningNotes\Linux\Linux 入门学习1.assets\image-20210307103921974.png)</li>
</ul>
</li>
<li><code>ls -alh</code>: 更人性化的显示详细信息<ul>
<li>![image-20210307104048576](E:\LearningNotes\Linux\Linux 入门学习1.assets\image-20210307104048576.png)</li>
<li>此时，对文件大小标注了单位</li>
<li>我们来看上图第一行，<code>dr-xr-x---.  2 root root 4.0K Mar 7 05:37     </code>，对其进行解读：<ul>
<li><code>dr-xr-x---</code>代表<strong>文件类型及权限</strong>，应拆成<strong>四部分</strong>：<code>d r-x r-x ---</code>:<ul>
<li>第一部分 <code>d</code>: <strong>代表是什么文件</strong>，<code>directory</code>目录的首字母，代表这是一个目录文件。<ul>
<li>若第一个字母为 <code>l</code>：是 <code>link</code>的首字母，代表这是一个<strong>软连接文件</strong></li>
<li>若第一个字母为 <code>-</code>：代表这是一个<strong>二进制文件</strong></li>
</ul>
</li>
<li>第二部分 <code>r-x</code>: 代表<strong>所有者</strong>拥有某个权限：读和执行<ul>
<li><code>r</code>: 代表读的权限</li>
<li><code>w</code>: 代表写的权限</li>
<li><code>x</code>: 代表执行的权限</li>
</ul>
</li>
<li>第三部分 <code>r-x</code>: 代表<strong>所属组</strong>拥有的权限：读和执行</li>
<li>第四部分 <code>---</code>: 代表<strong>其他人</strong>拥有的权限：<code>null</code></li>
</ul>
</li>
<li><code>2</code> : 代表是一个<strong>引用技术</strong>，代表这个文件被引用了 <code>2</code>次</li>
<li><code>root</code>: 代表这个文件的所有者</li>
<li><code>root</code>: 代表这个文件的所属组</li>
<li><code>4.0K</code>: 代表这个文件的大小</li>
<li><code>Mar 7 05:37</code>: 代表这个文件的修改时间</li>
<li>``: 代表这个文件的名称</li>
</ul>
</li>
</ul>
</li>
<li><code>ls -i</code>: 显示每个文件的 <code>i</code>节点<ul>
<li>![image-20210307111054562](E:\LearningNotes\Linux\Linux 入门学习1.assets\image-20210307111054562.png)</li>
<li>在 Linux 中，每个文件都有一个属于自己的 <code>i</code>节点，类似于每个人的身份证号</li>
<li><code>i</code>节点可以对应多个文件</li>
</ul>
</li>
</ul>
<h1 id="3-所有者、所属组及其他人"><a href="#3-所有者、所属组及其他人" class="headerlink" title="3 所有者、所属组及其他人"></a>3 所有者、所属组及其他人</h1><ul>
<li>所有者：创建了这个文件的人。但所有者可以转换</li>
<li>所属组：很多人组成的组</li>
<li>其他人：所有者和所属组之外的用户</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>操作系统学习</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>LinuxLearning</title>
    <url>/p/9750b399.html</url>
    <content><![CDATA[<h1 id="LinuxLearning"><a href="#LinuxLearning" class="headerlink" title="LinuxLearning"></a>LinuxLearning</h1><p>[toc]</p>
<h1 id="0-Linux-系统简介"><a href="#0-Linux-系统简介" class="headerlink" title="0 Linux 系统简介"></a>0 Linux 系统简介</h1><h2 id="0-0-历史"><a href="#0-0-历史" class="headerlink" title="0.0 历史"></a>0.0 历史</h2><ul>
<li>操作系统始于二十世纪五十年代，当时的操作系统能运行批处理程序。批处理程序不需要用户的交互，它从文件或者穿孔卡片读取数据，然后输出到另外一个文件或者打印机</li>
<li>二十世纪六十年代初，交互式操作系统开始流行。它不仅仅可以交互，还能使多个用户从不同的终端同时操作主机。这样的操作系统被称作分时操作系统，它的出现对批处理操作系统是个极大的挑战。</li>
<li>UNIX 最初免费发布并因此在大学里受到欢迎。后来，UNIX 实现了 TCP/IP 协议栈</li>
<li>Linux 本身只是操作系统的内核。内核是使其它程序能够运行的基础。它实现了多任务和硬件管理，用户或者系统管理员交互运行的所有程序实际上都运行在内核之上<ul>
<li>其中有些程序是必需的，比如说，命令行解释器（shell），它用于用户交互和编写 shell 脚本。</li>
</ul>
</li>
<li>许多重要的软件，包括 C 编译器，都来自于自由软件基金 GNU 项目。GNU 项目开始于 1984 年，目的是为了开发一个完全类似于 UNIX 的免费操作系统。为了表扬 GNU 对 Linux 的贡献，许多人把 Linux 称为 GNU/Linux（GNU 有自己的内核）</li>
<li>1992－1993 年，Linux 内核具备了挑战 UNIX 的所有本质特性，包括 TCP/IP 网络，图形界面系统（X window )，Linux 同样也吸引了许多行业的关注。一些小的公司开始开发和发行 Linux，有几十个 Linux 用户社区成立。1994 年，Linux 杂志也开始发行。</li>
<li>Linux 内核 1.0 在 1994 年 3 月发布，内核的发布要经历许多开发周期，直至达到一个稳定的版本。</li>
</ul>
<h2 id="0-1-简介"><a href="#0-1-简介" class="headerlink" title="0.1 简介"></a>0.1 简介</h2><ul>
<li><p>是一种自由和开放源码的操作系统，有着不同的Linux版本，但都是用了Linux内核。</p>
<ul>
<li><img src="https://img-blog.csdn.net/20180527120259589?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nja2V2aW5jeWg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></li>
</ul>
</li>
<li><p>Linux 可安装在各种计算机硬件设备中：手机、平板电脑、路由器、台式计算机</p>
<ul>
<li><img src="https://img-blog.csdn.net/2018090315211355?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTMwOTQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></li>
</ul>
</li>
</ul>
<h2 id="0-2-特点"><a href="#0-2-特点" class="headerlink" title="0.2 特点"></a>0.2 特点</h2><ul>
<li>多用户，多任务，</li>
<li>丰富的网络功能，</li>
<li>可靠的系统安全，</li>
<li>良好的可移植性，</li>
<li>具有标准兼容性，</li>
<li>良好的用户界面，</li>
<li>出色的速度性能</li>
</ul>
<h2 id="0-3-CentOS"><a href="#0-3-CentOS" class="headerlink" title="0.3 CentOS"></a>0.3 CentOS</h2><ul>
<li>主流：目前的Linux操作系统主要应用于生产环境，主流企业级Linux系统仍旧是RedHat或者CentOS</li>
<li>免费：RedHat 和CentOS差别不大</li>
<li>更新方便：CentOS独有的yum命令支持在线升级，可以即时更新系统，不像RedHat 那样需要花钱购买支持服务！</li>
</ul>
<h2 id="0-4-Linux-目录结构"><a href="#0-4-Linux-目录结构" class="headerlink" title="0.4 Linux 目录结构"></a>0.4 Linux 目录结构</h2><p><img src="https://img-blog.csdn.net/20180527120637267?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Nja2V2aW5jeWg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>
<ul>
<li>bin(binaries): 二进制可执行文件</li>
<li>sbin(super user binaries)：存放二进制可执行文件，只有root能访问</li>
<li>etc(etcetera)：存放系统配置文件</li>
<li>usr(unix shared resources)：存放共享的系统资源</li>
<li>home： 存放用户文件的根目录</li>
<li>root：超级用户目录</li>
<li>dev(devices)：存放设备文件</li>
<li>lib(library)：存放跟文件系统中的程序运行所需要的共享库及内核模块</li>
<li>mnt(mount：系统管理员安装临时文件系统的安装点</li>
<li>boot：存放用于系统引导时使用的各种文件</li>
<li>tmp(temporary)：用于存放各种临时文件</li>
<li>var(variable)：存放运行时需要改变数据的文件</li>
</ul>
<h2 id="0-5-Linux-与-Windows的区别"><a href="#0-5-Linux-与-Windows的区别" class="headerlink" title="0.5 Linux 与 Windows的区别"></a>0.5 Linux 与 Windows的区别</h2><ol>
<li>免费与收费<ul>
<li>最新正版Windows10需付费</li>
<li>Linux 免费或少许费用</li>
</ul>
</li>
<li>软件与支持</li>
<li>安全性</li>
<li>使用习惯<ul>
<li>Windows：普通用户基本都是纯图形界面下操作使用，依靠鼠标和键盘完成一切操作，用户上手容易，入门简单；</li>
<li>Linux：兼具图形界面操作（需要使用带有桌面环境的发行版）和完全的命令行操作，可以只用键盘完成一切操作，新手入门较困难，需要一些学习和指导（这正是我们要做的事情），一旦熟练之后效率极高。</li>
</ul>
</li>
<li>可定制性</li>
<li>应用范畴<ul>
<li>在 Windows 使用百度、谷歌，上淘宝，聊 QQ 时，支撑这些软件和服务的，是后台成千上万的 Linux 服务器主机，它们时时刻刻都在忙碌地进行着数据处理和运算，可以说世界上大部分软件和服务都是运行在 Linux 之上的。</li>
</ul>
</li>
<li>Windows 没有的：<ul>
<li>稳定的系统</li>
<li>安全性和漏洞的快速修补</li>
<li>多用户</li>
<li>用户和用户组的规划</li>
<li>相对较少的资源占用</li>
<li>可定制裁剪，移植到嵌入式平台</li>
<li>可选择的多种图形用户界面</li>
</ul>
</li>
<li>Linux 没有的：<ul>
<li>特定的支持厂商</li>
<li>足够的游戏娱乐支持度</li>
<li>足够的专业软件支持度</li>
</ul>
</li>
</ol>
<h1 id="1-VMware-虚拟机"><a href="#1-VMware-虚拟机" class="headerlink" title="1 VMware 虚拟机"></a>1 VMware 虚拟机</h1><h2 id="1-1-介绍"><a href="#1-1-介绍" class="headerlink" title="1.1 介绍"></a>1.1 介绍</h2><h2 id="1-2-下载及安装"><a href="#1-2-下载及安装" class="headerlink" title="1.2 下载及安装"></a>1.2 下载及安装</h2><p><a href="https://www.cnblogs.com/98han/p/13170117.html">参考博客</a></p>
<p><strong>安装版本：</strong><code> VMware-workstation-full-15.5.0-14665864</code></p>
<p>使用第一个密钥成功！</p>
<p><img src="E:\LearningNotes\Linux\LinuxLearning.assets\image-20210306193651528.png" alt="image-20210306193651528"></p>
<h1 id="2-Linux-系统下载及安装"><a href="#2-Linux-系统下载及安装" class="headerlink" title="2 Linux 系统下载及安装"></a>2 Linux 系统下载及安装</h1><p><a href="https://jiannan.blog.csdn.net/article/details/79417947?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.control&dist_request_id=1328603.29514.16150273040264577&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.control">参考博客</a></p>
<p><a href="https://pan.baidu.com/s/1HVKs4tQaghwxF215LXpWyg">Linux 安装包（百度云盘）</a></p>
<p><del>花了九块钱，买了百度云盘加速券，呜呜呜</del></p>
<h2 id="2-1-虚拟机的创建"><a href="#2-1-虚拟机的创建" class="headerlink" title="2.1 虚拟机的创建"></a>2.1 虚拟机的创建</h2><p><a href="https://jiannan.blog.csdn.net/article/details/79417947?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.control&dist_request_id=1328603.29514.16150273040264577&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.control">参考博客</a></p>
<h2 id="2-2-安装Linux-系统"><a href="#2-2-安装Linux-系统" class="headerlink" title="2.2 安装Linux 系统"></a>2.2 安装Linux 系统</h2><p><a href="https://jiannan.blog.csdn.net/article/details/79417947?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.control&dist_request_id=1328603.29514.16150273040264577&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.control">参考博客</a></p>
<p><strong>遇到的问题：</strong></p>
<ul>
<li><ul>
<li><p><input checked="" disabled="" type="checkbox">  问题一：<img src="https://img-blog.csdn.net/2018030316140063?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvd2VpeGluXzM4MTExOTU3/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
</li>
<li><p>我选择将 D 盘压缩 30G ，新建空的简单卷来装此系统</p>
</li>
</ul>
</li>
<li><ul>
<li><p><input checked="" disabled="" type="checkbox">  问题二：<code>have no enough available....</code></p>
</li>
<li><p>最后在给 <code>根目录</code>分区，根目录就是在选择挂载点的第一个 <code>/</code>，然后下面有个选择框 <code>选择最大的值</code>，分区4个就够了。</p>
</li>
</ul>
</li>
<li><p><strong>password</strong>：<code>ZihaoMa123</code></p>
</li>
<li><p><strong>Congratulations</strong><img src="E:\LearningNotes\Linux\LinuxLearning.assets\image-20210306213821201.png" alt="image-20210306213821201"></p>
</li>
<li><p>在输入密码（<em>密码就是在安装系统时输入的密码</em>）的时候是不会出现 <code>****</code></p>
</li>
</ul>
<p>虚拟机挂起和关机的区别</p>
<ul>
<li>挂起：相当于物理机中的休眠到内存功能</li>
<li>关机：执行普通关机操作</li>
</ul>
<h1 id="3-学习-Linux-的好习惯"><a href="#3-学习-Linux-的好习惯" class="headerlink" title="3 学习 Linux 的好习惯"></a>3 学习 Linux 的好习惯</h1><ul>
<li>善于使用 <code>man 命令</code>查看帮助文档</li>
<li>利用好 <code>Tab</code>键</li>
<li>掌握好：<ul>
<li><code>ctrl + c</code> 停止当前进程</li>
<li><code>ctrl + r 查看命令历史</code></li>
<li><code>ctrl + l</code> 清屏</li>
</ul>
</li>
</ul>
<h1 id="如何学习-Linux"><a href="#如何学习-Linux" class="headerlink" title="如何学习 Linux"></a>如何学习 Linux</h1><h2 id="1-心态"><a href="#1-心态" class="headerlink" title="1 心态"></a>1 心态</h2><ul>
<li><p>明确目的：用Linux来干什么（搭建服务器，做程序开发，日常办公，还是娱乐游戏）</p>
</li>
<li><p>面对现实：Linux 大都在命令行下操作，能否接受不用图形化界面</p>
</li>
<li><p>是学习Linux操作系统本身，还是某一个发行版（Ubuntu，CentOS，Fedora，OpenSUSE等）</p>
<ul>
<li><a href="https://baike.baidu.com/item/Linux%E7%89%88%E6%9C%AC">Linux发行版</a></li>
</ul>
</li>
<li><blockquote>
<p>一个典型的Linux发行版包括：<a href="https://baike.baidu.com/item/Linux%E5%86%85%E6%A0%B8">Linux内核</a>，一些<a href="https://baike.baidu.com/item/GNU">GNU</a><a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E5%BA%93/7662317">程序库</a>和工具，命令行shell，图形界面的[X Window](<a href="https://baike.baidu.com/item/X">https://baike.baidu.com/item/X</a> Window)系统和相应的<a href="https://baike.baidu.com/item/%E6%A1%8C%E9%9D%A2%E7%8E%AF%E5%A2%83/3373875">桌面环境</a>，如<a href="https://baike.baidu.com/item/KDE">KDE</a>或<a href="https://baike.baidu.com/item/GNOME">GNOME</a>，并包含数千种从办公套件，<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8/8853067">编译器</a>，<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/8853160">文本编辑器</a>到科学工具的应用软件。</p>
</blockquote>
</li>
</ul>
<h2 id="2-注重基础，从头开始"><a href="#2-注重基础，从头开始" class="headerlink" title="2 注重基础，从头开始"></a>2 注重基础，从头开始</h2><p><img src="https://img-blog.csdn.net/20180903153014660?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNTMwOTQz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>操作系统学习</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 入门学习3</title>
    <url>/p/a525d295.html</url>
    <content><![CDATA[<h1 id="Linux-入门学习3"><a href="#Linux-入门学习3" class="headerlink" title="Linux 入门学习3"></a>Linux 入门学习3</h1><p>[toc]</p>
<blockquote>
<p>学习使用 Vim 编辑器，编辑、保存文件，以及查看、浏览文件</p>
</blockquote>
<h1 id="1-使用文本编辑器-Vim"><a href="#1-使用文本编辑器-Vim" class="headerlink" title="1 使用文本编辑器 Vim"></a>1 使用文本编辑器 Vim</h1><h2 id="1-1-基本命令"><a href="#1-1-基本命令" class="headerlink" title="1.1 基本命令"></a>1.1 基本命令</h2><p><img src="https://img-blog.csdn.net/20171206113916293?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZG92ZTEyMDJseQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<ul>
<li>任何文件需要编辑默认化的编辑器</li>
<li>功能强大的全屏幕文本编辑器</li>
<li>新建、编辑、显示文件</li>
<li>Vim只有 <code>命令</code>，没有 <code>菜单</code></li>
<li>命令：<ul>
<li><code>vi</code>: 新建一个文件<ul>
<li>语法：<code>vi 文件名</code></li>
</ul>
</li>
<li>编辑：回车后进入全屏幕的<strong>命令模式</strong><ul>
<li>进入<strong>命令模式</strong>：<code>Vim</code> 等待输入指令</li>
<li>输入 <code>i</code>, <code>a</code>, <code>o</code>， 进入<strong>输入模式</strong>（左下角会有 <code>insert</code>）<ul>
<li><code>i</code>: 在当前光标所在字符的前面，转为输入模式</li>
<li><code>I</code>： 在当前光标所在行的行首转换为输入模式</li>
<li><code>a</code>: 在当前光标所在字符的后面，转为输入模式</li>
<li><code>A</code>:</li>
<li><code>o</code>: 在当前光标所在行的下方，新建一行，并转为输入模式</li>
<li><code>O</code>:</li>
<li><code>s</code>: 删除光标所在字符</li>
<li><code>r</code>: 替换光标处字符</li>
</ul>
</li>
<li>退出编辑：按 <code>ESC</code></li>
<li><code>ESC</code> 后进入<strong>命令模式</strong>，==先输入 <code>冒号</code>==：<ul>
<li><code>w</code>: 保存不退出</li>
<li><code>w!</code>: 强制保存不退出</li>
<li><code>wq</code>或 <code>x</code>: 保存并退出</li>
<li><code>wq!</code>: <strong>强制保存并退出</strong></li>
<li><code>q</code>: <strong>不保存退出</strong></li>
<li><code>q!</code>: 不保存强制退出</li>
<li><code>e!</code>: <strong>放弃所有修改，从上次保存文件开始编辑</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>遇到的问题：由于我在插入模式编辑完后，按 <code>ESC</code>退回不到命令模式，把虚拟机关掉后，<code>1.txt</code>文件转换成了 <code>.1.txt.swp</code>。再次创建1.txt并用vim打开：<ul>
<li>![image-20210312201009164](E:\LearningNotes\Linux\Linux 3.assets\image-20210312201009164.png)</li>
<li>Analysis：<ul>
<li><code>.</code> 是说明其是隐藏文件</li>
<li>猜测是由于我未能成功保存文件，产生的依然正在被编辑中的文件，被占用了</li>
</ul>
</li>
<li>solution：<ul>
<li>使用 <code>rm -rf .1.txt.swp</code>可以删除</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="1-2-g-和gdb的安装"><a href="#1-2-g-和gdb的安装" class="headerlink" title="1.2 g++和gdb的安装"></a>1.2 g++和gdb的安装</h2><p><strong>==遇到的下载安装问题仍然未解决，最后选择下载安装CentOS7，下载安装无任何问题？？？==</strong></p>
<ul>
<li><p><strong>检查gcc是否存在</strong>：<code>which gcc</code></p>
<ul>
<li>若没有安装，输入 <code>yum install gcc-c++</code></li>
</ul>
</li>
<li><p><strong>检查gdb是否存在</strong>：<code>which gdb</code></p>
<ul>
<li>若没有安装，输入 <code>yum install gdb</code></li>
</ul>
</li>
<li><p>检查g++是否存在：<code>which g++</code></p>
<ul>
<li>若没有安装，输入 <code>yum install gcc-c++ libstdc++devel</code></li>
</ul>
</li>
<li><ul>
<li><p><input disabled="" type="checkbox">  遇到了<strong>问题</strong>：未安装gcc，尝试用命令安装时出现：`</p>
</li>
<li><p>![image-20210313192827363](E:\LearningNotes\Linux\Linux 入门学习3.assets\image-20210313192827363.png)</p>
</li>
<li><p><strong>analysis:</strong> 似乎是网络问题</p>
</li>
<li><p><strong>solution1</strong>:</p>
<ul>
<li><a href="https://blog.csdn.net/qq_34430649/article/details/51474730?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328642.24663.16156346773373449&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">参考博客</a></li>
<li>输入内容后不能保存：<code>Cant open the file for writing</code><ul>
<li><strong>analysis</strong>:可能权限不足或者文件被占用</li>
<li><strong>solution1:</strong> 用vi时，加上 <code>sudo</code>来临时提供管理员权限</li>
<li>仍然不行。。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>solution2</strong>:</p>
<ul>
<li>改变思路，应该网络配置</li>
</ul>
</li>
<li><p><strong>solution3</strong>:</p>
<ul>
<li>在刚开始新建Linux系统的时候，选择 <code>镜像系统安装</code>，<code>gcc</code>和 <code>g++</code>似乎已被安装</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>问题：</strong><code>yum install g++</code></p>
<ul>
<li><blockquote>
<p>Loaded plugins: fastestmirror, refresh-packagekit, security<br>You need to be root to perform this command.</p>
</blockquote>
</li>
<li><p><strong>solution</strong>：<a href="https://blog.csdn.net/qq_26963433/article/details/78222506">参考 </a></p>
<ul>
<li><p>尝试使用 <code>su</code>命令切换到root用户，获取更大权限</p>
</li>
<li><p>result:</p>
<ul>
<li><blockquote>
<p>Loaded plugins: fastestmirror, refresh-packagekit, security<br>Setting up Install Process<br>YumRepo Error: All mirror URLs are not using ftp, http[s] or file.<br>Eg. Invalid release/repo/arch combination/<br>removing mirrorlist with no valid mirrors: /var/cache/yum/i386/6/base/mirrorlist.txt<br>Error: Cannot retrieve repository metadata (repomd.xml) for repository: base. Please verify its path and try again</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>analysis:</strong></p>
<ul>
<li><p><code>YumRepo Error: All mirror URLs are not using ftp, http[s] or file.</code></p>
<ul>
<li><a href="https://blog.csdn.net/weixin_44160584/article/details/110872926">参考博客</a></li>
</ul>
</li>
<li><p><code>http://mirror.centos.org/centos/6/os/i386/repodata/repomd.xml: [Errno 14] PYCURL ERROR 22 - &quot;The requested URL returned error: 404 Not Found&quot;</code></p>
</li>
<li></li>
<li><ol>
<li>没网，<code>ping www.baidu.com</code></li>
<li>ping通了的话，若还是用不了yum命令，说明yum镜像无了，那么需要就得下载一个来更新。</li>
</ol>
</li>
</ul>
</li>
<li></li>
</ul>
</li>
</ul>
<h2 id="1-3-编译与运行"><a href="#1-3-编译与运行" class="headerlink" title="1.3 编译与运行"></a>1.3 编译与运行</h2><ul>
<li><p>编译 <code>.c</code>文件：输入指令 <code>gcc 文件名.c -o 可执行程序名</code></p>
<ul>
<li><code>gcc</code>: 编译该文件</li>
<li><code>-o</code>: 在当前目录下</li>
</ul>
</li>
<li><p>运行可执行文件：输入 <code>./文件名</code></p>
</li>
<li><p>编译 <code>.cpp</code>文件：输入指令：``</p>
</li>
</ul>
<h2 id="1-4-简单配置-Vim"><a href="#1-4-简单配置-Vim" class="headerlink" title="1.4 简单配置 Vim"></a>1.4 简单配置 Vim</h2><ul>
<li><p>使用root权限进入根目录下的 <code>etc/</code>目录，列出所有文件，<code>vimrc</code>即是存放Linux默认配置的地方</p>
</li>
<li><p>可以用命令 <code>vim vimrc</code>进入文件，但一般自己进行配置时，选择在当前用户的主工作目录下新建一个 <code>.vimrc</code>文件来存放我们新增的配置</p>
</li>
<li><blockquote>
<p>set number<br>filetype on<br>set history=1000<br>set nocompatible<br>set shiftwidth=4<br>color evening<br>syntax on<br>set autoindent<br>set smartindent<br>set tabstop=4<br>set showmatch<br>set guioptions-=T<br>set vb t_vb=<br>set ruler<br>set nohls<br>set incsearch<br>if has(“vms”)<br>set nobackup<br>else<br>set backup<br>endif</p>
</blockquote>
<ul>
<li><blockquote>
<p>set nocompatible 注释掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限<br>set number 显示行号<br>filetype on 检测文件的类型<br>set history=1000 记录历史行数<br>color eveing 夜间背景模式<br>syntax on 语法高亮度显示<br>set autoindent<br>vim使用自动对起，也就是把当前行的对起格式应用到下一行；<br>set smartindent依据上面的对起格式，智能的选择对起方式<br>set tabstop=4 第一行设置tab键为4个空格<br>set shiftwidth=4 设置当行之间交错时使用4个空格<br>set showmatch 设置匹配模式，类似当输入一个左括号时会匹配相应的那个右括号<br>set guioptions=T 去除vim的GUI版本中的toolbar<br>set vb t_vb= 当vim进行编辑时，如果命令错误，会发出一个响声，该设置去掉响声<br>set ruler 在编辑过程中，在右下角显示光标位置的状态行<br>set nohls 默认情况下，寻找匹配是高亮度显示的，该设置关闭高亮显示<br>set incsearch 查询时非常方便，如要查找book单词，当输入到/b 会自动找到第一个b开头的单词，使用此设置会快速找到答案<br>if has(“vms”) 修改一个文件后，自动进行备份，备份的文件名为原文件名加“~“后缀<br>set nobackup<br>else<br>set backup<br>endif</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h1 id="2-查看文件的方式"><a href="#2-查看文件的方式" class="headerlink" title="2 查看文件的方式"></a>2 查看文件的方式</h1><h2 id="2-1-cat-命令"><a href="#2-1-cat-命令" class="headerlink" title="2.1 cat 命令"></a>2.1 <code>cat</code> 命令</h2><ul>
<li>作用：查看浏览文件</li>
<li>语法：<code>cat 文件名</code></li>
<li>选项：<code>-n</code>: 显示行号</li>
</ul>
<h2 id="2-2-tac命令"><a href="#2-2-tac命令" class="headerlink" title="2.2 tac命令"></a>2.2 <code>tac</code>命令</h2><ul>
<li>作用：从最后一行浏览文件内容</li>
<li>无 <code>-n</code>选项</li>
</ul>
<h2 id="2-3-more命令"><a href="#2-3-more命令" class="headerlink" title="2.3 more命令"></a>2.3 <code>more</code>命令</h2><ul>
<li>语法 <code>more 文件路径</code></li>
<li>作用：对一些长的内容可以进行翻页显示，左下角有进度百分比</li>
<li>按空格或 <code>f</code>进行翻页</li>
<li>按 <code>Enter</code>换行</li>
<li>按 <code>q</code>退出</li>
</ul>
<h2 id="2-4-less命令"><a href="#2-4-less命令" class="headerlink" title="2.4 less命令"></a>2.4 <code>less</code>命令</h2><ul>
<li>作用：有着 <code>more</code>的功能</li>
<li>更多功能：<ul>
<li><code>pageup</code>或者 <code>up</code>,向前翻页</li>
<li>查关键字：<ul>
<li>语法：<code>/关键字</code></li>
<li>按 <code>n</code>查找下一个关键字所在位置</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="2-5-head-命令"><a href="#2-5-head-命令" class="headerlink" title="2.5 head 命令"></a>2.5 <code>head</code> 命令</h2><ul>
<li>作用：查看文件的前几行</li>
<li>默认显示前十行</li>
<li>选项：<code>-n</code><ul>
<li><code>head -n 显示行数</code></li>
</ul>
</li>
</ul>
<h2 id="2-6-tail命令"><a href="#2-6-tail命令" class="headerlink" title="2.6 tail命令"></a>2.6 <code>tail</code>命令</h2><ul>
<li>作用：查看文件最后几行</li>
<li>默认显示最后十行</li>
<li>选项：<code>-n</code><ul>
<li><code>tail -n 显示行数</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>操作系统学习</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian和Typora之间的权衡</title>
    <url>/p/b7c2ebef.html</url>
    <content><![CDATA[

<ul>
<li>Typora 用于<strong>写博客笔记</strong></li>
<li>Obsidian 用于<strong>写论文笔记</strong>并<strong>进行管理</strong> ^81a14d</li>
</ul>
]]></content>
      <categories>
        <category>利器酷</category>
        <category>方法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>论文</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian</title>
    <url>/p/b58cbef5.html</url>
    <content><![CDATA[<h1 id="基本-markdown-语法"><a href="#基本-markdown-语法" class="headerlink" title="基本 markdown 语法"></a>基本 markdown 语法</h1><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>hello world<a href="%E5%BE%88%E9%95%BF%E7%9A%84%E8%84%9A%E6%B3%A8">^长脚注</a> ^968640</p>
<h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><p>==高亮==</p>
<h1 id="建立笔记与笔记之间的连接"><a href="#建立笔记与笔记之间的连接" class="headerlink" title="建立笔记与笔记之间的连接"></a>建立笔记与笔记之间的连接</h1><blockquote>
<p>形成知识网，可以使用左侧进行 graph view</p>
</blockquote>
<h2 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h2><blockquote>
<p>链接库中某篇笔记</p>
</blockquote>
<p>输入 <code>[[</code> 即可选择要链接的某篇库内文章：<a href="Obsidian%E5%92%8CTypora%E4%B9%8B%E9%97%B4%E7%9A%84%E6%9D%83%E8%A1%A1.md">Obsidian和Typora之间的权衡</a></p>
<ol>
<li>输入 # 可以选择链接文章某个段落：<a href="Obsidian.md#%E5%9F%BA%E6%9C%AC%20markdown%20%E8%AF%AD%E6%B3%95">基本 markdown 语法</a></li>
<li>输入 ^ 可以选择链接文章某个文字段落：<a href="Obsidian.md#%5E968640">链接hello world</a></li>
</ol>
<h2 id="反向链接"><a href="#反向链接" class="headerlink" title="反向链接"></a>反向链接</h2><blockquote>
<p>具体显示了哪些笔记链接了当前笔记，哪些笔记提到了当前笔记的名字但并未进行链接<br>在正文中提到了当前笔记的文件名，但没有链接当前笔记（没有用方括号括起来）</p>
</blockquote>
<ol>
<li>同 <code>链接当前文件</code> 一样在右侧边栏显示，可以将其转换为<strong>链接</strong></li>
</ol>
<h1 id="在-Hexo-博客中插入本地图片"><a href="#在-Hexo-博客中插入本地图片" class="headerlink" title="在 Hexo 博客中插入本地图片"></a>在 Hexo 博客中插入本地图片</h1><ol>
<li>图片保存于同一目录下的文件夹中；</li>
<li>使用 <code>Hexo3</code> 支持的语法 <code>&#123;% asset_img example.jpg hello%&#125;</code> 进行插入图片；</li>
</ol>
<p>缺点是无法在本地渲染图片</p>
<h1 id="检索和管理"><a href="#检索和管理" class="headerlink" title="检索和管理"></a>检索和管理</h1><blockquote>
<p>文件夹、标签、链接</p>
</blockquote>
<ol>
<li>点击左侧的 🔍 可以搜索文件夹、文件、链接等内容</li>
<li>在阅读视图里点击 front matter 的某个标签即可搜索到拥有该标签的所有文章</li>
</ol>
<h1 id="可以使用-Latex-公式"><a href="#可以使用-Latex-公式" class="headerlink" title="可以使用 $Latex$ 公式"></a>可以使用 $Latex$ 公式</h1><blockquote>
<p>同 typora</p>
</blockquote>
<p>$$D(x) = \begin{cases}<br>\lim\limits_{x \to 0} \frac{a^x}{b+c}, &amp; x&lt;3 \<br>\pi, &amp; x=3 \<br>\int_a^{3b}x_{ij}+e^2 \mathrm{d}x,&amp; x&gt;3 \<br>\end{cases}$$</p>
<h1 id="好用的插件"><a href="#好用的插件" class="headerlink" title="好用的插件"></a>好用的插件</h1><h2 id="slide"><a href="#slide" class="headerlink" title="slide"></a>slide</h2><p>用  <code>---</code> 来分割页面，制作为一个一个 slide 页面，然后点击右上角的 <code>开始演示</code></p>
<p><code>refs</code>：</p>
<ul>
<li><a href="https://publish.obsidian.md/help-zh">Obsidian 中文帮助 - Obsidian Publish</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/349638221">Obsidian：一款完美的科研笔记/知识管理软件 - 知乎 (zhihu.com)</a></li>
<li><a href="https://www.bilibili.com/video/BV1SA411i7BG?vd_source=de5d636c079ac45214bd34891ede8c4b">Obsidian：目前我们眼中最美最好用的免费笔记/知识管理软件_哔哩哔哩_bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1Ya4y1E7Mo?vd_source=de5d636c079ac45214bd34891ede8c4b">超好用笔记软件！神奇的Obsidian黑曜石Markdown文本编辑知识管理工具，成为你的第二大脑【方俊皓同学】_哔哩哔哩_bilibili</a></li>
</ul>
]]></content>
      <categories>
        <category>利器酷</category>
        <category>方法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>论文</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian和Zotero联动</title>
    <url>/p/52bffbc.html</url>
    <content><![CDATA[<h1 id="Mdnotes-Better-Bibtex-Zotfile"><a href="#Mdnotes-Better-Bibtex-Zotfile" class="headerlink" title="Mdnotes + Better-Bibtex + Zotfile"></a>Mdnotes + Better-Bibtex + Zotfile</h1><p> <a href="https://zhuanlan.zhihu.com/p/349638221">Obsidian：一款完美的科研笔记/知识管理软件 - 知乎 (zhihu.com)</a></p>
<h1 id="Obsidian-MarkMind-插件"><a href="#Obsidian-MarkMind-插件" class="headerlink" title="Obsidian MarkMind 插件"></a>Obsidian MarkMind 插件</h1><p><a href="https://www.bilibili.com/video/av381778544?vd_source=de5d636c079ac45214bd34891ede8c4b">mac版obsidian markmind基础教程_哔哩哔哩_bilibili</a></p>
<p>使用步骤：</p>
<ol>
<li>在一个 markdown 文件的 fontmatter 中加入 <code>mindmap-plugin: basic</code> 生成一个思维导图文件</li>
<li>打开为 markdown 文件</li>
<li>使用 obsidian 的语法 <code>[[</code>加入一本 pdf 文件</li>
<li>进入<strong>预览模式</strong>，点击 pdf 文件，生成并打开 pdf 注释文件</li>
<li>在该注释文件中 注释会自动将内容复制到剪切板中，复制到原 markdown 中即可。</li>
</ol>
<h1 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h1><ol>
<li>所有文献的 pdf/md 附件都保存在 <code>OneDrive</code> 中，不需要占用 <code>Zotero</code> 的空间；</li>
<li>使用 Zotfile+Better-Bibtex 基于可修改模版对 Zotero 中的文献条目生成 md 文件，同时使用 Obsdian 对集中于同一库中的笔记进行编辑和管理，都保存于 OneDrive中；</li>
<li>由于文献 pdf 附件和笔记保存于同一目录下，方便使用 Obsidian MarkMind 对 pdf 进行批注、记笔记和生成 思维导图。<ol>
<li>需要注意的是，只需要在 md 笔记的 front matter 中加入 <code>mindmap-plugin: basic</code> 即可将 md 文件以思维导图的形式打开。  这对后续的复习有很大帮助 <del>猜的</del></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>利器酷</category>
        <category>方法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>论文</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>Overleaf</title>
    <url>/p/26d71884.html</url>
    <content><![CDATA[<p>记录一下最近尝试学习在<code>Overleaf</code>上使用LaTeX撰写论文。为了符合<code>XDU</code>毕设论文格式的要求，可以基于<a href="https://github.com/note286/xduts">note286学长提供的一些文档类和宏包</a>。</p>
<ul>
<li>对于本地系统<ul>
<li>学长在<code>README</code>中将基于不同<code>Tex</code>发行版的使用教程写得很详尽。</li>
<li>在使用命令<code>xetex xduts.ins</code>后，可能会在全局将文档类和宏包安装，因此不需要再重复将其加入到自己的LaTeX项目目录下。</li>
</ul>
</li>
<li>而对于<code>Overleaf</code><ul>
<li>则必须将文档类和宏包加入到自己的项目根目录后，再打包上传至<code>Overleaf</code>的项目管理处</li>
<li>还需要将<code>Compiler</code>设置为<code>XeLaTeX</code></li>
</ul>
</li>
</ul>
<p>后面正式使用<code>LaTeX</code>写硕士研究生论文时，再根据自己的具体需要，调用<code>texdoc xduts</code>查阅<code>XDUTS</code>文档。</p>
<p>先记录到这里，Over。</p>
]]></content>
      <categories>
        <category>利器酷</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>Paper Reading: How good are query optimizers, really?</title>
    <url>/p/e547f891.html</url>
    <content><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><p>“How Good Are Query Optimizers, Really?” (Leis 等, 2015, p. 204) 「<br>查询优化器到底有多好？<br>大概就是通过比较查询优化器的有无时，查询执行的性能，来得到查询优化器对性能提升的程度<br>」</p>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>“ABSTRACT” (Leis 等, 2015, p. 204) 「<br>摘要：</p>
<p>Background：<br>找到好的连接次序，对于查询性能的提升很重要</p>
<p>Why：<br>引入 JOB，并使用复杂、真实的查询在传统优化器架构下 实验性地 测试优化器的主要组件。</p>
<p>What：<br>如上，就是测试优化器的主要组件：</p>
<ol>
<li>基数估计器</li>
<li>代价模型</li>
<li>计划枚举技术：穷举动态规划算法和启发性算法</li>
</ol>
<p>How：<br>通过引用 Join Order Benchmark，使用复杂真实多连接的查询</p>
<p>Novelty：<br>引入JOB新的基准测试？</p>
<p>Conclusion：</p>
<ol>
<li><strong>cardinality estimators</strong>：所有的都会出现大错误，并且如果查询引擎过于依赖他们，查询性能将不会很好</li>
<li><strong>cost model</strong>：比 Cardinality estimator 对于查询性能的影响小</li>
<li><strong>plan enumeration</strong>：在有次优cardinality estimates的情况下，穷举动态规划算法比启发式算法效果好。</li>
</ol>
<h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><h1 id="」"><a href="#」" class="headerlink" title="」"></a>」</h1><p>“INTRODUCTION” (Leis 等, 2015, p. 204) 「<br>引言<br>background：<br>找到一个<strong>好的连接次序</strong>是数据库领域研究最多的问题。</p>
<p>Why：<br>如摘要所说，使用真实复杂的工作负载，<strong>测试传统的优化器架构中三个组件</strong>对查询性能的提高程度。</p>
<p>What：<br>进行测试，对三个组件进行<strong>量化</strong>，借此来为完整的优化器设计提供思路。</p>
<p>How：</p>
<p>引入新的基准测试JOB，使用复杂真实的工作负载和查询。<br>文章的贡献——</p>
<ol>
<li>设计了JOB，挑战性的工作负载</li>
<li>首次对连接次序问题提出端到端的研究</li>
<li>量化三个组件的贡献，提供设计优化器的指导方针</li>
</ol>
<p>Novelty：</p>
<ol>
<li>新颖的方法：能够<strong>单独</strong>测试出优化器每个组件对查询性能的影响</li>
<li>专注于<strong>越来越平凡的内存场景</strong>：所有数据都装入了RAM</li>
</ol>
<p>Conclusion：<br>如摘要中的Conclusion所示。<br>」</p>
<h1 id="3-Cardinality-Estimation"><a href="#3-Cardinality-Estimation" class="headerlink" title="3 Cardinality Estimation"></a>3 Cardinality Estimation</h1><p>“CARDINALITY ESTIMATION” (Leis 等, 2015, p. 206) 「<br>基数估计是找到一个好的查询计划最重要的组件，没有好的基数估计，连接次序枚举和代价模型都无用。<br>这一小节通过比较 估计的基数 和 真实的基数，来调查关系数据库系统中的质量。<br>」</p>
<h2 id="3-1-Estimates-for-Base-Table"><a href="#3-1-Estimates-for-Base-Table" class="headerlink" title="3.1 Estimates for Base Table"></a>3.1 Estimates for Base Table</h2><h3 id="Base-Table"><a href="#Base-Table" class="headerlink" title="Base Table?"></a>Base Table?</h3><p>“Base Tables” (Leis 等, 2015, p. 207) 「<br>基表：实际存在于数据库中的表<br>查询表：查询结果对应的表<br>视图表：由基本表和其他视图表导出的表，为虚表，不对应实际存储的数据。</p>
<p>基表的性质：</p>
<ol>
<li>列是同质的，即每一列中的分量都是同一类型的数据，来自同一个域</li>
</ol>
<ol start="2">
<li>不同的列可以来自同一个域，每一列又称之为属性，不同的属性要有不同的属性名</li>
</ol>
<ol start="3">
<li>列的顺序无关紧要</li>
</ol>
<ol start="4">
<li>行的顺序也无关紧要</li>
<li>任意两个元组的候选码不能取相同的值</li>
<li>分量必须要取原子值，即一个表中的某一项不能再拆成好几项</li>
</ol>
<p>」</p>
<p>“Estimates for Base Tables” (Leis 等, 2015, p. 207) 「<br>基表：实际存在于数据库中的表<br>使用 q-error 来衡量基表基数估计的质量。公式为 ｜估计值/实际值｜，是一个大于等于1的比率值。</p>
<p>观察基表选择的 q-error 值，得出以下结论：<br><strong>DBMS A和Hyper——</strong><br>估计具有复杂谓词（Like） 基表选择 的基数很准，因为估计基表的选择率时，使用了样本法（1000）。但是因为样本太小，对于选择率很小（10^-5）的情况，就会导致很大的选择性估计误差。</p>
<p><strong>其他的数据库系统——</strong><br>表现更差，基于了每个属性的直方图，但是基于直方图的基数估计对于复杂的谓词并不是很有效，也无法检测出属性之间的联系。<br>」</p>
<h2 id="3-2-Estimates-for-Joins"><a href="#3-2-Estimates-for-Joins" class="headerlink" title="3.2 Estimates for Joins"></a>3.2 Estimates for Joins</h2><p>“Estimates for Joins” (Leis 等, 2015, p. 207) 「<br>本节的实验结果并不能说明相应系统的优化器不够好，因为查询的性能还依赖于优化器是如何使用和信任这些估计数据的。</p>
<p><strong>为连接做基数估计：</strong><br>背景：样本法和直方图 对于连接中间结果的估计并没有很有效。</p>
<p><strong>实验结果</strong>：</p>
<ol>
<li>每个系统对 估计误差的 差异差不多，并且都不是很理想</li>
<li>所有系统都倾向于 低估了多连接查询的结果大小</li>
</ol>
<p><strong>改进</strong>：</p>
<p>可以像 DBMS A，使用阻尼因子来减少这种低估的程度。<br>」</p>
<h2 id="3-3-Estimates-for-TPC-H"><a href="#3-3-Estimates-for-TPC-H" class="headerlink" title="3.3 Estimates for TPC-H"></a>3.3 Estimates for TPC-H</h2><p>“Estimates for TPC-H” (Leis 等, 2015, p. 208) 「<br>TPC-H：针对 OLAP 场景的测试</p>
<p>TPC-C： 针对 OLTP 的场景的测试<br>TPC-H 的工作负载对于系统的基数估计器并没有多大挑战，文章引入的 JOB 查询集合可以满足。<br>」</p>
<h2 id="3-4-Better-Statistics-for-PosgreSQL"><a href="#3-4-Better-Statistics-for-PosgreSQL" class="headerlink" title="3.4 Better Statistics for PosgreSQL"></a>3.4 Better Statistics for PosgreSQL</h2><p>“Better Statistics for PostgreSQL” (Leis 等, 2015, p. 208) 「<br>对照试验表明，对于 distinct counts 的估计误差对于基数估计误差的影响较小，相反由于distinct counts 的误差会导致基数估计的值更大一些，这使得 负负得正。。。<br>」</p>
<h1 id="4-When-do-bad-cardinality-estimates-lead-to-slow-queries"><a href="#4-When-do-bad-cardinality-estimates-lead-to-slow-queries" class="headerlink" title="4 When do bad cardinality estimates lead to slow queries?"></a>4 When do bad cardinality estimates lead to slow queries?</h1><h2 id="4-1-The-Risk-of-Relying-on-Estimates"><a href="#4-1-The-Risk-of-Relying-on-Estimates" class="headerlink" title="4.1 The Risk of Relying on Estimates"></a>4.1 The Risk of Relying on Estimates</h2><p>“The Risk of Relying on Estimates” (Leis 等, 2015, p. 209) 「<br>依赖基数估计的<strong>风险：</strong><br>由于PostgreSQL的优化器纯粹基于代价<strong>，</strong>不考虑基数估计的内在不确定性和不同算法选择的渐近复杂。</p>
<ol>
<li>查询执行没有在合理时间内完成：由于基数低估过于频繁，导致优化器会冒着高风险来选择低收益的嵌套循环连接；</li>
<li>还有一部分查询的执行时间比最优计划的时间多十倍：因为基数低估导致hash连接的hash表大小被低估</li>
</ol>
<p>」</p>
<h2 id="4-2-Good-Plans-Despite-Bad-Cardinalities"><a href="#4-2-Good-Plans-Despite-Bad-Cardinalities" class="headerlink" title="4.2 Good Plans Despite Bad Cardinalities"></a>4.2 Good Plans Despite Bad Cardinalities</h2><p>“Good Plans Despite Bad Cardinalities” (Leis 等, 2015, p. 209) 「<br>理论上，有着不同的连接顺序的计划的查询执行时间会在量级上不同，但是当只有主键索引并且嵌套循环连接禁止、hash冲计算启用后，大多数查询的性能会很接近最优计划的性能：<br>原因有二——</p>
<ol>
<li>只有主键索引，没有外键索引，这导致大多数表只能用全表扫描，这对于表连接顺序的影响很小</li>
</ol>
<ol start="2">
<li>主存足够大，装入了所有的索引和数据。。。。</li>
</ol>
<p>」</p>
<h2 id="4-3-Complex-Access-Paths"><a href="#4-3-Complex-Access-Paths" class="headerlink" title="4.3 Complex Access Paths"></a>4.3 Complex Access Paths</h2><p>“Complex Access Paths” (Leis 等, 2015, p. 210) 「<br>整体性能普遍提高了，但是随着可用索引的逐渐增多，查询优化器的工作也越来越困难</p>
<p>」</p>
<h2 id="4-4-Join-Crossing-Correlations"><a href="#4-4-Join-Crossing-Correlations" class="headerlink" title="4.4 Join-Crossing Correlations"></a>4.4 Join-Crossing Correlations</h2><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>“Join-Crossing Correlations” (Leis 等, 2015, p. 210) 「</p>
<p>背景：<br>对于单表，对于存在有相互关系谓词的查询，使用样本可以得到较准确的技术估计。<br>对于多表连接，来自不同的表的连接查询有 <strong>相互关系的谓词</strong> 所包含的列 ，由连接来连接。</p>
<p>」</p>
<p>“DBLP case,” (Leis 等, 2015, p. 210) 「<br>例子：<br><code>SELECT COUNT(*) FROM Authors, Authorship, Papers WHERE Authorship.author = Author.author AND Authorship.venue = &quot;VLDB&quot;</code></p>
<p>对于这个例子，<br><strong>一般</strong>：需要先进行表的连接，然后在进行过滤；<br><strong>特殊物理设计：</strong>将Authorship中的物理设计根据Paper.venue进行划分，这样在连接发生之前，就可以将过滤隐性的进行。</p>
<p><strong>优点</strong>：可以避免中间结果无关数据过多。</p>
<p>」</p>
<h1 id="5-Cost-Models"><a href="#5-Cost-Models" class="headerlink" title="5 Cost Models"></a>5 Cost Models</h1><p>与Cardinality estimation error相比，cost models对性能的影响很小。。</p>
<h1 id="6-Plan-Space"><a href="#6-Plan-Space" class="headerlink" title="6 Plan Space"></a>6 Plan Space</h1><p>“PLAN SPACE” (Leis 等, 2015, p. 212) 「<br><strong>最后一个重要的优化器组件</strong>——一个计划枚举算法（探索 <strong>语义等价的连接次序</strong> 计划空间）</p>
<ol>
<li>全面探索——DP</li>
<li>启发式</li>
</ol>
<p><strong>这个章节的目的：</strong><br>找到需要<strong>多大的搜索空间</strong>，才能找到一个好的计划</p>
<p>」</p>
<h2 id="6-1-How-Important-is-the-Join-Order"><a href="#6-1-How-Important-is-the-Join-Order" class="headerlink" title="6.1 How Important is the Join Order"></a>6.1 How Important is the Join Order</h2><p>“clearly illustrate the importance of the join ordering problem” (Leis 等, 2015, p. 213) 「<br>从这张代价分布图：</p>
<ol>
<li>最优计划的代价比最慢/中位的代价快了几个数量级</li>
<li>不同查询的代价分布很不同</li>
<li>外键+主键 这种索引配置的最优代价比其他配置快不少。</li>
</ol>
<p>」</p>
<p>“highlight the dramatically different search spaces of the three index configurations.” (Leis 等, 2015, p. 213) 「<br>不同的 索引配置，其对应的搜索空间也很不同：</p>
<ol>
<li>有外键索引的配置，搜索空间更偏向于最优计划的代价（1.5X）</li>
<li>有外键的索引配置：搜索空间的代价更宽泛</li>
</ol>
<p>」</p>
<h2 id="6-2-Are-Bushy-Trees-necessary"><a href="#6-2-Are-Bushy-Trees-necessary" class="headerlink" title="6.2 Are Bushy Trees necessary"></a>6.2 Are Bushy Trees necessary</h2><p>“Are Bushy Trees Necessary?” (Leis 等, 2015, p. 213) 「<br>本章节要解决的问题：多枝树是否有必要？</p>
<p><strong>连接树形——</strong><br><strong>左深树</strong>：</p>
<ol>
<li>连接树的每个连接算子的右子节点都一定是一个基表</li>
<li>NLJ 的连接树只可能是左深树</li>
</ol>
<p><strong>右深树</strong>：</p>
<ol>
<li>连接树的每个连接算子的左子节点都一定是一个基表</li>
<li>HJ 和 Sort-Merge Join的连接树有可能是右深树</li>
<li>哈希连接为右深树时，会同时有多个表被做成Hash表，从而消耗过多的PGA</li>
</ol>
<p><strong>锯齿形树（zig-zag trees）：</strong></p>
<ol>
<li>连接树的每个连接算子的左右子节点中，至少有一个基表。</li>
</ol>
<p><strong>浓密树（bushy trees）：</strong></p>
<ol>
<li>连接树的每个连接算子的左右子节点可能都不是基表，结构为安全自由</li>
<li>优化器无法选择其他树形时，才会选择浓密树</li>
<li>一般当查询包含 子查询/视图，可能产生浓密树。</li>
</ol>
<p>-–</p>
<p><strong>连接树的处理规则：</strong></p>
<p>・从<strong>最左端的叶节点</strong>开始处理</p>
<p>・左节点的处理<strong>优先级高</strong>于右节点</p>
<p>・<strong>左节点驱动右节点</strong></p>
<p>・子节点在父节点之前进行处理</p>
<p>・子节点处理完获得的<strong>数据返回给父节点。</strong><br>-–</p>
<p><strong>限制条件和连接条件——</strong><br><strong>注：限制条件可在连接条件之前执行</strong><br>限制条件：</p>
<ol>
<li>两个数据集通过连接条件进行连接，Where中（传统）或者From中（ANSI 标准）</li>
</ol>
<p>连接条件：</p>
<ol>
<li>在连接返回的结果集上应用限制条件（传统和ANSI 标准）</li>
<li>防止出现 交叉乘积连接</li>
</ol>
<p>-–</p>
<p><strong>连接类型——</strong><br><strong>Nested-Loop Join ：</strong></p>
<ol>
<li>左子节点为外部循环，右子节点为内部循环</li>
<li>对于左子节点的每一条记录，右子节点都要执行一次连接条件和限制条件。</li>
</ol>
<p>2.1 外部循环只执行一次<br>2.2 内部循环执行多次</p>
<ol start="3">
<li>在所有数据执行完之前，就可以获得结果集的第一条记录</li>
<li>可以利用索引来高效连接</li>
</ol>
<p><strong>Hash Join：</strong><br>1.</p>
<p><strong>Sort-Merge Join：</strong></p>
<ol>
<li>每个输入数据集都必须先按照连接条件的字段进行排序</li>
<li>每个输入数据集只执行一次</li>
<li>在所有数据执行完之后，才能获得第一条记录</li>
</ol>
<p>」</p>
<h2 id="6-3-Are-Heuristics-Good-Enough"><a href="#6-3-Are-Heuristics-Good-Enough" class="headerlink" title="6.3 Are Heuristics Good Enough"></a>6.3 Are Heuristics Good Enough</h2><p>“Are Heuristics Good Enough?” (Leis 等, 2015, p. 213) 「<br><strong>启发式算法 足够好吗？</strong></p>
<p>在技术估计质量不好的情况下，比较：</p>
<ol>
<li>全面的动态规划：exhaustive dynamic programming</li>
</ol>
<ol start="2">
<li>随机化的启发式：QuickPick-1000</li>
<li>贪婪的启发式：Greedy Operator Ordering</li>
</ol>
<p>归一化，用真实的基数使用动态规划得到真实最优计划的代价，得到结<strong>论</strong>：</p>
<ol>
<li>尽管存在技术估计误差，使用 全面的动态规划 算法，来全面地检查 搜索空间 是很值得的</li>
<li>好的 基数估计 的性能潜力，会提高性能</li>
<li>考虑到，为 <strong>数十个表连接的查询</strong> 找到最优计划，是<strong>存在 全面的枚举算法</strong>：因此很少有需要诉诸于 <strong>禁用浓密树和启发式算法</strong> 的情况。</li>
</ol>
<p>」</p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>Paper Reading</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Cardinality Estimation</tag>
        <tag>Cost Model</tag>
        <tag>Search Space</tag>
      </tags>
  </entry>
  <entry>
    <title>Paper Reading: On the Calculation of Optimality Ranges for Relational Query Execution Plans</title>
    <url>/p/5d3b93c8.html</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p> <strong>最优范围的目的</strong> ：指出何时最优计划仍然最优。</p>
<h1 id="最优范围计算的步骤："><a href="#最优范围计算的步骤：" class="headerlink" title="最优范围计算的步骤："></a><strong>最优范围计算的步骤：</strong></h1><p> <strong>1.搜索到估计最优计划：</strong> 三个子步骤</p>
<p> <strong>2.枚举可替代的计划</strong> ：用动态规划算法（我记得书上动态规划算法是用在枚举仅有连接和选择的查询里，枚举出最优连接次序）得到的 <strong>表（由计划类组成，每个计划类有相同属性）</strong> ，用此表来枚举可替代的计划，基于最优子结构的特性，但是这样只能枚举一个计划类的包含最优子计划的替代计划。但是此算法需要考虑所有可能的计划类，不只是包含（依赖于）DPC 的算法，需要用剪枝算法，需要考虑不止包含最优子计划的可替代计划</p>
<p> <strong>第二个基石：OPC（Optimal Plan Container）</strong> 用于 <strong>算法2（剪枝算法）</strong> 得到较少的可替代计划集合。剪枝</p>
<p><strong>3.计算最优计划的最优范围：</strong></p>
<p>给定一个成本函数（也可以是非线性函数），**$C_{out}$<strong>等线性函数可以，（ <strong>第一个基石）</strong> 根据该成本函数得到最优计划关于某个 待求最优范围 的子计划的 <strong>PCFs</strong> ，将其与 可替代计划的PCFs求得</strong>交叉点，用于算法1计算得到紧致的最优范围。**</p>
<p><strong>最优范围的计算：</strong></p>
<ol>
<li>通过查询优化时的 <strong>动态规划枚举算法</strong> ，得到  <strong>最优计划 和 维持该动态规划表（由计划类组成，计划类中的计划拥有相同的逻辑属性，例如引用了相同的关系集合）</strong> ；</li>
<li>选择该表中一个含有最优计划部分的计划类<strong>（想要计算最优范围的计划类），将其作为DPC（Dependent Plans Class），初始化最优范围</strong>为[0;∞]</li>
<li>根据DPC的outgoing edge计划类及其可替代计划计算DPC的最优范围；<ol>
<li>依次对outgoing edge的计划类计算，反复对最优范围进行紧致；</li>
<li><strong>枚举</strong>最优计划的子计划的上述 <strong>替代计划</strong> ，可以使用 <strong>算法2（剪枝算法）</strong> 得到更少的替代计划；</li>
<li>通过对所有枚举计划 <strong>建模为PCF</strong> ，其中DPC作为<strong>参数</strong></li>
<li>用最优计划的子计划的 PCF 和其他替代计划依次比较，<strong>计算交叉点</strong></li>
<li><strong>通过算法1</strong>将最优范围紧致。若交叉点超过当前最优范围，则舍弃；</li>
</ol>
</li>
<li>得到 DPC 使得最优计划保持最优的最优范围。</li>
</ol>
<p><strong>注意：</strong></p>
<ul>
<li>没有引入剪枝的时候，需要考虑所有的替代计划，包含DPC的所有计划？<br>例如最后一个计划类中的 RSTU，V的替代计划中，RSTU依赖于DPC，仍有替代计划可枚举。</li>
<li>PCFs 可以有多个参数和可以是线性或非线性。</li>
</ul>
<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p><strong>“Once a cardinality is out of its optimality range, the cached plan is not optimal anymore and evicted from the cache”</strong> <strong>(<strong>Florian Wolf 等, 2018, p. 9</strong>)</strong> 怎么<strong>判断一个已经缓存的查询执行计划过时？</strong><br>就在缓存该查询计划时，同时保存该计划的最优范围，<strong>执行时通过得到的中间结果基数与最优范围进行比较</strong>来判断是否过时。<br><strong>若过时，则找到最健壮的计划执行？？？？</strong></p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>Paper Reading</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Cardinality Estimation</tag>
        <tag>Optimizer</tag>
      </tags>
  </entry>
  <entry>
    <title>Paper Reading: Plan Stitch: Harnessing the Best of Many Plans</title>
    <url>/p/116cd8bd.html</url>
    <content><![CDATA[<h1 id="Title"><a href="#Title" class="headerlink" title="Title"></a>Title</h1><p>“Plan Stitch: Harnessing the Best of Many Plans” (Ding 等, 2018, p. 1123) <strong>【</strong></p>
<p>计划<strong>缝合</strong>：利用众多计划的<strong>精华/最优</strong></p>
<p>两个关键点：</p>
<ol>
<li>缝合</li>
<li>精华/最优</li>
</ol>
<p>对本科毕设的最后一步或许有帮助：基于Plan模版进行拼接和修改。<br>】</p>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>“ABSTRACT” (Ding 等, 2018, p. 1123) 【<br>摘要：<br><strong>背景：</strong><br>查询优化器选择一个非最优的查询执行计划，会导致查询性能的下降。<br>现如今的商业 DBMS 会选择使用 Reversion-based plan correction 来解决该问题。其原理是在检测到出现查询性能降低时，重新纠正——使用之前仍然有效且具有最低执行代价的旧计划。</p>
<p><strong>真正的发现：</strong><br>RBPC 的基本原理使得其风险很小，但是忽略了更加有效的优化方式——<strong>从之前执行计划的高效 *子计划* 中获得潜在价值的信息！</strong>这会比单独旧的执行计划 代价更低。</p>
<p><strong>研究成果：</strong><br>在 Microsoft SQL Server 之上实现 Plan Stitch 方法，经过 TPC-DS 测试，显著降低执行代价。</p>
<p>】</p>
<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>“INTRODUCTION” (Ding 等, 2018, p. 1123) 【<br>引言：</p>
<p><strong>关于什么：</strong></p>
<p>同一个查询所得到的查询计划会因为各种原因更改，更改之后可能会导致 <strong>计划回归</strong> 的问题，具体表现就是优化器所选择的最新查询计划执行代价比原先高。<br>但是目前商业数据库系统中的解决方法—— RBPC 所生成的计划效率上上升空间还很大。</p>
<p><strong>解决的方法</strong>：</p>
<p>在 Microsoft SQL Server 的基础上，实现了 Plan Stitch ，是一个比 RBPC 更高效的 APC 策略。<br>通过考虑同一个查询的 过去<strong>已执行的计划以及其子计划</strong>：</p>
<ol>
<li>在<strong>受限制的搜索空间（有相同的逻辑表达式，并且在当前的配置环境中有效）</strong>中，通过比较相同逻辑表达式的<strong>可替代子计划</strong>，来发现<strong>高效的子计划</strong>；</li>
<li>用 <strong>基于动态规划算法</strong> 的<strong>高效、二次时间复杂度</strong>的算法将这些<strong>高效子计划</strong>，<strong>合并成在执行代价上最低的缝合计划</strong>；</li>
<li>用<strong>计划强制特征</strong>来影响优化器的计划选择，以验证计划的<strong>有效性</strong>。</li>
</ol>
<p><strong>迷人的地方</strong>：</p>
<p>在 RBPC 的基础上，找到了可以提升的地方：在<strong>物理算子层面</strong>对执行代价进行优化，通过<strong>已执行计划的子计划缝合</strong>来体现。<br>拥有三个特点：</p>
<ol>
<li>全自动</li>
<li>低开销</li>
<li>低风险</li>
</ol>
<p><strong>新颖的地方：</strong><br>将过去已执行的计划的子计划进行缝合。</p>
<p><strong>眼前一亮的结论</strong>：</p>
<p>通过 TPC-DS 和三个真实的用户负载当做实验环境，发现 Plan Stitch 相比较于 RBPC 的提升很大。</p>
<p>】</p>
<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>“OVERVIEW” (Ding 等, 2018, p. 1125) 「<br><strong>Overview</strong>：<br><strong>问题陈述</strong>：<br>Plan Stitch 为给定的查询 q 构建一个有最低执行代价的查询计划 p，p有一个限制：在p中的每一个算子，都只能从 <strong>过去已执行的计划</strong> 中获取。</p>
<p><strong>架构概述：</strong><br><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/03/image-20230304220524436.png" alt="image-20230304220524436"></p>
<p>Plan Stitch 在<strong>查询优化和执行</strong>的关键路径之外工作，作为<strong>外部组件或者背景线程。</strong></p>
<ol>
<li><strong>优化器</strong>为 <strong>给定的查询</strong>和<strong>现在的配置</strong> 选择一个计划，计划执行并且将<strong>执行时的统计信息</strong>被记录在<strong>仓库</strong>中。 执行的统计信息——计划结构和算子级别的执行代价。</li>
</ol>
<ol start="2">
<li>仓库 <strong>主动收集</strong>计划的历史，包括<strong>同一个查询的已经执行的不同计划</strong></li>
</ol>
<ol start="3">
<li>当<strong>同一个查询</strong>的不同计划已经执行，并且执行信息在仓库中可用：<strong>触发</strong> Plan Stitch 来查找可替代的 <strong>拼接计划</strong>。</li>
</ol>
<p>3.1 触发后，Plan Stitch <strong>从仓库中获得已执行计划</strong>，从 元数据 中<strong>获得现在的索引配置</strong>。<br>3.2 Plan stitch 将最终生成的<strong>缝合 plan 传给优化器</strong>，可以用于 查询 q 未来的执行。<br>4 Plan stitch 会用 <strong>强制特征系统</strong> <strong>指定查询的执行计划暗示</strong>，使得优化器用此暗示来在计划搜索<strong>进行剪枝</strong>。<br>5 仓库会对查询执行计划进行<strong>超龄判断</strong>，以确保在数据变化时 Plan Stitch <strong>代价估计的准确</strong>。</p>
<p>」</p>
<h1 id="Plan-Stitch（核心）"><a href="#Plan-Stitch（核心）" class="headerlink" title="Plan Stitch（核心）"></a>Plan Stitch（核心）</h1><h2 id="Constrained-Search-Space"><a href="#Constrained-Search-Space" class="headerlink" title="Constrained Search Space"></a>Constrained Search Space</h2><p>“Constrained Search Space” (Ding 等, 2018, p. 1126) 「<br>生成受限搜索空间分两个步骤：<br>一、识别等价的子计划：<br>是否等效</p>
<ol>
<li>逻辑表达式 相同</li>
<li>需要的物理属性 相同</li>
</ol>
<p><strong>之前的工作：</strong><br>tests 和 greedy 算法</p>
<p><strong>本文章的实现：</strong><br>自己实现的关于<strong>匹配等效子计划</strong>的算法：<br>  用类似于之前工作的启发式 提供在实现简易、开销和匹配的准确度中 的合理平衡。<br>  用优化器来确保缝合计划的准确，以当作计划强制的副作用。</p>
<p><strong>二、编码受限的搜索空间</strong></p>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/03/image-20230304220502732.png" alt="image-20230304220502732"></p>
<p>构造一个 AND-OR 图（参考Volcano 优化器生成器的文章？）。<br>- <strong>AND 节点</strong>对应 physical operator<br>- <strong>OR 节点</strong>对应 一个有着 physical properties 的 logical expression<br>为什么使用 AND-OR图：</p>
<ol>
<li>一个AND节点的所有孩子节点一定是OR节点：OR 子节点 代表 AND 节点的孩子子计划对应的logical expr 和 所需 physical properties</li>
</ol>
<ol start="2">
<li>一个OR节点的所有子节点一定是AND节点：AND 子节点代表 OR 节点对应 Logical Expression 的 可替代子计划的 根物理算子</li>
</ol>
<p><strong>具体构造过程</strong>：</p>
<ol>
<li>首先，对于一个给定的查询，在它对应已执行的所有执行计划中，分别识别出每个以物理算子为根的子计划的所有等效子计划；</li>
<li>对于一个等效子计划组，创建一个 OR 节点来代表这个子计划组的逻辑表达式和需要的的物理属性；</li>
<li>对于这个组中每个子计划的物理算子，在该 OR 节点下分别创建子节点 AND。</li>
</ol>
<p>」</p>
<h2 id="Constructing-the-Stitched-Plan"><a href="#Constructing-the-Stitched-Plan" class="headerlink" title="Constructing the Stitched Plan"></a>Constructing the Stitched Plan</h2><p>“Constructing the Stitched Plan” (Ding 等, 2018, p. 1126) 「<br><strong>构建缝合计划：</strong><br>AND-OR 图的两个性质：</p>
<ol>
<li>无环图</li>
<li>至少有一个 OR 节点，代表该查询</li>
</ol>
<p>概述：使用 动态规划 算法，从叶子 AND 节点到 根 OR 节点，为每一个 AND 节点 和 OR节点 缝合一个代价最低的缝合计划。</p>
<p><strong>分情况获得最优缝合计划：</strong></p>
<p>叶子层的最优缝合计划：就是 AND 节点自己<br>OR节点的最优缝合计划：从子 AND 节点中找到最低代价的缝合计划<br>非叶子AND节点的最优缝合计划：将其每个子OR节点的最优缝合子计划，缝合到 AND 节点对应的 物理算子下，当做一个一AND节点为根的缝合子计划</p>
<p><strong>计算缝合计划的代价：</strong></p>
<p>- 每个算子都存储着过去执行时的代价。通过比较代价来得到每个节点的最优缝合计划。<br>- 使用函数 stitchedSubUnitCost 来计算以op为根的缝合计划的代价。</p>
<p>」</p>
<h2 id="Stitch-ALgorithm"><a href="#Stitch-ALgorithm" class="headerlink" title="Stitch ALgorithm"></a>Stitch ALgorithm</h2><p>将算法1和图3结合起来可以很容易理解。<br>根据输入的 AND-OR 图，自底向上地利用动态规划算法实现 根OR节点 的最廉价缝合子计划。</p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>Paper Reading</category>
      </categories>
      <tags>
        <tag>Database</tag>
        <tag>Optimizer</tag>
        <tag>Plan Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>Paper Reading: Robustness metrics for relational query execution plans</title>
    <url>/p/7091acdb.html</url>
    <content><![CDATA[<h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><p>本篇文章的两个核心内容：</p>
<p>“three novel metrics for the robustnes” (Florian Wolf 等, 2018, p. 1360)：三个健壮性指标（关于基数估计误差），用于衡量qep的健壮性。适用性很强：</p>
<p>“all kinds of operators, operator implementations, query execution plan trees, and monotonically increasing and differentiable cost function” (Florian Wolf 等, 2018, p. 1361) 支持各种运算，运算的物理实现，查询执行计划树以及单调递增和可微分的代价函数</p>
<p>“a novel plan selection strategy that takes both, estimated cost and estimated robustness into account, when choosing a plan for execution” (Florian Wolf 等, 2018, p. 1360)：根据三个指标权衡 估计的代价 和 估计的健壮性，来选择要执行的计划。</p>
<h1 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2 相关工作"></a>2 相关工作</h1><p>考虑所有的计划树，在优化时执行算法</p>
<p>“limit the number of robust plan candidates to the cheapest plans encountered during the initial query optimization” (Florian Wolf 等, 2018, p. 1361) 健壮性的候选计划限制为： 在查询优化初期遇到的代价最小的计划</p>
<h1 id="3-问题阐述"><a href="#3-问题阐述" class="headerlink" title="3 问题阐述"></a>3 问题阐述</h1><p>定义 各种基本符号 C_err，q-error，选择一个成本公式（线性、单调递增，可微分）</p>
<p>“argue that choosing a robust plan can result in faster query execution times in the presence of cardinality estimation errors” (Florian Wolf 等, 2018, p. 1361) 基数估计错误不可避免，因此选择健壮性更强的计划，其执行时间更短？是否一定？也许估计的最优计划其执行时间仍然最短</p>
<p>“The most robust plan is the plan with the smallest cost error factor cerr **within the set of robust plan candidates.**” (Florian Wolf 等, 2018, p. 1361)</p>
<p>“an ideal robustness metric should fulfill the following three consistency requirements.” (Florian Wolf 等, 2018, p. 1362) 理想的健壮性指标的 一致性需求，下面得到的三个指标都应该满足</p>
<h1 id="4-健壮性指标"><a href="#4-健壮性指标" class="headerlink" title="4 健壮性指标"></a>4 健壮性指标</h1><p>第一块基石：定义 PCF</p>
<p>“the cost of a query execution plan or sub-plan, modeled as function of one cost parameter.” (Florian Wolf 等, 2018, p. 1363)</p>
<p>“the slopes of PCFs around the estimated cardinality indicate the sensitivity of a plan towards estimation errors” (Florian Wolf 等, 2018, p. 1363) PCFs （参数化成本函数）的斜率表现了 一个计划对基数估计误差的敏感度</p>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/03/image-20230304221141724.png" alt="image-20230304221141724"><br>(Florian Wolf 等, 2018, p. 1364) PCF 的使用，给这篇文章提供了思路，对 m:n 连接的 PCF 建模，使得整个计划的成本可控</p>
<h2 id="基数-斜率健壮性指标"><a href="#基数-斜率健壮性指标" class="headerlink" title="基数-斜率健壮性指标"></a>基数-斜率健壮性指标</h2><p><strong>定义：</strong></p>
<p>“cardinality-slope value δf,e” (Florian Wolf 等, 2018, p. 1364)</p>
<p>“edge weighting function φ ∶ EP → [0.0, 1.0]” (Florian Wolf 等, 2018, p. 1364) 这个函数是如何得到的，如何进行映射</p>
<p>对每个边的运算符不同进行不同地赋权重？<br>可以简单的给笛卡尔积连接1，有外码的连接和基表扫描0</p>
<p>“The robustness value rδf of the cardinalityslope robustness metric” (Florian Wolf 等, 2018, p. 1364)</p>
<p><strong>总结：</strong></p>
<p>“Cardinality-Slope” (Florian Wolf 等, 2018, p. 1364) 组成 基数-斜率 健壮性指标的<strong>两个基石</strong></p>
<ol>
<li>基数-斜率 值</li>
<li>边权重函数</li>
</ol>
<p>解决哪些边对总的代价影响较大的问题，也就是对于某边增加一个元组对总体成本的影响多大</p>
<p>主要是认为edge越深，对计划代价的影响越大</p>
<h2 id="中选率-斜率健壮性指标"><a href="#中选率-斜率健壮性指标" class="headerlink" title="中选率-斜率健壮性指标"></a>中选率-斜率健壮性指标</h2><p><strong>定义：</strong></p>
<p>“selectivity-slope value δs,op” (Florian Wolf 等, 2018, p. 1366)</p>
<p>“The robustness value rδs of the selectivityslope robustness metric” (Florian Wolf 等, 2018, p. 1366)</p>
<p><strong>总结：</strong></p>
<p>“Selectivity-Slope” (Florian Wolf 等, 2018, p. 1366) 估计中选率，而非索引选择性<br>第二个指标解决 潜在 <strong>大基数误差 delta_f</strong> 的问题，通过将f_max考虑进入。<br>相比于第一个指标，该指标增加了对每个边潜在更大的 基数误差 风险的考虑，通过对每个操作符的中选率进行考虑</p>
<h2 id="基数-积分健壮性指标"><a href="#基数-积分健壮性指标" class="headerlink" title="基数-积分健壮性指标"></a>基数-积分健壮性指标</h2><p><strong>定义：</strong></p>
<p>“cardinality-integral value ∫f,e for an edge e” (Florian Wolf 等, 2018, p. 1367)</p>
<p>“The robustness value r∫f of the cardinalityintegral robustness metric for a plan P” (Florian Wolf 等, 2018, p. 1367)</p>
<p><strong>总结：</strong></p>
<p>“Cardinality-Integral” (Florian Wolf 等, 2018, p. 1366) 基数-积分？</p>
<p>在<strong>计划健壮性</strong>和<strong>估计代价</strong>之间的权衡<br>认为high 比deep影响更大（对此指标来说）</p>
<h2 id="启发："><a href="#启发：" class="headerlink" title="启发："></a>启发：</h2><p>基数-斜率 健壮性指标：</p>
<p>“reflects the expected difference between estimated and true cost for cardinality estimation errors on all edges” (Florian Wolf 等, 2018, p. 1367) 反映了基数估计误差导致的对成本误差的影响</p>
<p>“implicitly considers the potential propagation of cardinality estimation errors, and takes the potential cardinality estimation errors for different types of operators into account.” (Florian Wolf 等, 2018, p. 1367)</p>
<p>中选率-斜率 健壮性指标：</p>
<p>“considers the risk of a large absolute cardinality error ∆f on all edges” (Florian Wolf 等, 2018, p. 1367)</p>
<p>基数-积分 健壮性指标：</p>
<p>“does not purely focus on plan robustness, but also takes estimated costs into consideration” (Florian Wolf 等, 2018, p. 1367)</p>
<h1 id="5-计划候选者和健壮性计划的选择"><a href="#5-计划候选者和健壮性计划的选择" class="headerlink" title="5 计划候选者和健壮性计划的选择"></a>5 计划候选者和健壮性计划的选择</h1><p>“PLAN CANDIDATES AND SELECTION” (Florian Wolf 等, 2018, p. 1367) 候选计划 和 计划选择</p>
<ol>
<li>使用 k-cheapest plans 枚举出 健壮性计划候选者，同时限制候选者在 基数-斜率 和 选择-斜率两个健壮性指标上接近最优计划（其代价是 估计最优代价的1.2倍）；</li>
<li>通过对每个候选者计算 三个指标之一，来得到每个计划的健壮性值；</li>
<li>选择最健壮的计划来执行。</li>
</ol>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>Paper Reading</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>Paper Reading: TECCD: A Tree Embedding Approach for Code Clone Detection</title>
    <url>/p/42c77a0c.html</url>
    <content><![CDATA[<h1 id="摘要-amp-引言"><a href="#摘要-amp-引言" class="headerlink" title="摘要 &amp; 引言"></a>摘要 &amp; 引言</h1><p>“Abstract” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 145</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=1&annotation=4FEHEQUE">pdf</a>) [<br><strong>摘要——</strong><br><strong>background：</strong>  </p>
<ul>
<li>Code Clone Detection Techniques：自动化的检测源码中重复或者高度相似的代码片段，提高代码的维护性、可读性等。  </li>
<li>过去的技术：基于字符串匹配、语法分析以及机器学习技术。  </li>
</ul>
<p><strong>what</strong>：  </p>
<ul>
<li>解决代码克隆检测  </li>
</ul>
<p><strong>how</strong>：  </p>
<ul>
<li>引入tree embedding技术：<br>  1. 获得AST每个intermediate node的node vector<br>  2. 从所相关的node vectors集合组合出tree vector<br>  3. 计算出tree vector之间的欧式几何距离，作为code clones的衡量标准  </li>
</ul>
<p><strong>novelty</strong>：  </p>
<ul>
<li>首次引入tree embedding到代码克隆检测中<br>]</li>
</ul>
<h2 id="embedding"><a href="#embedding" class="headerlink" title="embedding"></a>embedding</h2><h3 id="term-embedding"><a href="#term-embedding" class="headerlink" title="term-embedding"></a>term-embedding</h3><p>“term-embedding” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 145</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=1&annotation=WKIBFI2P">pdf</a>) 「<br><strong>embedding</strong>:  </p>
<ul>
<li>将一组离散的文本特征（例如单词或字符）映射到一个实数域上的连续向量的过程。这些向量通常具有固定的长度，并且包含了与原始文本特征相关的语义信息  </li>
<li>embedding技术是基于深度学习的方法，它可以从大规模数据集中学习到文本特征之间的关联性，并将此信息编码为低维向量。通过使用embedding技术，我们可以有效地解决机器学习中高维稀疏数据的问题，减少特征工程的复杂度，并提高模型的准确率和效率。  </li>
</ul>
<p><strong>term-embedding：</strong>  </p>
<ul>
<li>将源代码语言中的单词、标识符和符号等转换为低维特征向量。  </li>
<li>这些特征向量可以在机器学习模型中使用，从而对代码进行分类或聚类等操作<br>」</li>
</ul>
<h3 id="tree-embedding"><a href="#tree-embedding" class="headerlink" title="tree-embedding"></a>tree-embedding</h3><p>“tree embedding technique” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 145</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=1&annotation=NK5S2J7A">pdf</a>) 「<br><strong>tree embedding</strong>：  </p>
<ul>
<li>将代码抽象为树结构，并将其嵌入到低维空间中的技术。  </li>
<li>在本文中，作者使用了AST（抽象语法树）来表示源代码，并通过tree embedding将AST映射到低维空间中。<br> - 这种表示方法可以保留代码中的结构信息，例如语句之间的依赖关系、变量之间的关系等<br>」</li>
</ul>
<h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h1><h2 id="Node2vec"><a href="#Node2vec" class="headerlink" title="Node2vec"></a>Node2vec</h2><p>“Node2vec” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 147</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=3&annotation=UHY77AZM">pdf</a>) 「<br>Node2Vec使用一个<strong>二阶段</strong>的方法来生成node vector：<br>1. <strong>Random Walk</strong>：<br>  - 在第一阶段，Node2Vec从每个节点开始执行多次随机游走，得到一系列节点序列。<br>  - 通过控制参数p和q，Node2Vec可以根据需要调整游走的策略，并捕捉不同节点之间的语义相似性和结构信息。<br>2. <strong>Skip-Gram模型</strong>：<br>  - 在第二阶段，Node2Vec使用Skip-Gram模型来训练语言模型，并生成每个节点的向量表示。<br>  - 具体地，对于每个节点，Node2Vec使用其相邻节点的向量表示作为输入，并尝试预测当前节点出现在相邻节点序列中的概率。<br>  - 通过优化目标函数，Node2Vec可以学习每个节点的向量表示，使得相似的节点在向量空间中更接近。<br>」</p>
<h1 id="3-方法"><a href="#3-方法" class="headerlink" title="3 方法"></a>3 方法</h1><h2 id="A-Pre-processing"><a href="#A-Pre-processing" class="headerlink" title="A. Pre-processing"></a>A. Pre-processing</h2><p>“OUR APPROACH” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 147</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=3&annotation=ZXEZRPJ9">pdf</a>) [<br><strong>TECCD的基本idea：</strong>  </p>
<ul>
<li>基于code structure信息来进行detect code clones<br>  - 使用AST代表源码的结构信息<br>  - 只进行method级别的检测，因此只捕获method级别的AST  </li>
<li>基于DL技术，将AST转换为Vector  </li>
<li>比较Vector之间的欧式距离  </li>
</ul>
<p><strong>基本步骤：</strong>  </p>
<ul>
<li><strong>pre- processing</strong>：<br>  - 目标：根据训练语料库中的源码，生成node-vecotr dictionary  </li>
<li><strong>Step1</strong>:<br>  - 目标：获得目标源码中所有method对应的AST，并获得AST node集合，去除LeafNode和StopNode  </li>
<li><strong>Step2</strong>:<br>  - 目标：通过使用sentence embedding转换为vectors  </li>
<li><strong>Step3</strong>:<br>  - 目标：计算并比较AST vectors之间的欧式距离，据此进行代码克隆检测<br>]</li>
</ul>
<h3 id="获得context信息"><a href="#获得context信息" class="headerlink" title="获得context信息"></a>获得context信息</h3><p>“Obtain context information” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 147</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=3&annotation=8W6PAN5B">pdf</a>) 「<br>为了能够<strong>同时捕获AST中的context和structe信息</strong>：  </p>
<ul>
<li>需要结合BFS和DFS：即randim walk算法<br>  - BFS：捕获复杂statement或expression中的structure<br>  - DFS：捕获一些基于简单文法的derivation  </li>
<li>为了将random walk算法应用于tree，需要修改AST，在brother nodes之间加入directed edges，方便BFS-like traverse<br>」</li>
</ul>
<h3 id="Random-Walk"><a href="#Random-Walk" class="headerlink" title="Random Walk"></a>Random Walk</h3><p>“Random Walk” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 148</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=4&annotation=6BSS6G9V">pdf</a>) 「<br><strong>Random Walk算法</strong>：  </p>
<ul>
<li>给定一个概率分布函数P(ci=x | ci-1=v)，给定当前节点v，计算下一个random walk为(v, x)的概率  </li>
<li>(t, v)为上次进行random walk的边  </li>
<li>P函数取决于(t, x)的关系<br>  - dtx=1表示t和x为父子<br>  - 否则，为brother  </li>
<li>=1代表BFS<br>」</li>
</ul>
<h3 id="Skip-Gram模型"><a href="#Skip-Gram模型" class="headerlink" title="Skip-Gram模型"></a>Skip-Gram模型</h3><p>“training corpus projects to train a Skip-gram model and obtain the node-vector dictionary.” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 149</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=5&annotation=R3PZXMQR">pdf</a>) 「<br><strong>训练Skip-Gram模型：</strong>  </p>
<ul>
<li>通过Random Walk算法获得所有AST得Sequences后  </li>
<li>将Node Sequences作为Skip-Gram模型的输入，并获得node-vector dictionary<br>」</li>
</ul>
<h3 id="Result-of-Context-Information-Capturing"><a href="#Result-of-Context-Information-Capturing" class="headerlink" title="Result of Context Information Capturing"></a>Result of Context Information Capturing</h3><p>“Results of Context Information Capturing” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 149</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=5&annotation=L495DK92">pdf</a>) 「<br>最终得到的<strong>Node-Vector Dictionary</strong>，代表的含义：  </p>
<ul>
<li>有着相似context和structure的AST Node，被映射为有着更小distance的vectors<br>」</li>
</ul>
<h3 id="Stop-Nodes"><a href="#Stop-Nodes" class="headerlink" title="Stop Nodes"></a>Stop Nodes</h3><p>“Stop Nodes” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 150</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=6&annotation=MPLB67C6">pdf</a>) 「<br>Stop Nodes：  </p>
<ul>
<li>对于区分不同树结构毫无贡献的冗余节点<br>」</li>
</ul>
<h2 id="B-Step1-Generate-Tree-Node-Set"><a href="#B-Step1-Generate-Tree-Node-Set" class="headerlink" title="B. Step1: Generate Tree-Node Set"></a>B. Step1: Generate Tree-Node Set</h2><p>“Step 1: Generate Tree-Node Set” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 150</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=6&annotation=QC69NZDW">pdf</a>) 「<br><strong>Step1:</strong>  </p>
<ul>
<li>目标：生成Tree-Node集合  </li>
</ul>
<p><strong>具体实现：</strong>  </p>
<ul>
<li>将目标源码作为ANTLR的输入，获得每个method的AST  </li>
<li>对AST进行DFS遍历，获得每个AST的Tree-Node集合<br>」</li>
</ul>
<h2 id="C-Step2-Generate-Tree-Vector"><a href="#C-Step2-Generate-Tree-Vector" class="headerlink" title="C. Step2: Generate Tree Vector"></a>C. Step2: Generate Tree Vector</h2><p>“Step 2: Generate Tree Vector” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 150</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=6&annotation=YKLM542J">pdf</a>) 「<br><strong>Step2:</strong>  </p>
<ul>
<li>目标：生成AST Vector  </li>
</ul>
<p><strong>具体实现：</strong><br><strong>-</strong> 采用 sentence2vec算法，基于Node-Vector Dictionary，将AST转换为AST Vector<br>」</p>
<h2 id="D-Step3-Code-Clone-Detection"><a href="#D-Step3-Code-Clone-Detection" class="headerlink" title="D. Step3: Code Clone Detection"></a>D. Step3: Code Clone Detection</h2><p>“Step 3: Code Clone Detection” (<a href="zotero://select/library/items/9LQ2XLYP">Gao 等, 2019, p. 150</a>) (<a href="zotero://open-pdf/library/items/4RB7Y8FW?page=6&annotation=XNRT8QBQ">pdf</a>) 「<br><strong>Step3：</strong>  </p>
<ul>
<li>目标：进行Code Clone Dection  </li>
</ul>
<p><strong>原理：</strong><br>  - sentence2vec还是node2vec捕获了structure信息<br>  - Skip-Gram考虑了context信息<br><strong>具体实现：</strong>  </p>
<ul>
<li>基于上述原理/属性，可以基于vector之间的欧式距离，检测代码克隆  </li>
<li>对于Type1和2，AST Vector完全一致；对于Type3，其代码结构不一定相同  </li>
<li>设置欧式距离阈值，作为判断时Type3代码克隆的判断标准<br>」</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>Paper Reading</category>
      </categories>
      <tags>
        <tag>Code Clone Detection</tag>
        <tag>AST</tag>
        <tag>Machine Learning</tag>
        <tag>Natural Language Processing</tag>
      </tags>
  </entry>
  <entry>
    <title>Preparation-For-MIT6.824</title>
    <url>/p/c9d8503f.html</url>
    <content><![CDATA[<p><code>refs:</code></p>
<ul>
<li><h2 id="如何的才能更好地学习-MIT6-824-分布式系统课程？-谭新宇的回答-知乎"><a href="#如何的才能更好地学习-MIT6-824-分布式系统课程？-谭新宇的回答-知乎" class="headerlink" title="如何的才能更好地学习 MIT6.824 分布式系统课程？ - 谭新宇的回答 - 知乎"></a><a href="https://www.zhihu.com/question/29597104/answer/1971438797">如何的才能更好地学习 MIT6.824 分布式系统课程？ - 谭新宇的回答 - 知乎</a></h2></li>
<li><h2 id="如何的才能更好地学习-MIT6-824-分布式系统课程？-Ed-Huang的回答-知乎"><a href="#如何的才能更好地学习-MIT6-824-分布式系统课程？-Ed-Huang的回答-知乎" class="headerlink" title=" 如何的才能更好地学习 MIT6.824 分布式系统课程？ - Ed Huang的回答 - 知乎"></a><a href="https://www.zhihu.com/question/29597104/answer/128443409"> 如何的才能更好地学习 MIT6.824 分布式系统课程？ - Ed Huang的回答 - 知乎</a></h2></li>
<li><h2 id="如何的才能更好地学习-MIT6-824-分布式系统课程？-拓跋阿秀的回答-知乎"><a href="#如何的才能更好地学习-MIT6-824-分布式系统课程？-拓跋阿秀的回答-知乎" class="headerlink" title="如何的才能更好地学习 MIT6.824 分布式系统课程？ - 拓跋阿秀的回答 - 知乎"></a><a href="https://www.zhihu.com/question/29597104/answer/2311413739">如何的才能更好地学习 MIT6.824 分布式系统课程？ - 拓跋阿秀的回答 - 知乎</a></h2></li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>MIT6.824</category>
      </categories>
      <tags>
        <tag>Database System</tag>
        <tag>Distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL</title>
    <url>/p/4d712855.html</url>
    <content><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>[toc]</p>
<ul>
<li><p>什么是 <code>SQL </code></p>
<ul>
<li>访问和处理 **关系数据库 **的 <strong>计算机标准语言</strong></li>
</ul>
</li>
<li><p>编写程序时，只要涉及 <strong>操作关系数据库</strong>，就必须通过 SQL 完成</p>
</li>
<li><p><code>NoSQL</code>: 非SQL的数据库，都不是关系数据库</p>
</li>
</ul>
<h1 id="1-关系数据库概述"><a href="#1-关系数据库概述" class="headerlink" title="1 关系数据库概述"></a>1 关系数据库概述</h1><ul>
<li><p>为什么需要数据库</p>
<ul>
<li>应用程序 需要保存用户的数据</li>
<li>随着应用程序功能越来越复杂，数据量也越来越大<ul>
<li>读写文件并解析出数据，需要大量重复代码</li>
<li>从大量数据中 快速查询出 指定数据，需要复杂的逻辑</li>
</ul>
</li>
<li>每个应用程序<strong>访问数据的接口</strong>不同，数据难以复用</li>
</ul>
</li>
<li><p><strong>数据库</strong>：专门<strong>管理数据</strong>的软件</p>
<ul>
<li>应用程序通过数据库软件提供的接口来读写数据</li>
<li>数据库软件来管理数据如何存储进文件</li>
<li>```ascii<br> ──────────────┐<br>│ application  │<br>└──────────────┘<pre><code>   ▲│
   ││
</code></pre>
   read││write<pre><code>   ││
   │▼
</code></pre>
┌──────────────┐<br>│   database   │<br>└──────────────┘<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## 数据模型</span><br><span class="line"></span><br><span class="line">* 数据库按照 **数据结构** 来**组织、存储和管理数据**，三种模型</span><br><span class="line"></span><br><span class="line">  * 层次模型</span><br><span class="line">  * 网状模型</span><br><span class="line">  * 关系模型</span><br><span class="line">* **层次模型：**上下级的层次关系 来组织数据</span><br><span class="line"></span><br><span class="line">  * ```ascii</span><br><span class="line">        		┌─────┐</span><br><span class="line">                │     │</span><br><span class="line">                └─────┘</span><br><span class="line">                   │</span><br><span class="line">           ┌───────┴───────┐</span><br><span class="line">           │               │</span><br><span class="line">        ┌─────┐         ┌─────┐</span><br><span class="line">        │     │         │     │</span><br><span class="line">        └─────┘         └─────┘</span><br><span class="line">           │               │</span><br><span class="line">       ┌───┴───┐       ┌───┴───┐</span><br><span class="line">       │       │       │       │</span><br><span class="line">    ┌─────┐ ┌─────┐ ┌─────┐ ┌─────┐</span><br><span class="line">    │     │ │     │ │     │ │     │</span><br><span class="line">    └─────┘ └─────┘ └─────┘ └─────┘</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>网状模型：</strong>把每个数据节点和其他很多节点都连接起来</p>
<ul>
<li>```ascii<pre><code> ┌─────┐      ┌─────┐
</code></pre>
   ┌─│     │──────│     │──┐<br>   │ └─────┘      └─────┘  │<br>   │    │            │     │<br>   │    └──────┬─────┘     │<br>   │           │           │<br>┌─────┐     ┌─────┐     ┌─────┐<br>│     │─────│     │─────│     │<br>└─────┘     └─────┘     └─────┘<br>   │           │           │<br>   │     ┌─────┴─────┐     │<br>   │     │           │     │<br>   │  ┌─────┐     ┌─────┐  │<br>   └──│     │─────│     │──┘<pre><code>  └─────┘     └─────┘
</code></pre>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* **关系模型：**将数据当作二维表格，任何数据通过 行号+列号 唯一确定</span><br><span class="line"></span><br><span class="line">  * ```ascii</span><br><span class="line">    ┌─────┬─────┬─────┬─────┬─────┐</span><br><span class="line">    │     │     │     │     │     │</span><br><span class="line">    ├─────┼─────┼─────┼─────┼─────┤</span><br><span class="line">    │     │     │     │     │     │</span><br><span class="line">    ├─────┼─────┼─────┼─────┼─────┤</span><br><span class="line">    │     │     │     │     │     │</span><br><span class="line">    ├─────┼─────┼─────┼─────┼─────┤</span><br><span class="line">    │     │     │     │     │     │</span><br><span class="line">    └─────┴─────┴─────┴─────┴─────┘</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>关系模型获得了绝对市场份额</p>
<ul>
<li>理解和使用起来最简单</li>
<li>关系数据库 的 关系模型：基于数学理论建立</li>
</ul>
</li>
<li><p>简而言之，通过给定一个班级名称，可以查到一条班级记录，根据班级ID，又可以查到多条学生记录，这样，二维表之间就通过ID映射建立了 <strong>“一对多”</strong> 关系。</p>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li><p>一个<strong>关系表：</strong></p>
<ul>
<li><p>须定义 <strong>每一列的名称</strong>和<strong>每一列的数据类型</strong></p>
</li>
<li><p>关系数据库支持的标准数据类型：数值、字符串、时间等：</p>
<ul>
<li><table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">类型</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">INT</td>
<td align="left">整型</td>
<td align="left">4字节整数类型，范围约+/-21亿</td>
</tr>
<tr>
<td align="left">BIGINT</td>
<td align="left">长整型</td>
<td align="left">8字节整数类型，范围约+/-922亿亿</td>
</tr>
<tr>
<td align="left">REAL</td>
<td align="left">浮点型</td>
<td align="left">4字节浮点数，范围约+/-1038</td>
</tr>
<tr>
<td align="left">DOUBLE</td>
<td align="left">浮点型</td>
<td align="left">8字节浮点数，范围约+/-10308</td>
</tr>
<tr>
<td align="left">DECIMAL(M,N)</td>
<td align="left">高精度小数</td>
<td align="left">由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算</td>
</tr>
<tr>
<td align="left">CHAR(N)</td>
<td align="left">定长字符串</td>
<td align="left">存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串</td>
</tr>
<tr>
<td align="left">VARCHAR(N)</td>
<td align="left">变长字符串</td>
<td align="left">存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串</td>
</tr>
<tr>
<td align="left">BOOLEAN</td>
<td align="left">布尔类型</td>
<td align="left">存储True或者False</td>
</tr>
<tr>
<td align="left">DATE</td>
<td align="left">日期类型</td>
<td align="left">存储日期，例如，2018-06-22</td>
</tr>
<tr>
<td align="left">TIME</td>
<td align="left">时间类型</td>
<td align="left">存储时间，例如，12:20:59</td>
</tr>
<tr>
<td align="left">DATETIME</td>
<td align="left">日期和时间类型</td>
<td align="left">存储日期+时间，例如，2018-06-22 12:20:59</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
</li>
<li><p>许多数据类型有别名：</p>
<ul>
<li>例如 <code>REAL</code> : <code>FLOAT(24)</code></li>
</ul>
</li>
<li><p>需要根据业务规则 选择合适的类型：</p>
<ul>
<li><code>BIGINT</code> : 满足整数存储的需求</li>
<li><code>VARCHAR(N)</code> ：满足字符串存储的需求</li>
</ul>
</li>
</ul>
<h2 id="主流关系数据库"><a href="#主流关系数据库" class="headerlink" title="主流关系数据库"></a>主流关系数据库</h2><ul>
<li><strong>主流的关系数据库</strong>：<ul>
<li>商用数据库：<ul>
<li><code>Oracle</code>, <code>SQL Server</code>, <code>DB2</code></li>
</ul>
</li>
<li>开源数据库：<ul>
<li><code>MySQL</code>, <code>PostgreSQL</code></li>
</ul>
</li>
<li>桌面数据库：<ul>
<li><code>Access</code> ，适合桌面应用程序使用</li>
</ul>
</li>
<li>嵌入式数据库：<ul>
<li><code>Sqlite</code>, 适合手机应用 和桌面程序</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h2><ul>
<li><p><strong>结构化查询语言</strong> ：用来访问和操作 <strong>数据库系统</strong></p>
<ul>
<li>可以 <strong>查询、添加、更新、和删除数据库中的数据</strong></li>
<li>可以 <strong>对数据库进行管理和维护操作</strong></li>
</ul>
</li>
<li><p>不同的数据库 都支持 SQL</p>
</li>
<li><p>不同的数据库 对 标准的SQL支持 不太一致</p>
<ul>
<li>大部分数据库在标准的SQL做了<strong>扩展</strong></li>
</ul>
</li>
<li><p>只使用ANSI 组织定义的标准SQL，所有数据库都可以支持</p>
</li>
<li><p>SQL 定义的对 数据库 的操作：</p>
<ul>
<li><code>DDL</code> : <strong>Data Definition Language</strong><ul>
<li>用户自定义数据：创建表、删除表、修改表结构等操作</li>
<li>DDL 通常由数据库管理员执行</li>
</ul>
</li>
<li><code>DML</code> : <strong>Data Manipulation Language</strong><ul>
<li>用户添加、删除、更新数据的能力</li>
<li>应用程序对数据库的日常操作</li>
</ul>
</li>
<li><code>DQL</code> : <strong>Data Query Language</strong><ul>
<li>用户查询数据，最频繁</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="语法特点"><a href="#语法特点" class="headerlink" title="语法特点"></a>语法特点</h2><ul>
<li>关键字不区分大小写</li>
<li>对于表明和列名：有的数据库区分大小写</li>
<li>同一个数据库：不同操作系统大小写不同</li>
<li>约定：SQL 关键字总是大写，表名和列名均使用小写</li>
</ul>
<h1 id="2-安装-MySQL"><a href="#2-安装-MySQL" class="headerlink" title="2 安装 MySQL"></a>2 安装 MySQL</h1><ul>
<li><p>MySQL <strong>应用最广泛的 开源关系数据库</strong></p>
</li>
<li><p>与其他关系数据库不同：MySQL 本身实际上是一个<strong>SQL 接口</strong>，内部包含<strong>多种数据库引擎</strong></p>
<ul>
<li><code>InnoDB</code> :  <strong>支持事务的数据库引擎</strong></li>
<li><code>MyISAM</code> : MySQL 早期集成的默认数据库引擎，<strong>不支持事务</strong></li>
</ul>
</li>
<li><p>切换 <strong>MySQL 引擎</strong>不影响自己写的应用程序使用 <strong>MySQL 接口</strong></p>
</li>
<li><p>使用 MySQL 时，不同的表可以使用不同的<strong>数据库引擎</strong></p>
<ul>
<li>总是选择 <code>InnoDB</code> 就好</li>
</ul>
</li>
<li><p>MySQL 一开始便是<strong>开源</strong>的，基于此，衍生出各种版本：</p>
<ul>
<li><code>MariaDB</code><ul>
<li>MySQL 创始人创建的开源分支版本，使用 <code>XtraDB</code> 引擎</li>
</ul>
</li>
<li><code>Aurora</code><ul>
<li>由Amazon改进的一个MySQL版本，专门提供给在 <code>AWS</code>托管 <code>MySQL</code>用户，号称5倍的性能提升。</li>
</ul>
</li>
<li><code>PolarDB</code><ul>
<li>由 <code>Alibaba</code>改进的一个MySQL版本，专门提供给在<a href="https://promotion.aliyun.com/ntms/yunparter/invite.html?userCode=cz36baxa">阿里云</a>托管的MySQL用户，号称6倍的性能提升。</li>
</ul>
</li>
</ul>
</li>
<li><p>MySQL 官方版本分出的版本：功能依次递增，增加的主要功能：监控和集群等管理功能，对基本的SQL功能一样</p>
<ul>
<li><code>Community Edition</code> : 社区开源版本，免费</li>
<li><code>Standard Edition</code> : 标准版</li>
<li><code>Enterprise Edition</code> : 企业版</li>
<li><code>Cluster Carrier Grade Edition</code> : 集群版</li>
</ul>
</li>
<li><p>可以安装免费的 <code>Community Edition</code> ，进行学习、开发、测试</p>
<ul>
<li>部署的时候，选择高级版本，或者云服务商提供的兼容版本</li>
</ul>
</li>
</ul>
<h2 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h2><ul>
<li>安装过程中，MySQL 自动创建一个 <code>root</code> 用户，并提示输入 <code>root</code>口令</li>
<li>账号：<code>ZiHaO</code><ul>
<li>密码 : <code>qazedc12 </code></li>
</ul>
</li>
</ul>
<h2 id="运行-MySQL"><a href="#运行-MySQL" class="headerlink" title="运行 MySQL"></a>运行 MySQL</h2><ul>
<li><p>MySQL 安装后自动在后台运行</p>
</li>
<li><p>下载安装后，需要配置环境变量</p>
<ul>
<li>通过 <code>任务管理器</code>找到 <code>mysql.exe</code> 查看属性，找到 <code>bin</code>目录</li>
<li>将路径加入环境变量</li>
</ul>
</li>
<li><p>通过命令行程序连接 MySQL服务器，命令提示符下输入 <code>mysql -u root -p</code>, 输入口令，</p>
<ul>
<li>若连接到 MySQL 服务器，提示符变成 <code>mysql&gt;</code></li>
</ul>
</li>
<li><p>输入 <code>exit</code> 退出 MySQL 命令行</p>
</li>
<li><p>MySQL 服务器依然在后台运行</p>
</li>
</ul>
<h1 id="3-关系模型"><a href="#3-关系模型" class="headerlink" title="3 关系模型"></a>3 关系模型</h1><ul>
<li><p>关系数据库 建立在关系模型上</p>
</li>
<li><p>关系模型本质：若干个存储数据的二维表</p>
<ul>
<li>表的每一行：<code>记录Record</code>, 一个逻辑意义上的数据</li>
<li>表的每一列：<code>字段Column</code>，同一个表的每一行<strong>记录</strong>，拥有相同的若干<strong>字段</strong></li>
</ul>
</li>
<li><p><strong>字段</strong>：定义数据类型（整型，浮点型，字符串，日期等），以及是否允许 <code>NULL</code></p>
<ul>
<li><code>NULL</code> 表示字段数据<strong>不存在</strong>，为空，而非为数据类型的零值</li>
</ul>
</li>
<li><p>一般情况，应避免允许数据为 <code>NULL</code> , 可以简化查询条件，加快查询速度，有利于应用程序读取数据后无需判断是否为 <code>NULL</code></p>
</li>
<li><p>和Excel表不同：关系数据库的表和表之间 需要建立 <code>一对多</code>，<code>多对一</code>和 <code>一对一</code>的关系</p>
<ul>
<li>才能按照 <strong>应用程序的逻辑</strong> 来组织和存储数据</li>
</ul>
</li>
<li><p><strong>一对多：</strong></p>
<ul>
<li>一个表中的一个记录，对应着另一个表中多个记录</li>
</ul>
</li>
<li><p><strong>多对一：</strong></p>
<ul>
<li>一个表中的多个记录，对应着另一个表中一个记录</li>
</ul>
</li>
<li><p><strong>一对一：</strong></p>
<ul>
<li>一个表中的一个记录，对应着另一个表中一个记录</li>
</ul>
</li>
<li><p><strong>关系数据库</strong>中，关系 是 通过 <code>主键</code> 和 <code>外键</code> 来维护</p>
</li>
</ul>
<h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><ul>
<li><p><strong>关系数据库中</strong>：</p>
<ul>
<li>一张表的每一行数据：<strong>一条记录</strong></li>
<li>一条记录<strong>由多个字段组成</strong></li>
<li>同一个表中每一条记录都有相同的字段定义</li>
</ul>
</li>
<li><p><strong>关系数据库中</strong>，很重要的约束：任意两条记录不能重复</p>
<ul>
<li>不是指 两条记录不完全相同</li>
<li>指 能通过某个字段，<strong>唯一区分出不同的记录</strong>，该字段为 <strong>主键</strong></li>
<li>因此，同一张表中 任意两条记录的 主键字段 的值都不相同</li>
</ul>
</li>
<li><p><strong>对主键的要求</strong>：记录一旦插入表中，主键最好不要修改，唯一定位记录的</p>
</li>
<li><p><strong>选取业务的基本原则：</strong>不使用任何<strong>业务相关</strong>的字段作为主键</p>
<ul>
<li>身份证号、手机号、邮箱地址等</li>
</ul>
</li>
<li><p>一般将主键字段命名为 <code>id</code>。常见的 <code>id</code>字段的类型</p>
<ul>
<li>自增整数类型：数据库 会在插入数据时 自动 为每一条记录分配一个自增整数，不需要担心主键重复，不用预先生成主键</li>
<li>全局唯一 <code>GUID</code> 类型：使用一种 全局唯一 的字符串作为主键，``<ul>
<li><code>GUID</code> 算法通过 网卡MAC地址、时间戳、随机数 保证任意计算机在任意时间生成的字符串不同，大部分编程语言都内置了 <code>GUID</code>算法，预算出主键</li>
</ul>
</li>
</ul>
</li>
<li><p>一般，通常 自增类型 的主键就能满足需求</p>
</li>
<li><p>注意： 如果使用 <code>INT</code>自增类型，那么当一张表的记录数超过2147483647（约21亿）时，会达到上限而出错。使用 <code>BIGINT</code>自增类型则可以最多约922亿亿条记录。</p>
</li>
</ul>
<h3 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h3><ul>
<li><p><strong>联合主键</strong>：关系数据库，允许通过多个字段 唯一标识记录，即多个字段都设置为主键</p>
<ul>
<li>允许一列有重复，只要不是所有主键列都重复即可</li>
</ul>
</li>
<li><p>联合主键要求 任意两条记录 的主键组合都不相同</p>
</li>
<li><p>尽量不使用 联合主键，给关系表带来了 <strong>复杂度的上升</strong></p>
</li>
</ul>
<h2 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h2><ul>
<li><p><strong>主键</strong> 唯一标识记录时，可以在表中确定任意记录</p>
</li>
<li><p>确定 <code>student</code> 表的一条记录，属于哪个班级</p>
<ul>
<li>在 <code>student</code> 表中，添加字段 <code>class_id</code> ，使得其与 <code>class</code> 表的某条记录对应</li>
</ul>
</li>
<li><p><strong>外键：</strong>在一张表中，通过 <code>xx_id</code>字段，将<strong>该表数据 与 另一张表关联起来的字段</strong></p>
</li>
<li><p><strong>外键</strong> 通过定义 <strong>外键约束</strong> 实现</p>
<ul>
<li>```mysql<br>ALTER TABLE students<br>ADD CONSTRAINT fk_class_id<br>FOREIGN KEY (class_id)<br>REFERENCES classes (id);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  * `ADD CONSTRAINT fk_class_id`：**外键约束名称**，可以任意</span><br><span class="line">  * `FOREIGN KEY (class_id)` : 指定 `class_id` 为外键</span><br><span class="line">  * `REFERENCES classes (id)`: 指定这个外键 将关联到 `classes` 表的 `id` 列（即 `classes` 的主键</span><br><span class="line">* 通过**定义 外键约束**，**关系数据库可以保证 无法穿插如无效的数据**：</span><br><span class="line"></span><br><span class="line">  * 即外键所绑定的另一张表的主键数据，约束着外键的数据范围</span><br><span class="line">* **外键约束** 会降低数据库的性能，为了追求速度，并不设置外键约束，仅依靠应用程序自身来保证 逻辑的正确性</span><br><span class="line"></span><br><span class="line">  * 这种情况下，外键仅是一个普通的列</span><br><span class="line">* 要**删除一个 外键约束**，通过 `ALTER TABLE`</span><br><span class="line"></span><br><span class="line">  * ```mysql</span><br><span class="line">    ALTER TABLE students</span><br><span class="line">    DROP FOREIGN KEY fk_class_id;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>注意：删除 外键约束 并没有删除外键这一列</p>
<ul>
<li>删除列通过：<code>DROP COLUMN ,..</code> 实现</li>
</ul>
</li>
</ul>
<h2 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h2><ul>
<li><p>通过一个表的 外键 关联到另一个表，可以定义出 一对多 关系</p>
</li>
<li><p>定义<strong>多对多关系</strong>：</p>
<ul>
<li>通过 两个一对多关系 实现：即通过<strong>一个中间表</strong>，<strong>关联两个一对多关系</strong>，就形成了多对多关系</li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li><code>teachers</code>表：| id | name   |<br>| :- | :—– |<br>| 1  | 张老师 |<br>| 2  | 王老师 |<br>| 3  | 李老师 |<br>| 4  | 赵老师 |</li>
<li><code>classes</code>表：| id | name |<br>| :- | :— |<br>| 1  | 一班 |<br>| 2  | 二班 |</li>
<li>中间表 <code>teacher_class</code>关联两个一对多关系：| id | teacher_id | class_id |<br>| :- | :——— | :——- |<br>| 1  | 1          | 1        |<br>| 2  | 1          | 2        |<br>| 3  | 2          | 1        |<br>| 4  | 2          | 2        |<br>| 5  | 3          | 1        |<br>| 6  | 4          | 2        |</li>
</ul>
</li>
<li><p>通过 <code>teacher_class</code> 表，可知 <code>teachers</code> 到 <code>classes</code> 的关系 和 <code>classes</code> 到 <code>teachers</code> 的关系</p>
</li>
</ul>
<h2 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h2><ul>
<li><strong>一对一关系</strong>：一个表的记录 对应到另一个表 的唯一一个记录</li>
<li>既然是 一对一关系 为什么不直接合并为同一个表<ul>
<li>如果业务允许，可以将两个表合并<ul>
<li>但若某些数据是缺失，就不存在对应的记录</li>
<li>只能说 子集表 一一对应 另一个表</li>
</ul>
</li>
<li>将大表 <strong>拆分成</strong>两个 一对一 的表：把经常读取和不经常读取的字段分开，<strong>获得高性能</strong></li>
</ul>
</li>
</ul>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul>
<li><p>在 <strong>关系数据库</strong> 中，若有上万上亿条记录，需要使用<strong>索引</strong>，才能获得高速度</p>
</li>
<li><p>索引：关系数据库 中，对某一列或多个列的值 <strong>进行预排序的 数据结构</strong></p>
<ul>
<li>使用索引，可以让数据库系统不必扫描整个表，而是<strong>直接定位到符合条件的记录</strong></li>
</ul>
</li>
<li><p>示例：</p>
<ul>
<li><code>students</code> 表</li>
<li><table>
<thead>
<tr>
<th align="left">id</th>
<th align="left">class_id</th>
<th align="left">name</th>
<th align="left">gender</th>
<th align="left">score</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">小明</td>
<td align="left">M</td>
<td align="left">90</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">1</td>
<td align="left">小红</td>
<td align="left">F</td>
<td align="left">95</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">1</td>
<td align="left">小军</td>
<td align="left">M</td>
<td align="left">88</td>
</tr>
</tbody></table>
</li>
<li>更具 <code>score</code>列进行查询，对 <code>score</code>列创建索引：</li>
<li>```mysql<br>ALTER TABLE students<br>ADD INDEX idx_score (score);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 使用 `ADD INDEX idx_score (score)` : 创建一个名称为 `idx_score` ，使用列 `score` 的索引</span><br><span class="line"></span><br><span class="line">  * 索引名称任意，若索引有很多列，在括号里 依次写上：</span><br><span class="line"></span><br><span class="line">    * ```</span><br><span class="line">      ALTER TABLE students</span><br><span class="line">      ADD INDEX idx_name_score (name, score);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>索引的效率</strong> 取决于 索引列的表 是否散列，即 该列的值互不相同的程度越高，索引效率越高</p>
</li>
<li><p>可以对一张表 创建多个索引</p>
<ul>
<li>索引的优点：提高查询效率</li>
<li>索引的缺点：插入、更新、删除记录时，同时修改索引<ul>
<li>因此，索引越多，插入、删除、更新记录的速度越慢</li>
</ul>
</li>
</ul>
</li>
<li><p>对于主键，<strong>关系数据库</strong> 会自动对其创建<strong>主键索引</strong></p>
<ul>
<li>使用 主键索引的效率最高，因为主键会保证 绝对唯一</li>
</ul>
</li>
</ul>
<h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><ul>
<li><p>设计关系数据库的表时，看上去唯一的列，通常具有业务含义，不能作为主键</p>
<ul>
<li>身份证号</li>
</ul>
</li>
<li><p>这些列根据业务要求，又<strong>具有唯一性约束</strong>：任意两条记录的该字段不能相同</p>
<ul>
<li>此时，可以为该列添加一个唯一索引</li>
</ul>
</li>
<li><p>例如，假设 <code>students</code> 表的 <code>name</code> 不能重复</p>
<ul>
<li>```mysql<br>ALTER TABLE students<br>ADD UNIQUE INDEX uni_name (name);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 通过关键字 `UNIQUE` 添加了唯一索引</span><br><span class="line">* 也可以只对某一列添加一个 **唯一约束**，而不创建 **唯一索引**：</span><br><span class="line"></span><br><span class="line">  * ```mysql</span><br><span class="line">    ALTER TABLE students</span><br><span class="line">    ADD CONSTRAINT uni_name UNIQUE (name);</span><br></pre></td></tr></table></figure></li>
<li>此时，<code>name</code> 列没有索引，但具有唯一性保证</li>
</ul>
</li>
<li><p>无论是否创建索引，对于用户和应用程序来说，使用关系数据库不会有任何区别</p>
<ul>
<li>即，当我们在数据库中查询时，如果有相应的索引可用，<strong>数据库系统就会自动使用索引来提高查询效率</strong>，如果没有索引，查询也能正常执行，只是速度会变慢。</li>
<li>因此，索引可以在使用数据库的过程中逐步优化</li>
</ul>
</li>
</ul>
<h1 id="4-在线-SQL"><a href="#4-在线-SQL" class="headerlink" title="4 在线 SQL"></a>4 在线 SQL</h1><ul>
<li>便于在线练习，提供的在线运行 SQL 的功能</li>
<li>在浏览器页面 运行 的一个 <code>JS</code> 编写的内存型SQL数据库 <code>AlaSQL</code><ul>
<li>不必运行 MySQL 等实际的数据库软件，即可在线编写并执行 SQL 语句</li>
</ul>
</li>
</ul>
<h1 id="5-查询数据"><a href="#5-查询数据" class="headerlink" title="5 查询数据"></a>5 查询数据</h1><ul>
<li>对数据库 最常用的操作</li>
</ul>
<h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><ul>
<li><p>事先准备 <code>students</code> 和 <code>classes</code> 表</p>
<ul>
<li><code>students</code>表存储了学生信息：| id | class_id | name | gender | score |<br>| :- | :——- | :— | :—– | :—- |<br>| 1  | 1        | 小明 | M      | 90    |<br>| 2  | 1        | 小红 | F      | 95    |<br>| 3  | 1        | 小军 | M      | 88    |<br>| 4  | 1        | 小米 | F      | 73    |<br>| 5  | 2        | 小白 | F      | 81    |<br>| 6  | 2        | 小兵 | M      | 55    |<br>| 7  | 2        | 小林 | M      | 85    |<br>| 8  | 3        | 小新 | F      | 91    |<br>| 9  | 3        | 小王 | M      | 89    |<br>| 10 | 3        | 小丽 | F      | 85    |</li>
<li><code>classes</code>表存储了班级信息：| id | name |<br>| :- | :— |<br>| 1  | 一班 |<br>| 2  | 二班 |<br>| 3  | 三班 |<br>| 4  | 四班 |</li>
</ul>
</li>
</ul>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul>
<li><p><code>AlaSQL</code> 是<strong>内存数据库</strong>，和 <code>MySQL</code> 的<strong>持久化存储</strong>不同，内存数据库的表数据在页面加载时导入，并且只存在于浏览器的内存</p>
</li>
<li><p>用 MySQL 练习：</p>
<ul>
<li>下载<a href="https://github.com/michaelliao/learn-sql/blob/master/mysql/init-test-data.sql">SQL脚本</a></li>
<li>在命令行运行：<code>$ mysql -u root -p &lt; init-test-data.sql</code></li>
</ul>
</li>
<li><p>自动创建 <code>test</code> 数据库，并且在 <code>test</code> 数据库下，创建 <code>students</code> 和 <code>classes</code> 表，并进行必要的初始化数据</p>
</li>
<li><p>对 MySQL 数据库的修改都会保存，若希望恢复到初始状态：再次运行：<code>$ mysql -u root -p &lt; init-test-data.sql</code></p>
</li>
<li><p><strong>problem</strong>：<code>ERROR 1366 (HY000)</code></p>
<ul>
<li>solution：对于 <code>Win10</code>，只要将脚本用 <code>GBK</code> 格式重新保存，再用 <code> CMD</code> 调用即可</li>
</ul>
</li>
<li><p><code>mysql workbench</code> , MySQL 的桌面集成环境, 可视化MySQL数据库软件</p>
</li>
</ul>
<h2 id="基本查询"><a href="#基本查询" class="headerlink" title="基本查询"></a>基本查询</h2><ul>
<li><p>查看已存在的 数据库：<code>mysql&gt; show databases;</code></p>
</li>
<li><p>切换数据库：<code>use test;</code></p>
</li>
<li><p>查询 数据库表 中的数据：</p>
<ul>
<li><code>SELECT * FROM &lt;表名&gt;</code> ：查询该表的所有数据</li>
</ul>
</li>
<li><p><code>SELECT * FROM students</code></p>
<ul>
<li><code>SELECT</code> 关键字：执行一个查询</li>
<li><code>*</code> ：所有列</li>
<li><code>FROM</code> ：从哪个表查询</li>
</ul>
</li>
<li><p>可以使用 <code>SELECT</code> 语句计算，但不是 SQL 的强项</p>
</li>
<li><p><code>SELECT</code> : 判断当前到数据库的连接是否有效</p>
<ul>
<li><code>SELECT 1;</code></li>
</ul>
</li>
</ul>
<h2 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h2><ul>
<li>SELECT 关键字 可以通过 <code>WHERE</code> 条件来设定查询条件，查询结果 是满足 查询条件的记录<ul>
<li>语法：<code>SELECT * FROM &lt;表名&gt; WHERE 条件表达式</code></li>
<li>例如 <code>SELECT * FROM students WHERE score&gt;=80;</code></li>
<li>WHERE 关键字后的为条件</li>
</ul>
</li>
</ul>
<h3 id="三个条件表达式"><a href="#三个条件表达式" class="headerlink" title="三个条件表达式"></a>三个条件表达式</h3><ul>
<li><p>条件表达式可以用 <code>&lt;条件1&gt; AND &lt;条件2&gt;</code> : 满足两个条件</p>
<ul>
<li>例如判断 即大于80又是男生：<ul>
<li><code>WHERE score&gt;=80 AND gender=&#39;M&#39;</code></li>
<li>字符串用 单引号括起来</li>
</ul>
</li>
</ul>
</li>
<li><p>条件表达式可以用 <code>&lt;条件1&gt; AND &lt;条件2&gt;</code>：满足两者之一</p>
</li>
<li><p>条件表达式可以用 <code>NOT &lt;条件&gt;</code>：不符合该条件的记录</p>
<ul>
<li>例如：不是二班的</li>
<li><code>WHERE NOT class_id = 2</code></li>
</ul>
</li>
<li><p><code>NOT class_id=2</code> 等价于 <code>class_id &lt;&gt; 2</code></p>
<ul>
<li><code>NOT</code> 查询不常用</li>
</ul>
</li>
<li><p>组合三个以上的条件：用小括号 <code>()</code> 来说明如何条件运算</p>
</li>
</ul>
<h3 id="常用的条件表达式"><a href="#常用的条件表达式" class="headerlink" title="常用的条件表达式"></a>常用的条件表达式</h3><table>
<thead>
<tr>
<th align="left">条件</th>
<th align="left">表达式举例1</th>
<th align="left">表达式举例2</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">使用=判断相等</td>
<td align="left">score = 80</td>
<td align="left">name = ‘abc’</td>
<td align="left">字符串需要用单引号括起来</td>
</tr>
<tr>
<td align="left">使用&gt;判断大于</td>
<td align="left">score &gt; 80</td>
<td align="left">name &gt; ‘abc’</td>
<td align="left">字符串比较根据ASCII码，中文字符比较根据数据库设置</td>
</tr>
<tr>
<td align="left">使用&gt;=判断大于或相等</td>
<td align="left">score &gt;= 80</td>
<td align="left">name &gt;= ‘abc’</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">使用&lt;判断小于</td>
<td align="left">score &lt; 80</td>
<td align="left">name &lt;= ‘abc’</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">使用&lt;=判断小于或相等</td>
<td align="left">score &lt;= 80</td>
<td align="left">name &lt;= ‘abc’</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>使用&lt;&gt;判断不相等</strong></td>
<td align="left">score &lt;&gt; 80</td>
<td align="left">name &lt;&gt; ‘abc’</td>
<td align="left"></td>
</tr>
<tr>
<td align="left"><strong>使用LIKE判断相似</strong></td>
<td align="left">name LIKE ‘ab%’</td>
<td align="left">name LIKE ‘%bc%’</td>
<td align="left">%表示任意字符，例如’ab%’将匹配’ab’，’abc’，’abcd’</td>
</tr>
</tbody></table>
<h2 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h2><ul>
<li><p><code>SELECT * FROM &lt;表名&gt;</code> : 返回的二维表和原表一样</p>
<ul>
<li><code>*</code> ：查询所有列</li>
</ul>
</li>
<li><p><code>SELECT 列1，列2 FROM ...</code> : 仅包含指定列，成为投影查询</p>
</li>
<li><p>这样返回的结果集 只包含了指定的列，并且 结果集 的列的是顺序可以和原表不一样</p>
</li>
<li><p><code>SELECT 列1 别名1，列2 别名2 FROM ...</code> : 为指定列起别名</p>
</li>
<li><p>投影查询 同样可以使用 <code>WHERE</code> 关键字：</p>
<ul>
<li>语法：<code>SELECT 列1，列2 FROM &lt;表名&gt; WHERE ..</code></li>
</ul>
</li>
</ul>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><ul>
<li><p>使用  关键字 <code>SELECT</code> 时，查询的结果通常按照 <code>id</code> 排序，即根据 主键 排序</p>
</li>
<li><p>使用 关键字 <code>ORDER BY 列名 (ASC)</code> : 根据其他条件正序, <code>ASC</code> 可以省略</p>
<ul>
<li>例如：按照成绩从低到高：</li>
<li><code>SELECT id,name,score FROM students ORDER BY score</code></li>
</ul>
</li>
<li><p>可以给 <code>ORDER BY</code> 加上关键字 <code>DESC</code> 表示倒序：从高到低排序</p>
<ul>
<li>例如：<code>SELECT id,name,score FROM students ORDER BY score DESC</code></li>
</ul>
</li>
<li><p>在 <code>ORDER BY</code> 关键字后添加 列名 ：先按照，再按照下一列排序</p>
<ul>
<li>l例如：先按照分数倒序，再按照gender正序</li>
<li><code>ORDER BY score DESC,gender</code></li>
</ul>
</li>
<li><p>若有条件 <code>WHERE</code> , 需将 <code>ORDER BY</code> 语句放于 <code>WHERE</code> 后</p>
<ul>
<li>例如 查询一班的成绩，并按照倒序</li>
<li><code>SELECT * FROM students WHERE class_id = 1 ORDER BY score DESC;</code></li>
<li>这样的话，先筛选满足 <code>WHERE</code> 条件的记录，再排序</li>
</ul>
</li>
</ul>
<h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><ul>
<li><p>使用 <code>SELECT</code> 查询时，若结果集 很大，需要分页显示，每次显示 100 条</p>
</li>
<li><p>分页 实际上是从 结果集 中截取 <code>M-N</code> 条记录</p>
</li>
<li><p>语法 <code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code></p>
</li>
<li><p>先使用 <code>SELECT</code> 关键词查询出结果集，再使用 <code>LIMIT</code> 关键字截取记录</p>
<ul>
<li>例如：先把学生按成绩 倒序，再把结果集 分页，每页 三条记录，</li>
<li><code>LIMIT 3 OFFSET 0</code><ul>
<li><code>OFFSET 0</code>从结果集 0 号记录开始，<code>LIMIT 3</code>最多 3 条</li>
</ul>
</li>
</ul>
</li>
<li><p>分页查询的关键：</p>
<ul>
<li>首先确定每页需要显示的记录数量 <code>PageSize</code></li>
<li>然后根据当前页的索引 <code>PageIndex</code> 确定 <code>LIMIT</code> 和 <code>OFFSET</code> 设定的值<ul>
<li><code>LIMIT</code> 总是设定为 <code>PageSize</code></li>
<li><code>OFFSET</code> 总是设定为 <code>PageSize*(PageIndex - 1)</code></li>
</ul>
</li>
</ul>
</li>
<li><p>在 MySQL 中，<code>LIMIT 15 OFFSET 30</code> 可以简写成 <code>LIMIT 30,15</code></p>
</li>
</ul>
<h2 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h2><ul>
<li><p>SQL 提供了专门的<strong>聚合函数</strong>： 统计总数、平均数等计算</p>
</li>
<li><p>使用 聚合函数 进行查询就是 聚合查询，可以快速获得结果</p>
</li>
<li><p><code>COUNT()</code> 函数：查询表中 一共多少记录</p>
<ul>
<li><code>SELECT COUNT(*) FROM students;</code><ul>
<li><code>COUNT(*)</code> 表示查询所有列的行数，</li>
<li>聚合的计算结果虽然是一个数字，但查询的结果仍然是一个二维表（一行一列），列名为 <code>COUNT(*)</code></li>
<li>通常使用聚合查询时，给列名一个别名，便于处理结果</li>
</ul>
</li>
</ul>
</li>
<li><p><code>COUNT(*)</code> 其实和 <code>COUNT(列1)</code> 效果一样</p>
</li>
<li><p>聚合查询时，也可以使用 <code>WHERE</code> 条件关键字，方便我们统计符合条件的记录条数</p>
</li>
<li><p>除了 <code>COUNT()</code> SQL 还提供了其他聚合函数：</p>
<ul>
<li><table>
<thead>
<tr>
<th align="left">函数</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">SUM</td>
<td align="left">计算某一列的合计值，该列必须为数值类型</td>
</tr>
<tr>
<td align="left">AVG</td>
<td align="left">计算某一列的平均值，该列必须为数值类型</td>
</tr>
<tr>
<td align="left">MAX</td>
<td align="left">计算某一列的最大值</td>
</tr>
<tr>
<td align="left">MIN</td>
<td align="left">计算某一列的最小值</td>
</tr>
</tbody></table>
</li>
<li>注意：<code>MAX()</code> 和 <code>MIN</code> 函数不限于数值类型</li>
</ul>
</li>
<li><p>例如，计算男生平均成绩：</p>
<ul>
<li><code>SELECT AVG(score) average FROM students WHERE gender=&#39;M&#39;;</code></li>
</ul>
</li>
<li><p>注意：若聚合查询的 <code>WHERE</code> 条件关键字没有匹配到任何数据，</p>
<ul>
<li><code>COUNT()</code> 返回0</li>
<li><code>SUM(),AVG(),MAX(),MIN()</code> 返回 <code>NULL</code></li>
</ul>
</li>
</ul>
<h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><ul>
<li><p>对于 <strong>聚合查询</strong>，SQL 提供了 <strong>分组聚合</strong> 的功能</p>
</li>
<li><p>使用关键字 <code>GROUP BY 列名</code></p>
<ul>
<li>执行 SELECT 语句时，会先把记录按照 <code>列名</code> 分组，然后再分别计算</li>
</ul>
</li>
<li><p>可以给分组聚合的结果集 加上对应的列值：</p>
<ul>
<li><code>SELECT class_id, COUNT(*) num FROM students GROUP BY class_id;</code></li>
</ul>
</li>
<li><p>注意：不能将其他列放入结果集中，因为不能将多个值放入同一行记录中</p>
</li>
<li><p>可以使用多个列进行分组：</p>
<ul>
<li>例如：统计各班的男生和女生：</li>
<li><code>SELECT class_id,gender,COUNT(*) FROM students GROUP BY class_id,gender;</code></li>
</ul>
</li>
</ul>
<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul>
<li>查询出每个班级的平均分</li>
<li><code>SELECT class_id,AVG(score) average FROM students GROUP BY class_id;</code></li>
<li>查询出 每个班级男生女生的平均分</li>
<li><code>SELECT class_id,gender,AVG(score) FROM students GROUP BY class_id,gender;</code></li>
</ul>
<h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul>
<li><p><code>SELECT</code> 关键字可以从多张表同时查询寻数据，同时从 <code>students</code> 和 <code>classes</code> 表的<strong>乘积</strong></p>
<ul>
<li>语法：<code>SELECT * FROM &lt;表1&gt;, &lt;表2&gt;</code></li>
</ul>
</li>
<li><p>一次查询两个表，查询的结果也是 一个二维表，是两个表的乘积</p>
<ul>
<li>返回的列数是两个表之和，返回的行数是两个行数之积</li>
</ul>
</li>
<li><p>多表查询 ： 又称 <code>笛卡尔查询</code></p>
<ul>
<li>需要注意：返回的行数</li>
<li>并且列的名称可能重复</li>
</ul>
</li>
<li><p>我们可以利用投影查询来给列起别名：</p>
<ul>
<li><code>SELECT students.id sid, classes.id cid FROM students,classes;</code></li>
</ul>
</li>
<li><p>多表查询时，需要使用 <code>表名.列名</code> 引用指定列 和 为其设定别名</p>
</li>
<li><p>还可以为表设置别名：<code>SELECT students.id sid, classes.id cid FROM students s, classes c;</code></p>
</li>
<li><p>多表查询 可以添加 <code>WHERE</code> 条件</p>
</li>
<li><p><code>SELECT s.id sid, c.id cid FROM students s, classes c WHERE s.gender = &quot;M&quot; AND c.id = 1;</code></p>
</li>
</ul>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><ul>
<li><p>连接查询 是另一种类型的多表查询，</p>
</li>
<li><p>对多个表进行 <code>JOIN</code> 运算</p>
<ul>
<li>先确定一个主表作为结果集，然后将其他表 选择性地 <code>连接</code> 到主表结果集上</li>
</ul>
</li>
<li><p>选出 <code>students</code> 中所有学生信息：</p>
<ul>
<li><code>SELECT s.id, s.name, ... FROM students s;</code></li>
</ul>
</li>
<li><p>存放班级名称的 <code>name</code> 存在 <code>classes</code> 表中，只有根据 <code>students</code> 的 <code>classes_id</code> 找到 <code>classes</code>中对应的记录，再取出 <code>name</code>列，才能获得班级名称</p>
</li>
<li><p>可以使用 <code>INNER JOIN</code>来实现</p>
<ul>
<li><code>SELECT s.id, s.class_id, c.name class_name FROM students s INNER JOIN classes c ON s.class_id = c.id</code></li>
</ul>
</li>
<li><p><code>INNER JOIN</code> 语法：</p>
<ul>
<li>先确定主表，<code>FROM 表1</code></li>
<li>确定要连接的表，<code>INNER JOIN 表2</code></li>
<li>确定连接条件：<code>ON 条件</code></li>
<li>可选：<code>WHERE</code>, <code>ORDER BY</code></li>
</ul>
</li>
<li><p><code>OUTER JOIN</code></p>
<ul>
<li><code>INNER JOIN</code><ul>
<li>只返回同时存在两表的行数据</li>
</ul>
</li>
<li><code>RIGHT OUTER JOIN</code><ul>
<li>返回右表都存在的行，若记录仅在一行存在，则结果集中会以 <code>NULL</code>填充</li>
</ul>
</li>
<li><code>LEFT OUTER JOIN</code><ul>
<li>返回左表都存在的记录，</li>
</ul>
</li>
<li><code>FULL OUTER JOIN</code><ul>
<li>返回两张表都存在的记录，自动将对方不存在的记录填充为 <code>NULL</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="6-修改数据"><a href="#6-修改数据" class="headerlink" title="6 修改数据"></a>6 修改数据</h1><ul>
<li>对关系数据库的基本操作：<strong>增删改查</strong><ul>
<li><code>CRUD</code> : Create、 Retrieve、Update、Delete</li>
<li>查询：<code>SELECT</code></li>
</ul>
</li>
<li>增删改：<ul>
<li><code>INSERT</code>: 插入新记录</li>
<li><code>UPDATE</code>: 更新已有记录</li>
<li><code>DELETE</code>: 删除已有记录</li>
</ul>
</li>
</ul>
<h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><ul>
<li><p><code>INSERT</code> 语句：向数据库表 插入一条新记录</p>
</li>
<li><p><code>INSERT</code>基本语法：<code>INSERT INTO 表名 (字段1，字段2...) VALUES (值1，值2...)</code></p>
</li>
<li><p>向 <code>students</code>插入一条新记录：</p>
<ul>
<li>先列举出需要插入的字段名</li>
<li>再在 <code>VALUES</code> 子句中依次写出对应字段的值</li>
</ul>
</li>
<li><p>例如 <code>INSERT INTO students (class_id, name, gender, score) VALUES (2, &#39;大牛&#39;, &#39;M&#39;, 80);</code></p>
</li>
<li><p><code>id</code> 字段是一个 自增主键，不需要列为 段名称</p>
</li>
<li><p><strong>基本语法</strong>：字段名 需要和 值 一一对应</p>
</li>
<li><p>一次性添加多条记录：在 <code>VALUES</code>子句指定多个记录值，每个记录由 <code>(...)</code>包含</p>
</li>
</ul>
<h2 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h2><ul>
<li><p><strong>基本语法</strong>：<code>UPDATE 表名 SET 字段1=值1，字段2=值2... WHERE ... ; </code></p>
</li>
<li><p>例如：更新 <code>students</code>表中 <code>id=1</code>的记录的 <code>name</code>和 <code>score</code>这两个字段</p>
<ul>
<li><code>UPDATE students SET name=&#39;大牛&#39;, score=6 WHERE id=1</code></li>
</ul>
</li>
<li><p>在 <code>UPDATE</code> 语句中，更新字段时可以使用表达式：<code>UPDATE students SET score=score+10 WHERE score&lt;80;</code></p>
</li>
<li><p>当没有 <code>WHERE</code> 关键字时，更新所有记录</p>
</li>
</ul>
<h3 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h3><ul>
<li>在使用 MySQL 这类真正的关系数据库时，<code>UPDATE</code> 会返回更新的行数以及 <code>WHERE</code> 条件匹配的行数</li>
</ul>
<h2 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h2><ul>
<li><p><strong>基本语法</strong>： <code>DELETE FROM student WHERE ...</code></p>
</li>
<li><p>删除 <code>students</code> 表中 <code>id=1</code>的记录：</p>
<ul>
<li><code>DELETE FROM students WHERE id=1;</code></li>
</ul>
</li>
<li><p>不带 <code>WHERE </code> 语句：删除整个表的数据</p>
</li>
</ul>
<h3 id="MySQL-2"><a href="#MySQL-2" class="headerlink" title="MySQL"></a>MySQL</h3><ul>
<li><code>DELETE</code> 语句会返回删除的行数以及 <code>WHERE</code> 匹配的行数</li>
</ul>
<h1 id="7-MySQL"><a href="#7-MySQL" class="headerlink" title="7 MySQL"></a>7 MySQL</h1><ul>
<li><p>MySQL安装之后：</p>
<ul>
<li><code>MySQL Server</code> ,即真正的 MySQL 服务器</li>
<li><code>MySQL Client</code> , 命令行客户端，可以通过 <code>MySQL Client</code> 登录 MySQL，输入SQL语句并执行</li>
</ul>
</li>
<li><p><code>MySQL Server</code> 和 <code>MySQL Client</code> 关系：</p>
<ul>
<li>```ascii<br>┌──────────────┐  SQL   ┌──────────────┐<br>│ MySQL Client │───────&gt;│ MySQL Server │<br>└──────────────┘  TCP   └──────────────┘<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* `MySQL Client` 中输入的SQL语句通过TCP连接发送到MySQL Server</span><br><span class="line"></span><br><span class="line">  * 默认端口号 3306</span><br><span class="line">  * 即发送到本机MySQL Server , 地址 `127.0.0.1:3306`</span><br><span class="line">* 也可以只安装 `MySQL Client` ，然后连接到远程 `MySQL Server`</span><br><span class="line"></span><br><span class="line">  * 假设 远程 `MySQL Server` 的 IP 地址 `10.0.1.99`, 那么可以使用 `-h`指定 IP 或 域名</span><br><span class="line">    * `mysql -h 10.0.1.99 -u root -p`</span><br><span class="line"></span><br><span class="line">## 管理 MySQL</span><br><span class="line"></span><br><span class="line">* 管理 MySQL，可以使用 **可视化图形界面软件**  `MySQL Workbench`</span><br><span class="line"></span><br><span class="line">  * 用可视化的方式 查询、创建、修改 数据库表</span><br><span class="line">* `Workbench` 对MySQL的操作依然是发送 SQL 语句并执行，</span><br><span class="line"></span><br><span class="line">  * Workbench 和 Client命令行都是客户端，和 MySQL 交互，唯一的接口就是 SQL</span><br><span class="line">* 虽然可以使用 `MySQL Workbench` 图形界面来直接管理 MySQL</span><br><span class="line"></span><br><span class="line">  * 一般，通过 `SSH`远程连接时，只能使用SQL命令</span><br><span class="line"></span><br><span class="line">### 数据库</span><br><span class="line"></span><br><span class="line">* 在一个运行 MySQL 的服务器上，实际上可以创建多个数据库 `Database`</span><br><span class="line"></span><br><span class="line">  * 列出所有数据库：`SHOW DATABASES;`</span><br><span class="line">* `information_schema`, `mysql`, `performance_schema` 和 `sys` 是系统库，不要去改动</span><br><span class="line">* 创建新数据库：`CREATE DATABASE test;`</span><br><span class="line">* 删除一个数据库 `DROP DATABASE test;`</span><br><span class="line">* 切换为当前数据库 `USE test;`</span><br><span class="line"></span><br><span class="line">### 表</span><br><span class="line"></span><br><span class="line">* 列出当前数据库的 **所有表**： `SHOW TABLES;`</span><br><span class="line"></span><br><span class="line">  * ```mysql</span><br><span class="line">    +----------------+</span><br><span class="line">    | Tables_in_test |</span><br><span class="line">    +----------------+</span><br><span class="line">    | classes        |</span><br><span class="line">    | students       |</span><br><span class="line">    +----------------+</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>查看<strong>一个表的结构</strong>：<code>DESC students;</code></p>
<ul>
<li><p>```mysql<br>+———-+————–+——+—–+———+—————-+<br>| Field    | Type         | Null | Key | Default | Extra          |<br>+———-+————–+——+—–+———+—————-+<br>| id       | bigint       | NO   | PRI | NULL    | auto_increment |<br>| class_id | bigint       | NO   |     | NULL    |                |<br>| name     | varchar(100) | NO   |     | NULL    |                |<br>| gender   | varchar(1)   | NO   |     | NULL    |                |<br>| score    | int          | NO   |     | NULL    |                |<br>+———-+————–+——+—–+———+—————-+  </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 查看 **创建表** 的SQL语句：`SHOW CREATE TABLE students;`</span><br><span class="line">* **创建表**使用 `CREATE TABLE`</span><br><span class="line">* **删除表**使用 `DROP TABLE`</span><br><span class="line">* **修改表**</span><br><span class="line"></span><br><span class="line">  * 给 `students`表新增一列 `birth` : `ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL;`</span><br><span class="line">* **修改 `birth` 列，**</span><br><span class="line"></span><br><span class="line">  * 将列名改为 `birthday`, 类型改为 `VARCHAR(20)` : `ALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL;`</span><br><span class="line">* **删除列：**</span><br><span class="line"></span><br><span class="line">  * `ALTER TABLE students DROP COLUMN birthday;`</span><br><span class="line"></span><br><span class="line">### 退出MySQL</span><br><span class="line"></span><br><span class="line">* 使用 `EXIT`命令退出 MySQL</span><br><span class="line">  * 仅仅断开了 客户端与服务器的连接，MySQL 服务器仍然在运行</span><br><span class="line"></span><br><span class="line">## 实用 SQL 语句</span><br><span class="line"></span><br><span class="line">### 插入或替换</span><br><span class="line"></span><br><span class="line">* 插入一条新的记录，若记录已经存在，就先删除原纪录，再插入新记录</span><br><span class="line">  * 不必先查询</span><br><span class="line">* `REPLACE` 语法：`INSERT INTO ... VALUES`</span><br><span class="line">  * `REPLACE INTO students (id,class_id,name,gender,score) VALUES (1,1,&#x27;xiaoming&#x27;,&#x27;F&#x27;,99);`</span><br><span class="line"></span><br><span class="line">### 插入或更新</span><br><span class="line"></span><br><span class="line">* 插入一条新记录，若记录已经存在，就更新该记录</span><br><span class="line">* `INSERT INTO ... ON DUPLICATE KEY UPDATE ...`</span><br><span class="line">* ```mysql</span><br><span class="line">  INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, &#x27;小明&#x27;, &#x27;F&#x27;, 99) ON DUPLICATE KEY UPDATE name=&#x27;小明&#x27;, gender=&#x27;F&#x27;, score=99;</span><br></pre></td></tr></table></figure></li>
<li><p>若 <code>id=1</code>不存在，插入新记录，若存在，则由 <code>UPDATE</code>更新字段</p>
</li>
</ul>
</li>
</ul>
<h3 id="插入或忽略"><a href="#插入或忽略" class="headerlink" title="插入或忽略"></a>插入或忽略</h3><ul>
<li><p>插入一条新数据，若已经存在，就忽略</p>
</li>
<li><p><code>INSERT IGNORE INTO...</code></p>
<ul>
<li>```mysql<br>INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, ‘小明’, ‘F’, 99);<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 快照</span><br><span class="line"></span><br><span class="line">* 对一个表进行快照，即 复制一份当前表的数据到一个新表，结合 `CREATE TABLE` 和 `SELECT`</span><br><span class="line">* `CREATE TABLE students_of_class1 SELECT * FROM students WHERE class_id=1;`</span><br><span class="line">* 创建的表结构和原表一样</span><br><span class="line"></span><br><span class="line">### 写入查询结果集</span><br><span class="line"></span><br><span class="line">* 将 查询结果集 写入表中，结合 `INSERT` 和 `SELECT`</span><br><span class="line">* 例如，创建一个统计成绩的表 `statistics`，记录各班的平均成绩：</span><br><span class="line"></span><br><span class="line">  * ```sql</span><br><span class="line">    CREATE TABLE statistics (</span><br><span class="line">        id BIGINT NOT NULL AUTO_INCREMENT,</span><br><span class="line">        class_id BIGINT NOT NULL,</span><br><span class="line">        average DOUBLE NOT NULL,</span><br><span class="line">        PRIMARY KEY (id)</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>写入各班的平均成绩：</p>
<ul>
<li>```sql<br>INSERT INTO statistics (class_id, average) SELECT class_id, AVG(score) FROM students GROUP BY class_id;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 强制使用指定索引</span><br><span class="line"></span><br><span class="line">* 查询时，数据库系统会自动分析查询语句，并选择一个最合适的索引</span><br><span class="line">* 有时，并不一定是最优索引，可以使用 `FORCE INDEX` 强制查询使用指定的索引</span><br><span class="line"></span><br><span class="line">  * ```sql</span><br><span class="line">    SELECT * FROM students FORCE INDEX (idx_class_id) WHERE class_id = 1 ORDER BY id DESC;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Zotero</title>
    <url>/p/6df03313.html</url>
    <content><![CDATA[<p>refs：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/349638221">Obsidian：一款完美的科研笔记/知识管理软件 - 知乎 (zhihu.com)</a></li>
</ul>
]]></content>
      <categories>
        <category>利器酷</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>论文</tag>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>VS2019 下 C++ 项目访问MySQL数据库</title>
    <url>/p/22861f12.html</url>
    <content><![CDATA[<p><a href="%5B(5%E6%9D%A1%E6%B6%88%E6%81%AF)">参考博客</a> MySQL数据库—VS019 C++访问MySQL_买代码的小猪猪的博客-CSDN博客](<a href="https://blog.csdn.net/weixin_49324123/article/details/116493884">https://blog.csdn.net/weixin_49324123/article/details/116493884</a>))</p>
<p>CMD 命令行窗口进入mysql数据库：</p>
<p><code>mysql -hlocalhost -uroot -p</code>:</p>
<ul>
<li><code>-hlocalhost</code>：-h表示服务器名, localhost表示本地</li>
<li><code>-uroot</code>: -u表示数据库用户名，root是MySQL默认用户名</li>
<li><code>-p</code>: 为密码</li>
</ul>
<h1 id="1-配置"><a href="#1-配置" class="headerlink" title="1 配置"></a>1 配置</h1><ul>
<li><p>项目-&gt;属性-&gt;==平台为 <code>x64</code>==</p>
</li>
<li><p>项目 -&gt; 属性 -&gt; VC++ 目录</p>
<ul>
<li>将所安装的MySQL目录下的 <code>include</code> <code>lib</code>文件夹目录分别输入包含目录库目录</li>
<li><img src="E:\Hexo\Blog\source_posts\VS2019-C++-MySQL.assets\image-20210522160110645.png" alt="image-20210522160110645"></li>
</ul>
</li>
<li><p>链接器 -&gt; 输入</p>
<ul>
<li>将 MySQL 的lib目录下的 <code>libmysql.lib</code>文件名输入附加依赖项，只需输入文件名</li>
<li><img src="E:\Hexo\Blog\source_posts\VS2019-C++-MySQL.assets\image-20210522160248341.png" alt="image-20210522160248341"></li>
</ul>
</li>
<li><p>将 lib 目录下的 <code>libmysql.dll</code> 文件复制 <code>C:\Windows\System32</code>目录下</p>
</li>
</ul>
<h1 id="2-C-中-MySQL-的基本操作"><a href="#2-C-中-MySQL-的基本操作" class="headerlink" title="2 C++ 中 MySQL 的基本操作"></a>2 C++ 中 MySQL 的基本操作</h1><p>一个对已创建的数据库的访问代码，例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mysql.h&gt;</span> <span class="comment">// mysql文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	MYSQL mysql;    <span class="comment">//数据库句柄</span></span><br><span class="line">	MYSQL_RES* res; <span class="comment">//查询结果集</span></span><br><span class="line">	MYSQL_ROW row;  <span class="comment">//记录结构体</span></span><br><span class="line">	<span class="comment">//初始化数据库</span></span><br><span class="line">	<span class="built_in">mysql_init</span>(&amp;mysql);</span><br><span class="line">	<span class="comment">//设置字符编码</span></span><br><span class="line">	<span class="built_in">mysql_options</span>(&amp;mysql, MYSQL_SET_CHARSET_NAME, <span class="string">&quot;gbk&quot;</span>);</span><br><span class="line">	<span class="comment">//连接数据库</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">mysql_real_connect</span>(&amp;mysql, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;qazedc12&quot;</span>, <span class="string">&quot;test&quot;</span>, <span class="number">3306</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;错误原因： %s\n&quot;</span>, <span class="built_in">mysql_error</span>(&amp;mysql));</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;连接失败！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//查询数据</span></span><br><span class="line">	<span class="keyword">int</span> ret = <span class="built_in">mysql_query</span>(&amp;mysql, <span class="string">&quot;select * from students;&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ret: %d\n&quot;</span>, ret);</span><br><span class="line">	<span class="comment">//获取结果集</span></span><br><span class="line">	res = <span class="built_in">mysql_store_result</span>(&amp;mysql);</span><br><span class="line">	<span class="comment">//给ROW赋值，判断ROW是否为空，不为空就打印数据。</span></span><br><span class="line">	<span class="keyword">while</span> (row = <span class="built_in">mysql_fetch_row</span>(res))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s  &quot;</span>, row[<span class="number">0</span>]);   <span class="comment">//打印ID</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s  &quot;</span>, row[<span class="number">1</span>]);   <span class="comment">//打印姓名</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s  &quot;</span>, row[<span class="number">2</span>]);  <span class="comment">//打印班级</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%s  &quot;</span>, row[<span class="number">3</span>]);  <span class="comment">//打印性别</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//释放结果集</span></span><br><span class="line">	<span class="built_in">mysql_free_result</span>(res);</span><br><span class="line">	<span class="comment">//关闭数据库</span></span><br><span class="line">	<span class="built_in">mysql_close</span>(&amp;mysql);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从实例代码中可以了解到访问数据库的步骤：</p>
<ul>
<li><p>需要包含的<strong>头文件</strong> <code>mysql.h</code></p>
</li>
<li><p><strong>初始化</strong>数据库：</p>
<ul>
<li><strong>数据库句柄</strong> <code>MYSQL mysql</code></li>
<li>定义<strong>查询结果集</strong> <code>MYSQL_RES* res</code></li>
<li>定义<strong>记录结构体</strong> <code>MYSQL_ROW row</code></li>
<li>初始化数据库： <code>mysql_init(&amp;mysql)</code></li>
</ul>
</li>
<li><p>设置字符编码：<code>mysql_options(&amp;mysql, MYSQL_SET_CHARSET_NAME, &quot;gbk&quot;);</code></p>
</li>
<li><p>连接数据库：<code>mysql_real_connect(&amp;mysql, &quot;127.0.0.1&quot;, &quot;root&quot;, &quot;123456Aa&quot;, &quot;school&quot;, 3306, NULL, 0)</code></p>
</li>
<li><p>查询数据：<code>mysql_query(&amp;mysql, &quot;select * from students;&quot;)</code></p>
</li>
<li><p>获取结果集 <code>res = mysql_store_result(&amp;mysql)</code></p>
</li>
<li><p>打印数据：<code>while(row = mysql_fetch_row(res))</code></p>
</li>
<li><p>释放结果集：<code>mysql_free_result(res)</code></p>
</li>
<li><p>关闭数据库：<code>mysql_close(&amp;mysql)</code></p>
</li>
</ul>
<h2 id="常用的连接-MySQL-和-从MySQL中取出数据的API"><a href="#常用的连接-MySQL-和-从MySQL中取出数据的API" class="headerlink" title="常用的连接 MySQL 和 从MySQL中取出数据的API"></a>常用的连接 MySQL 和 从MySQL中取出数据的API</h2><p><code>mysql_real_connect()</code></p>
<ul>
<li><strong>函数原型</strong>：<code>MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char* user, const char* password, const char* db, unsigned int port, const char* unix_socket, unsigned int client_flag)</code><ul>
<li>mysql: 现存MYSQL结构的地址</li>
<li>host : 一个主机名或IP地址</li>
<li>user: 用户ID</li>
<li>password: 用户密码</li>
<li>db: 数据库名</li>
<li>port: 若非0，则作TCP/IP 连接用作端口号</li>
<li>unix_socket: 若非NULL，则指定套接字或应该被使用的命名管道</li>
<li>clident_flag: 通常为0</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：MYSQL* 连接句柄</li>
<li>失败：NULL</li>
</ul>
</li>
</ul>
<p><code>mysql_select_db()</code></p>
<ul>
<li><strong>函数原型</strong>：<code>int mysql_select_db(MYSQL* mysql, const char *db)</code><ul>
<li>使得由 <strong>db 指定的数据库</strong>成为在由 mysql 指定的连接上的当前数据库</li>
</ul>
</li>
<li>返回值：<ul>
<li>成功：0</li>
<li>失败：非零</li>
</ul>
</li>
</ul>
<p><code>mysql_query</code></p>
<ul>
<li>函数原型：<code>int mysql_query(MYSQL* mysql, const char*query)</code><ul>
<li>执行由 query 指向的 <strong>SQL查询语句</strong></li>
<li>必须包含一条的 SQL 语句；若允许多语句执行，字符串可包含多条由分号隔开的语句</li>
<li>不需要加终止的分号</li>
<li><strong>注意</strong>：对于包含二进制数据的查询，你必须使用mysql_real_query()而不是mysql_query()，因为二进制代码数据可能包含“\0”字符，而且，mysql_real_query()比mysql_query()更快，因为它对查询字符串调用strlen()</li>
</ul>
</li>
</ul>
<p><code>mysql_store_result</code></p>
<ul>
<li>函数原型：<code>MYSQL_RES *mysql_store_result(MYSQL *mysql)</code></li>
<li>对于成功检索了数据的每个查询（SELECT, SHOW, DESCRIBE,等），必须调用mysql_store_result 或 mysql_use_result</li>
<li>对于其他查询，不需要调用mysql_store_result 或</li>
<li><blockquote>
<p>mysql_store_result()将查询的全部结果读取到客户端，分配1个MYSQL_RES结构，并将结果置于该结构中。</p>
<p>如果查询未返回结果集，mysql_store_result()将返回Null指针（例如，如果查询是INSERT语句）。</p>
<p>如果读取结果集失败，mysql_store_result()还会返回Null指针。通过检查mysql_error()是否返回非空字符串，mysql_errno()是否返回非0值，或mysql_field_count()是否返回0，可以检查是否出现了错误。</p>
<p>如果未返回行，将返回空的结果集。（空结果集设置不同于作为返回值的空指针）。</p>
<p>一旦调用了mysql_store_result()并获得了不是Null指针的结果，可调用mysql_num_rows()来找出结果集中的行数。</p>
<p>可以调用mysql_fetch_row()来获取结果集中的行，或调用mysql_row_seek()和mysql_row_tell()来获取或设置结果集中的当前行位置。</p>
<p>一旦完成了对结果集的操作，必须调用mysql_free_result()。</p>
</blockquote>
</li>
</ul>
<p><code>mysql_fetch_row</code></p>
<h2 id="INSERT-、UPDATE语句"><a href="#INSERT-、UPDATE语句" class="headerlink" title="INSERT 、UPDATE语句"></a>INSERT 、UPDATE语句</h2><p><a href="https://www.cnblogs.com/fnlingnzb-learner/p/5829556.htmls">参考博客</a></p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>编程语言学习</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Lab1</title>
    <url>/p/bf869091.html</url>
    <content><![CDATA[<h1 id="lab1"><a href="#lab1" class="headerlink" title="lab1"></a>lab1</h1><p>[toc]</p>
<h1 id="1-Producer-Consumer-problem"><a href="#1-Producer-Consumer-problem" class="headerlink" title="1 Producer-Consumer problem"></a>1 Producer-Consumer problem</h1><p><a href="https://blog.csdn.net/zhou1021jian/article/details/71514738">参考博客1</a></p>
<p><a href="https://www.jianshu.com/p/a2ade02979d1">参考博客2</a></p>
<p><a href="https://www.cnblogs.com/linhaostudy/p/7554942.html">参考博客3</a></p>
<p><a href="">参考博客4</a></p>
<ul>
<li>也称 有限缓冲问题 <code>Bounded-buffer problem</code></li>
<li>多线程同步的问题</li>
</ul>
<h2 id="1-1-信号量配合互斥锁"><a href="#1-1-信号量配合互斥锁" class="headerlink" title="1.1 信号量配合互斥锁"></a>1.1 信号量配合互斥锁</h2><ul>
<li><p>信号量特性：</p>
<ul>
<li>非负整数，对共享资源和线程的控制</li>
<li>通过信号量的线程会使得信号量减一，当为零时，所有试图通过的线程等待</li>
<li>操作：<ul>
<li>Wait：线程调用该函数时<ul>
<li>要么得到资源并将信号量减一</li>
<li>要么线程进入等待队列，直到信号量大于零</li>
</ul>
</li>
<li>Release：在信号量上执行加一<ul>
<li>释放由信号量守护的资源</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Wait，Release再Linux中：</p>
<ul>
<li><code>int sem_wait(sem_t* sem)</code></li>
<li><code>int sem_post(sem_t* sem)</code></li>
</ul>
</li>
<li><p>针对该问题：</p>
<ul>
<li>设定两个信号量：<ul>
<li><code>empty</code>: 空槽的个数</li>
<li><code>full</code>: 占有的个数</li>
</ul>
</li>
<li>生产者 向任务队列 放资源时，调用 <code>sem_wait(&amp;empty)</code> 检查队列是否已满，<ul>
<li>若满，就阻塞，直到有消费者从队列里取资源</li>
<li>若不满，就放入资源，并通知消费者取</li>
</ul>
</li>
<li>消费者 从任务队列 取资源时，调用 <code>sem_wait(&amp;full)</code> 检查任务队列是否已空<ul>
<li>若已空，就阻塞，直到生产者向里面放入资源在苏醒</li>
<li>若非空，就取资源，并通知生产者来放入</li>
</ul>
</li>
</ul>
</li>
<li><p>互斥锁是对任务队列进行保护</p>
</li>
<li><p>```C</p>
<p>#include &lt;stdio.h&gt;<br>#include &lt;pthread.h&gt;            //pthread_mutex_t, pthread_mutex_lock/unlock, pthread_t，pthread_create(), pthread_join()<br>#include &lt;semaphore.h&gt;            //sem_wait, sem_post, sem_init</p>
<p>#define MAX 5  //队列长度</p>
<p>pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;<br>sem_t full;     //填充的个数<br>sem_t empty;     //空槽的个数</p>
<p>int top = 0;     //队尾<br>int bottom = 0;  //队头</p>
<p>void* produce(void* arg)<br>{</p>
<pre><code>int i;
for ( i = 0; i &lt; MAX*2; i++)
&#123;
    printf(&quot;producer is preparing data\n&quot;);
    sem_wait(&amp;empty);//若空槽个数低于0阻塞

    pthread_mutex_lock(&amp;mutex);

    top = (top+1) % MAX;
    printf(&quot;now top is %d\n&quot;, top);

    pthread_mutex_unlock(&amp;mutex);

    sem_post(&amp;full);
&#125;
return (void*)1;
</code></pre>
<p>}</p>
<p>void* consume(void* arg)<br>{</p>
<pre><code>int i;
for ( i = 0; i &lt; MAX*2; i++)
&#123;
    printf(&quot;consumer is preparing data\n&quot;);
    sem_wait(&amp;full);//若填充个数低于0阻塞

    pthread_mutex_lock(&amp;mutex);

    bottom = (bottom+1) % MAX;
    printf(&quot;now bottom is %d\n&quot;, bottom);

    pthread_mutex_unlock(&amp;mutex);

    sem_post(&amp;empty);
&#125;

return (void*)2;
</code></pre>
<p>}</p>
<p>int main(int argc, char *argv[])<br>{</p>
<pre><code>pthread_t thid1;        //创建四个线程，unsigned long int
pthread_t thid2;
pthread_t thid3;
pthread_t thid4;

int  ret1;
int  ret2;
int  ret3;
int  ret4;

sem_init(&amp;full, 0, 0);            //初始化信号量full为0
sem_init(&amp;empty, 0, MAX);        //初始化信号量empty为MAX=5

pthread_create(&amp;thid1, NULL, produce, NULL);        //
pthread_create(&amp;thid2, NULL, consume, NULL);
pthread_create(&amp;thid3, NULL, produce, NULL);
pthread_create(&amp;thid4, NULL, consume, NULL);

pthread_join(thid1, (void**)&amp;ret1);                    //
pthread_join(thid2, (void**)&amp;ret2);
pthread_join(thid3, (void**)&amp;ret3);
pthread_join(thid4, (void**)&amp;ret4);

return 0;
</code></pre>
<p>}</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  * 若将 `sem_wait()`， `sem_post()`放于lock和unlock之间</span><br><span class="line">  * 死锁，因为我们不能预知线程进入共享区顺序，如果消费者线程先对mutex加锁，并进入，sem_wait()发现队列为空，阻塞，而生产者在对mutex加锁时，发现已上锁也阻塞，双方永远无法唤醒对方。</span><br><span class="line">* </span><br><span class="line">* `sem_init`: 长整型</span><br><span class="line"></span><br><span class="line">  * `int sem_init(sem_t *sem, int pshared, unsigned int value);`</span><br><span class="line">    * sem: 指向信号量结构的一个指针</span><br><span class="line">    * pshared不为零时，信号量在进程间共享，否则只能为当前进程的线程共享</span><br><span class="line">    * value为信号量的初始值</span><br><span class="line"></span><br><span class="line">## 1.2 Pthread</span><br><span class="line"></span><br><span class="line">* linux下用C语言开发多线程程序，Linux系统下的多线程遵循POSIX线程接口，称为pthread。</span><br><span class="line">* `pthread_create()`：创建子线程</span><br><span class="line"></span><br><span class="line">  * Linux 下创建的线程的 API 接口</span><br><span class="line">  * `int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);`</span><br><span class="line">  * 参数：</span><br><span class="line">    * thread: 返回成功时，由 thread 指向的内存单元被设置为新创建线程的线程ID</span><br><span class="line">    * attr：线程属性，默认使用NULL</span><br><span class="line">    * start_routine: 新创建的线程从 `start_routine`函数的地址开始运行，该函数只有一个万能参数arg，如果需要向 `start_rutine`函数传递的参数不止一个，那么需要把这些参数放到一个结构中，然后把这个结构的地址作为arg的参数传入。</span><br><span class="line">    * arg: 子线程处理函数的参数</span><br><span class="line">  * 简单来说：</span><br><span class="line">    * 第一个参数为指向线程 [标识符](http://baike.baidu.com/item/标识符)的 [指针](http://baike.baidu.com/item/指针)。</span><br><span class="line">    * 第二个参数用来设置线程属性。</span><br><span class="line">    * 第三个参数是线程运行函数的起始地址。</span><br><span class="line">    * 最后一个参数是运行函数的参数。</span><br><span class="line">  * 返回值：</span><br><span class="line">    * 成功返回0，失败返回错误号</span><br><span class="line">* `pthread_join()`: 子线程合入主线程</span><br><span class="line"></span><br><span class="line">  * ` int pthread_join(pthread_t thread, void **retval);`</span><br><span class="line">  * 主线程阻塞，等待子线程结束，然后回收子线程资源</span><br><span class="line">  * 以阻塞的方式，等待thread指定的线程结束</span><br><span class="line">    * 当函数返回时，被等待线程的资源被回收</span><br><span class="line">    * 若线程已经结束，该函数立即返回</span><br><span class="line">  * 参数：</span><br><span class="line">    * thread : 线程标识符，线程id</span><br><span class="line">    * retval：指向一个指向被连接线程的返回码的指针的指针</span><br><span class="line">  * 返回值，0成功，错误号失败</span><br><span class="line">* &gt; 在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到pthread_join()方法了。</span><br><span class="line">  &gt; 即pthread_join()的作用可以这样理解：主线程等待子线程的终止。也就是在子线程调用了pthread_join()方法后面的代码，只有等到子线程结束了才能执行。</span><br><span class="line">  &gt;</span><br><span class="line">* 如果没有加pthread_join()方法，main线程里面直接就执行起走了，加了之后是等待线程执行了之后才执行的后面的代码。</span><br><span class="line"></span><br><span class="line">![image-20210505195248476](E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210505195248476.png)</span><br><span class="line"></span><br><span class="line">![image-20210505195202511](E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210505195202511.png)</span><br><span class="line"></span><br><span class="line"># 2 用共享内存的多进程实现生产者消费者问题</span><br><span class="line"></span><br><span class="line">## .1 前置知识</span><br><span class="line"></span><br><span class="line">### 2.1.1 共享内存</span><br><span class="line"></span><br><span class="line">  共享内存是不同进程间为了通信而申请的可以被不同进程共同访问的内存区域。在Linux 中，共享内存的相关API由POSIX提供。</span><br><span class="line"></span><br><span class="line">\1. shmget函数：</span><br><span class="line"></span><br><span class="line">函数原型：int shmget(key_t key, size_t size, int shmflg);</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line"></span><br><span class="line">  Key: 用于共享内存命名，不同进程通过key进行共享内存识别;</span><br><span class="line"></span><br><span class="line">  Size: 需要的共享内存大小；</span><br><span class="line"></span><br><span class="line">  shmflg: 权限标志。Key标识的内存不存在时，该参数为IPC_CREAT。</span><br><span class="line"></span><br><span class="line">\2. shmat 函数：创建完共享内存后，不能被进程访问，需要调用shmat启动该共享内存的访问，并把共享内存连接到当前进程的地址空间</span><br><span class="line"></span><br><span class="line">函数原型：void *shmat(int shm_id, const void *shm_addr, int shmflg);</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line"></span><br><span class="line">  Shm_id: shmget返回的描述符</span><br><span class="line"></span><br><span class="line">  Shm_addr: 指定共享内存链接到当前进程中的地址位置，通常为空，让系统自己选择</span><br><span class="line"></span><br><span class="line">  Shmflg: 标志位，通常为0</span><br><span class="line"></span><br><span class="line">\3. shmctl 函数：控制共享内存</span><br><span class="line"></span><br><span class="line">函数原型：int shmctl(int shm_id, int command, struct shmid_ds *buf);</span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line"></span><br><span class="line">  Shm_id: 同上</span><br><span class="line"></span><br><span class="line">  Command: 要采取的操作</span><br><span class="line"></span><br><span class="line">  Buf: 结构体指针，指向共享内存的 shmid_ds 结构。</span><br><span class="line"></span><br><span class="line">### 2.1.2 信号量</span><br><span class="line"></span><br><span class="line">    信号量是一个特殊的变量，程序对其访问都是原子操作，且只允许对它进行等待（即P(信号变量))和发送（即V(信号变量))信息操作。最简单的信号量是只能取0和1的变量，这也是信号量最常见的一种形式，叫做二进制信号量。而可以取多个正整数的信号量被称为通用信号量。</span><br><span class="line"></span><br><span class="line">Linux中对信号量的操作在我们小组的课题《Linux中信号量的实现机制》中详细讲过，接下来简单介绍：</span><br><span class="line"></span><br><span class="line">函数semget创建一个新信号量或取得一个已有信号量；</span><br><span class="line"></span><br><span class="line">函数semop 对信号量进行操作；</span><br><span class="line"></span><br><span class="line">函数 semctl 控制信号量的销毁等</span><br><span class="line"></span><br><span class="line">## 2.2 思路</span><br><span class="line"></span><br><span class="line">  该 Task 涉及进程管理和进程间共享内存通信，可将main函数当成主进程，fork出多个子进程，并负责创建共享内存和信号量。将子进程分为两部分，生产者和消费者，通过信号量对共享内存进行互斥读写。</span><br><span class="line"></span><br><span class="line">  生产者和消费者的操作都类似于Task1中的操作，不再赘述。</span><br><span class="line"></span><br><span class="line"># 3 测试有名/匿名，共有/私有内存映射</span><br><span class="line"></span><br><span class="line">## 内存映射</span><br><span class="line"></span><br><span class="line">## .1 前置知识</span><br><span class="line"></span><br><span class="line">    内存映射 mmap 是Linux 内核的一个重要机制，和虚拟内存管理以及文件IO都有直接关系。</span><br><span class="line"></span><br><span class="line">  Linux 的虚拟内存管理是基于 mmap 实现的，vm_area_struct 在mmap 创建时创建，代表了一段连续的虚拟地址，这些虚拟地址相应的映射到一个后备文件或者匿名文件的虚拟页。一个vm_area_struct映射到一组连续的页表项，页表项映射物理内存page frame，这样文件和物理内存页相映射。</span><br><span class="line"></span><br><span class="line">### 3.1.1 mmap 和 虚拟内存管理</span><br><span class="line"></span><br><span class="line">  Linux内核的用户进程虚拟内存管理：内核定义了mm_struct 结构表示一个用户进程的虚拟内存地址空间。</span><br><span class="line"></span><br><span class="line">  mm**_**struct**结构**：</span><br><span class="line"></span><br><span class="line">    ![image-20210507110545709](E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210507110545709.png)</span><br><span class="line"></span><br><span class="line">\1.  start_code, end_code: 指定了进程的代码段的边界；</span><br><span class="line"></span><br><span class="line">\2.  start_data, end_data: 指定了进程数据段的边界；</span><br><span class="line"></span><br><span class="line">\3.  start_brk指定了堆的起始地址; brk指定了堆的结束位置；</span><br><span class="line"></span><br><span class="line">\4.  start_stack: 指定了站的起始位置；</span><br><span class="line"></span><br><span class="line">\5.  mmap_base: 指定了用户进程虚拟地址空间中 用作内存映射部分的地址的基地址，</span><br><span class="line"></span><br><span class="line">\6.  task_size: 指定了用户进程地址空间的长度。</span><br><span class="line"></span><br><span class="line">进程的mm_struct 除了包含**进程虚拟内存地址空间布局**，还包含了**虚拟内存区域**vm_area_struct信息。虚拟内存区域是内核管理用户进程虚拟地址空间的方式，数据段、代码段、共享库等都是通过vm_area_atruct管理。</span><br><span class="line"></span><br><span class="line">vm_area_struct结构：</span><br><span class="line"></span><br><span class="line"> ![image-20210507110550648](E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210507110550648.png)</span><br><span class="line"></span><br><span class="line">\1. vm_start, vm_end表示区域的开始位置和结束位置，确定了区域的边界。两个vm_area_struct不会出现交叉的情况</span><br><span class="line"></span><br><span class="line">\2. vm_page_prot 表示这个区域的页的访问权限</span><br><span class="line"></span><br><span class="line">\3. shared结构处理有后备文件的内存映射，和后备文件的address_space地址空间关联起来</span><br><span class="line"></span><br><span class="line">\4. anon_vma_node, anon_vma处理匿名文件共享内存映射的情况，映射到同一物理内存页的映射都保存在一个链表中</span><br><span class="line"></span><br><span class="line">\5. vm_pgoff, vm_file都是处理有后备文件内存映射的情况，获得该映射在文件的页偏移量，以及打开文件file实例的信息</span><br><span class="line"></span><br><span class="line">## 3.2 mmap 的四种类型</span><br><span class="line"></span><br><span class="line">mmap分为**后备文件的映射**和**匿名文件的映射**，这两种映射又有**私有映射和共享映射**之分，所以mmap可以创建4种类型的映射</span><br><span class="line"></span><br><span class="line">\1. **后备文件的共享映射**，多个进程的vm_area_struct指向同一个物理内存区域，一个进程对文件内容的修改，会被其他进程可见。对文件内容的修改会被写回到后备文件。</span><br><span class="line"></span><br><span class="line"> ![image-20210507110514289](E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210507110514289.png)</span><br><span class="line"></span><br><span class="line">\2. **后备文件的私有映射**，多个进程的vm_area_struct指向同一个物理内存区域，采用写时拷贝的方式，当一个进程对文件内容做修改，不会被其他进程看到。另外对文件内的修改也不会被写回到后备文件。当内存不够需要进行页回收时，私有映射的页被交换到交换区。一般用在加载共享代码库</span><br><span class="line"></span><br><span class="line"> ![image-20210507110518143](E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210507110518143.png)</span><br><span class="line"></span><br><span class="line">\3. **匿名文件的共享映射**，内核创建一个初始都是0的物理内存区域，然后多个进程的vm_area_struct指向这个共享的物理内存区域，对该区域内容的修改对所有进程可见。匿名文件在页回收时被交换到交换区</span><br><span class="line"></span><br><span class="line"> ![image-20210507110530695](E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210507110530695.png)</span><br><span class="line"></span><br><span class="line">\4. **匿名文件的私有映射**，内核创建一个初始都是0的物理内存区域，对该区域内容的修改只对创建者进程可见。匿名文件在页回收时被交换到交换区。malloc()底层是用了匿名文件的私有映射来分配大块内存。</span><br><span class="line"></span><br><span class="line"> ![image-20210507110535432](E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210507110535432.png)</span><br><span class="line"></span><br><span class="line"># 4 共享库的创建和使用</span><br><span class="line"></span><br><span class="line">## 4.1 前置知识：源代码到运行程序的过程</span><br><span class="line"></span><br><span class="line">1. 预处理：对所有预处理指令进行处理。以#开始的语句</span><br><span class="line">2. 编译：通常指 程序构建的过程，称为 `compilation proper`, 将c源代码文件转换成object文件</span><br><span class="line">3. 连接：将 object文件和库 串联起来，称为可执行程序</span><br><span class="line">   1. 静态库已经植入程序中</span><br><span class="line">   2. 共享库，只在程序中对其引用</span><br><span class="line">4. 加载：加载 发生在可执行程序启动时。</span><br><span class="line">   1. 首先，扫描程序，来引用共享库</span><br><span class="line">   2. 然后所有引用都立即生效，对应的库也被映射到程序中</span><br><span class="line"></span><br><span class="line">* 一个程序函数库：一个文件包含了一些编译好的代码和数据，可供其他程序使用</span><br><span class="line">* 可以使得整个程序更加模块化，更容易重新编译，方便升级</span><br><span class="line">* 程序函数库分为3类：</span><br><span class="line">  * 静态函数库(static libraries): 在程序执行前就加入到了目标程序中</span><br><span class="line">  * 共享函数库(shared libraries)：`.so`</span><br><span class="line">  * 动态加载函数库(dynamically loaded libraries)：`.dll`, 与共享函数库是一样的，在l Windows 中叫动态加载函数库</span><br><span class="line"></span><br><span class="line">## 4.2 静态函数库</span><br><span class="line"></span><br><span class="line">### 4.2.1 生成静态函数库</span><br><span class="line"></span><br><span class="line">* 简单的一个普通的目标文件的集合，`.a`后缀文件</span><br><span class="line">* 允许程序员把程序 link 起来而不用重新编译代码，节省了重新编译代码的时间</span><br><span class="line">  * 如今该优势不再那么明显</span><br><span class="line">* 静态函数库对开发者来说还是很有用的，例如你想把自己提供的函数给别人使用，但是又想对函数的源代码进行保密</span><br><span class="line">* 理论上说，使用ELF格式的静态库函数生成的代码可以比使用共享函数库（或者动态函数库）的程序运行速度上快一些，大概1－5％。</span><br><span class="line">* `ar rcs my_library.a file.o file1.o`</span><br><span class="line"></span><br><span class="line">### 4.2.2 使用静态函数库</span><br><span class="line"></span><br><span class="line">* 把它作为你编译和连接过程中的一部分用来生成你的可执行代码</span><br><span class="line">* 用gcc来编译产生可执行代码的话，你可以用“-l”参数来指定这个库函数。你也可以用ld来做，使用它的“-l”和“-L”参数选项。具体用法可以参考info:gcc。</span><br><span class="line"></span><br><span class="line">## 4.3 共享函数库</span><br><span class="line"></span><br><span class="line">* **作用：**共享函数库中的函数是在当一个可执行程序在启动的时候被加载</span><br><span class="line">* 如果一个共享函数库正常安装，所有的程序在重新运行的时候都可以自动加载最新的函数库中的函数。对于Linux系统还有更多可以实现的功能：</span><br><span class="line">  * 升级了函数库但是仍然允许程序使用老版本的函数库</span><br><span class="line">  * 当执行某个特定程序的时候可以覆盖某个特定的库或者库中指定的函数</span><br><span class="line">  * 可以在库函数被使用的过程中修改这些函数库</span><br><span class="line"></span><br><span class="line">### 4.3.1 约定</span><br><span class="line"></span><br><span class="line">* 为了编写的共享函数库支持所有有用的特性，必须遵循一系列约定</span><br><span class="line"></span><br><span class="line">#### 4.3.1.1 命名</span><br><span class="line"></span><br><span class="line">* 每个共享函数库的**特殊名字**, 称作 `soname`</span><br><span class="line">  * 以 `lib`为前缀，然后是函数名</span><br><span class="line">  * 以 `.so`为后缀</span><br><span class="line">  * 最后是版本号信息</span><br><span class="line">* 特例：非常底层的C库函数都不是以lib开头命名</span><br><span class="line">* 每个共享函数库都有一个**真正名字**，称为 `real name`</span><br><span class="line">  * 包含真正函数代码的文件</span><br><span class="line">  * 真名有一个主版本号和一个发行主版号（可有可无）</span><br><span class="line">    * 知道安装了什么版本的函数库</span><br><span class="line">* 还有一个名字，**编译器编译时需要的函数库名字**：简单的soname，不包含任何版本号信息</span><br><span class="line"></span><br><span class="line">## 4.4 函数库如何使用</span><br><span class="line"></span><br><span class="line">* 基于GNU glibc的系统中，启动一个ELF格式的二进制可执行文件，会自动启动和运行一个program loader</span><br><span class="line"></span><br><span class="line">  * 对于Linux 系统，loader的名字是 `/lib/ld-linux.so.X（版本号）`</span><br><span class="line">  * loader启动后，会load 其他本程序要使用的共享库</span><br><span class="line"></span><br><span class="line">## 4.5 创建一个共享库</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line"></span><br><span class="line">* `foo.h`: 定义接口，连接动态库</span><br><span class="line"></span><br><span class="line">  * ![image-20210506205836103](E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210506205836103-1620305918992.png)</span><br><span class="line">  * ```</span><br><span class="line">    #ifndef foo_h__</span><br><span class="line">    #define foo_h__</span><br><span class="line"></span><br><span class="line">    extern void foo(void);</span><br><span class="line"></span><br><span class="line">    #endif  // foo_h__</span><br></pre></td></tr></table></figure></li>
<li><p><code>foo.c</code>：对接口foo()的实现</p>
<ul>
<li><img src="E:\4th_term\操作系统OS\Lab1\lab1.assets\image-20210506205941576.png" alt="image-20210506205941576"></li>
<li>```<br>#include &lt;stdio.h&gt;</li>
</ul>
</li>
</ul>
<pre><code>void foo(void)
&#123;
    puts(&quot;Hello, I&#39;m a shared library&quot;);
&#125;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* `main.c`： 库的驱动程序</span><br><span class="line"></span><br><span class="line">  * ```</span><br><span class="line">    #include &lt;stdio.h&gt;</span><br><span class="line">    #include &quot;foo.h&quot;</span><br><span class="line"></span><br><span class="line">    int main(void)</span><br><span class="line">    &#123;</span><br><span class="line">        puts(&quot;This is a shared library test...&quot;);</span><br><span class="line">        foo();</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<ul>
<li><p>首先，编译位置无关代码，即创建object文件</p>
<ul>
<li>通过 <code>gcc -fPIC</code>参数加入到共享函数库中：<code>PIC</code>: 位置无关代码</li>
</ul>
</li>
<li><p>然后，将对象文件创建共享库，</p>
</li>
<li><p>例如：创建a.0, b.o, 然后创建一个包含a.o, b.o的共享库</p>
<ul>
<li><code>gcc -fPIC -g -c -Wall a.c</code></li>
<li><code>gcc -fPIC -g -c -Wall b.c</code></li>
<li><code>gcc -shared -WL -libmath.so -o  a.o b.o -lc</code></li>
</ul>
</li>
<li><p>通常，动态函数库的符号表里面包含了这些动态的对象的符号。这个选项在创建ELF格式的文件时候，会将所有的符号加入到动态符号表中。可以参考ld的帮助获得更详细的说明。</p>
</li>
</ul>
<h2 id="4-6-安装和使用共享库"><a href="#4-6-安装和使用共享库" class="headerlink" title="4.6 安装和使用共享库"></a>4.6 安装和使用共享库</h2><h3 id="方法一：将共享库拷贝入标准目录-usr-lib或-usr-local-lib"><a href="#方法一：将共享库拷贝入标准目录-usr-lib或-usr-local-lib" class="headerlink" title="方法一：将共享库拷贝入标准目录(/usr/lib或/usr/local/lib)"></a>方法一：将共享库拷贝入标准目录(/usr/lib或/usr/local/lib)</h3><ul>
<li>需要有权限</li>
<li>使得系统上所有用户都可以使用该共享库</li>
</ul>
<p>方法：</p>
<ul>
<li><p>首先，以root权限，将库放到标准位置（/usr/lib或/usr/local/lib）</p>
<ul>
<li><code>sudo cp /home/zihao/task4/libfoo.so /usr/lib</code></li>
</ul>
</li>
<li><p>然后，以root权限更新缓存，告诉加载器 库文件可用，</p>
<ul>
<li><code>sudo ldconfig</code>: 检查一块存在的库文件，然后创建soname符号链接到真正的函数库</li>
<li>将创建链接到共享库，并且更新缓存以便可立即生效</li>
<li>使用 <code>ldconfig -p | grep foo</code>，核实创建了链接</li>
</ul>
</li>
<li><p>其次，重新连接可执行程序</p>
<ul>
<li><code>gcc -Wall -o main.c -lfoo</code></li>
</ul>
</li>
<li><p>最后，运行程序</p>
<ul>
<li><code>./test</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>XDU OS课程设计</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>专题一内核编译</title>
    <url>/p/d1d6ca89.html</url>
    <content><![CDATA[<ul>
<li><blockquote>
<p> <strong>作业要求：</strong></p>
<p> 完成本专题教学内容中的验收测试题并提交验收材料。</p>
<p> 验收材料要求:</p>
<p> <strong>新内核引导成功前</strong>：</p>
<p> \1. 执行命令：<code>uname –a</code>,提交<strong>截屏结果1</strong></p>
<p> <img src="E:\Hexo\Blog\source_posts\专题一内核编译\image-20210514211226158-1620997948493.png" alt="image-20210514211226158"></p>
<p> <strong>新内核引导成功后</strong>：</p>
<p> \2. 执行命令：<code>uname –a</code>,提交<strong>截屏结果2</strong></p>
<p> <img src="E:\Hexo\Blog\source_posts\专题一内核编译.assets\image-20210514222101971-1621002063317.png" alt="image-20210514222101971"></p>
<p> \3. 进入目录/boot，执行命令：ls -l,提交<strong>截屏结果3</strong></p>
<p> <img src="E:\Hexo\Blog\source_posts\专题一内核编译.assets\image-20210514222213871.png" alt="image-20210514222213871"></p>
</blockquote>
</li>
<li><p><strong>==tips:==</strong>  在创建虚拟机时，最好分配 50 GB 以上从磁盘空间，四个以上内核</p>
</li>
<li><p><strong>最重要的是</strong>：分配 4 GB 以上的内存，防止在内存中死锁</p>
</li>
<li><p><strong>最最重要的是</strong>：新版本的 Linux 内核<code>make install</code>安装后，<strong>不再需要</strong>手动引导内核！！！即不再需要配置 grub</p>
</li>
</ul>
<h1 id="1-知识点-什么是-Linux-内核"><a href="#1-知识点-什么是-Linux-内核" class="headerlink" title="1 [知识点]什么是 Linux 内核"></a>1 [知识点]什么是 Linux 内核</h1><ul>
<li><p><strong>操作系统的结构</strong></p>
<ul>
<li><p><img src="E:\4th_term\OS课设\课题一\专题一.assets\image-20210511210840223.png" alt="image-20210511210840223"></p>
</li>
<li><p>操作系统：Kernel + Shell</p>
</li>
</ul>
</li>
<li><p><strong>Kernel的组成和功能</strong>：</p>
<ul>
<li><img src="E:\4th_term\OS课设\课题一\专题一.assets\image-20210511211233011.png" alt="image-20210511211233011"></li>
</ul>
</li>
<li><p>Linux <strong>发行版本</strong>和<strong>内核版本</strong>之间的关系：</p>
<ul>
<li>例如教学视频中：<code>Ubuntu10.04</code> = <code>Kernel2.6.30</code> + <code>SHELL</code> + <code>USERS APPLICATIONS</code></li>
<li>两者独立</li>
</ul>
</li>
<li><p>本次课程设计我选择的<strong>发行版本</strong>是 <code>Ubuntu20.04.20</code></p>
<ul>
<li>其<strong>内核版本</strong>：用命令<code>uname -r</code><ul>
<li><code>5.8.0-50-generic</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="2-实验-从内核源码-到-内核镜像-Kernel-Image"><a href="#2-实验-从内核源码-到-内核镜像-Kernel-Image" class="headerlink" title="2 [实验] 从内核源码 到 内核镜像(Kernel Image)"></a>2 [实验] 从内核源码 到 内核镜像(Kernel Image)</h1><h2 id="实验准备"><a href="#实验准备" class="headerlink" title="实验准备"></a>实验准备</h2><p>当前Linux内核版本为<code>5.8.0-50</code></p>
<p>从<a href="https://www.kernel.org/">内核版本</a>官网下载另一个内核版本:</p>
<ul>
<li>版本号尾号为偶数的是stable版的，所以我选择<code>5.12.2</code></li>
</ul>
<p><em>tips:</em> 直接点击屎黄色按钮下载很慢，可以将下载链接复制至自己喜欢的下载软件下载<code>IDM</code></p>
<h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><p><strong>实验要求</strong>： 利用<code>make menuconfig</code>的配置功能，配置并编译信息中带有自己<strong>学号加姓名</strong>的内核</p>
<h3 id="1-安装相应的软件包"><a href="#1-安装相应的软件包" class="headerlink" title="1 安装相应的软件包"></a>1 安装相应的软件包</h3><p><strong>步骤</strong></p>
<ul>
<li><p>手动或终端解压<code>package</code></p>
</li>
<li><p><code>.deb</code> 离线安装包</p>
<ul>
<li>老版本的发行版在线安装比较麻烦</li>
</ul>
</li>
<li><p><code>sudo bash ./INSTALL.sh</code>: 执行安装脚本</p>
</li>
</ul>
<blockquote>
<p><strong>遇到的问题</strong>：相关依赖下载安装</p>
<ol start="0">
<li><p>可以先更换国内源</p>
<ol>
<li>在 <em>软件和更新</em> 选择 <code>最佳的服务器</code></li>
<li><img src="E:\4th_term\OS课设\课题一\专题一.assets\image-20210512163243691-1620808365518.png" alt="image-20210512163243691" style="zoom:50%;" /></li>
</ol>
</li>
<li><p>在执行 INSTALL.sh 时，许多警告，缺少依赖等</p>
</li>
</ol>
<ol>
<li>百度找到 Ubuntu20.04 编译内核所需要的依赖</li>
<li>首更新<code>sudo apt-get update &amp;&amp; sudo apt-get upgrade</code></li>
<li><code>sudo apt-get install libelf-dev</code></li>
<li><code>sudo apt-get install libncurses5-dev libssl-dev</code></li>
<li><code>sudo apt-get install build-essential openssl</code></li>
<li><code>sudo apt-get install libidn11-dev libidn11</code></li>
<li><code>sudo apt-get install zlibc minizip</code></li>
<li><code>sudo apt-get install bison</code></li>
<li><code>sudo apt-get install flex</code></li>
<li><code>sudo apt-get install pkg-config</code><ol start="11">
<li><code>sudo apt-get install libssl-dev</code></li>
</ol>
</li>
</ol>
</blockquote>
<h3 id="2-拷贝源码包至-usr-src并解压"><a href="#2-拷贝源码包至-usr-src并解压" class="headerlink" title="2 拷贝源码包至/usr/src并解压"></a>2 拷贝源码包至<code>/usr/src</code>并解压</h3><ul>
<li>需要用 root 用户权限将源码包拷入标准路径<code>/usr/src</code></li>
<li>解压命令 <code>sudo tar xfv xxx </code><ul>
<li>解压七万多个文件(.c .h文件)</li>
</ul>
</li>
</ul>
<blockquote>
<p>遇到的问题：</p>
<p>需要重新安装VMware tools</p>
<ol>
<li>首先将压缩包移动至 usr/local`</li>
<li>然后使用<code>tar -zxvf xxx </code>解压</li>
<li>进入vmware-tools-distrib, 使用<code>sudo ./vmware-install.pl</code>命令安装</li>
<li>手动启动<code>vmware-user</code></li>
</ol>
</blockquote>
<h3 id="3-进入源码所在目录"><a href="#3-进入源码所在目录" class="headerlink" title="3 进入源码所在目录"></a>3 进入源码所在目录</h3><ul>
<li>按照功能分</li>
<li>Makefile</li>
</ul>
<h3 id="4-执行一系列-make-指令"><a href="#4-执行一系列-make-指令" class="headerlink" title="4 执行一系列 make 指令"></a>4 执行一系列 make 指令</h3><blockquote>
<p>==tips:== 可以使用多核进行编译<code>make -j x   </code>: x为核心数，不能超过自己的核心数，省略则使用最多数</p>
</blockquote>
<ul>
<li><strong>步骤一：</strong><code>make menuconfig -j x</code><ul>
<li>进入<strong>配置菜单</strong><ul>
<li><code>[ ]</code> : 编译入内核</li>
<li><code>[*]</code>：可选</li>
<li><code>[M]</code>： 编译为内核模块</li>
</ul>
</li>
<li><strong>必须</strong>改：在 <code>General setup</code> ——&gt;<code>Local version</code>：加入<code>学号加姓名</code></li>
</ul>
</li>
</ul>
<blockquote>
<p><strong>遇到的错误：</strong></p>
<p><code>Your display is too small to run Menuconfig! It must be at least 19 lines by 80 columns. make[1]: *** [scripts/kconfig/Makefile:34：menuconfig] 错误 1 make: *** [Makefile:602：menuconfig] 错误 2</code></p>
<ul>
<li>第一个问题似乎是终端窗口太小，最大化试试</li>
<li>最大化之后再将比例缩小即可</li>
</ul>
</blockquote>
<blockquote>
</blockquote>
<ul>
<li><strong>步骤二：</strong> <code>make -j x</code> (x为分配的内核数)：<code>.c</code>编译为<code>.o</code><ul>
<li>一到两小时<ul>
<li>可以用多内核减少一些时间</li>
</ul>
</li>
<li><strong>快照</strong>：保存当前系统的状态，随时可以恢复载入改状态</li>
<li>编译finished后，目录下产生：<code>vmlinux.o</code> 目标文件和<code>vmlinux</code> 可执行文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>make之后报错：<code>scripts/sign-file.c:25:10: fatal error: openssl/opensslv.h: 没有那个文件或目录    25 | #include &lt;openssl/opensslv.h&gt;       |          ^~~~~~~~~~~~~~~~~~~~ compilation terminated.</code></p>
<ul>
<li>解决：<code>sudo apt-get install libssl-dev</code></li>
<li>应提前安装</li>
</ul>
</blockquote>
<ul>
<li><strong>步骤三</strong>：<code>make modules_install -j x</code><ul>
<li>编译为动态链接库<code>.ko</code><ul>
<li><code>driver</code></li>
<li><code>fs</code></li>
<li><code>sound</code></li>
<li><code>lib</code></li>
</ul>
</li>
<li>将<code>.ko</code>（类似于动态库）移动至标准目录</li>
</ul>
</li>
</ul>
<blockquote>
<p>make modules_install报错：</p>
<p><code>sed: 无法读取 modules.order: 没有那个文件或目录 make: *** [Makefile:1471：_modinst_] 错误 2</code></p>
<ul>
<li>问题解决：<ul>
<li><code>make[1]: *** 没有规则可制作目标“debian/canonical-certs.pem”由“certs/x509_certificate_list” 需求。 停止。 make: *** [Makefile:1851：certs] 错误 2</code><ul>
<li>solution :<ul>
<li><code>vi .config</code></li>
<li><code>/</code>搜索<code>CONFIG_SYSTEM_TRUSTED_KEYS</code>，将里面内容清空</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</blockquote>
<ul>
<li><strong>步骤四</strong>：<code>make install -j x</code><ul>
<li>执行<code>.sh</code>脚本：将内核镜像移动至 <code>boot</code> 引导目录<ul>
<li>用引导程序将内核镜像引导起来</li>
</ul>
</li>
<li>执行完命令后：<ul>
<li>三个以 <code>学号姓名</code> 为后缀的文件是引导所需要的</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Warning: </p>
<p><code>dpkg: warning: version &#39;5.12.2mazihao_19030500024~old&#39; has bad syntax: invalid character in version number dpkg: warning: version &#39;5.12.2mazihao_19030500024~old&#39; has bad syntax: invalid character in version number</code></p>
<ul>
<li>solution: </li>
</ul>
</blockquote>
<ul>
<li>注意：新版本（我的是5.12.2）的Linux内核，不需要手动引导内核，<ul>
<li>make install 之后直接重启即可</li>
</ul>
</li>
</ul>
<h1 id="3-知识点-GNU-make和makefile"><a href="#3-知识点-GNU-make和makefile" class="headerlink" title="3 [知识点] GNU make和makefile"></a>3 [知识点] GNU make和makefile</h1><h2 id="什么是-make"><a href="#什么是-make" class="headerlink" title="什么是 make"></a>什么是 make</h2><ul>
<li><code>make menuconfig</code>: 用命令行模式<strong>配置内核</strong></li>
<li><code>make</code>: 编译<strong>内核</strong>和<strong>模块</strong></li>
<li><code>make modules_install</code>: 安装<strong>模块</strong><ul>
<li>在<code>/lib/modules/内核版本</code> 对应的目录下，建立文件夹并把模块文件放入</li>
</ul>
</li>
<li><code>make install</code>: 安装<strong>内核</strong><ul>
<li>即拷贝入<code>/boot</code>目录下</li>
</ul>
</li>
</ul>
<h2 id="什么是makefile"><a href="#什么是makefile" class="headerlink" title="什么是makefile"></a>什么是makefile</h2><ul>
<li>告诉 make 命令如何去编译</li>
</ul>
<blockquote>
<p><strong>makefile</strong>文件保存了 <strong>编译器和连接器的参数选项</strong>, 还表述了<strong>所有源文件之间的关系(<strong>源代码文件需要的</strong>特定的包含文件</strong>,可执行文件要求包含的目标文件模块及库等).</p>
<p><strong>创建程序(make程序</strong>) 首先读取makefile文件, 然后再激活编译器,汇编器,资源编译器和连接器以便产生最后的输出, 最后输出并生成的通常是可执行文件.</p>
<p>创建程序利用内置的推理规则来激活编译器,以便通过对特定<code>CPP</code>文件的编译来产生特定的OBJ文件. </p>
</blockquote>
<h2 id="makefile-规则"><a href="#makefile-规则" class="headerlink" title="makefile 规则"></a>makefile 规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">target ... :prerequisites ...</span><br><span class="line">		recipe</span><br><span class="line">		...</span><br><span class="line">		...</span><br></pre></td></tr></table></figure>



<h2 id="Makefile-demo-使用规则"><a href="#Makefile-demo-使用规则" class="headerlink" title="Makefile demo 使用规则"></a>Makefile demo 使用规则</h2><h2 id="试读内核源码的Makefile"><a href="#试读内核源码的Makefile" class="headerlink" title="试读内核源码的Makefile"></a>试读内核源码的Makefile</h2><h1 id="4-知识点-操作系统启动"><a href="#4-知识点-操作系统启动" class="headerlink" title="4 [知识点] 操作系统启动"></a>4 [知识点] 操作系统启动</h1><h2 id="操作系统-引导过程"><a href="#操作系统-引导过程" class="headerlink" title="操作系统 引导过程"></a>操作系统 引导过程</h2><ol>
<li>电脑开机后， 启动 <strong>BIOS</strong> , BIOS <strong>自检</strong></li>
<li>自检后，BIOS 找到硬盘上的<strong>主引导记录</strong> <strong>MBR</strong></li>
<li><strong>MBR</strong> 读取<strong>硬盘分区表 DPT</strong> ，找到活动分区中的<strong>分区引导记录 PBR</strong>，将控制权交给 <strong>PBR</strong></li>
<li><strong>PBR</strong> 搜索活动分区中的<strong>启动管理器</strong> <strong>bootmgr</strong> （Linux下是<strong>Grub</strong>，grub.conf , windows下是），将控制权交给 bootmgr</li>
<li><strong>bootmgr</strong> 寻找 boot 文件夹中的 <strong>BCD 文件（启动配置数据）</strong></li>
<li>找到 BCD 后，<strong>bootmgr</strong> 首先从 BCD 中读取启动管理器 <strong>bootmgr</strong> 菜单信息，在显示器上显示多操作系统选择画面</li>
<li>如果存在多个操作系统并且系统设置的等待时间不是0，就会显示多个操作系统。若无，则直接进入</li>
<li>进入系统后，<strong>bootmgr</strong> 会读取 BCD 中win7系统所在的盘的<code>winload.exe</code> 文件，将控制器交给</li>
<li>winload.exe 加载win7 内核、硬件、服务等，之后加载桌面等信息，从而启动整个系统</li>
</ol>
<h2 id="启动管理程序-grub"><a href="#启动管理程序-grub" class="headerlink" title="启动管理程序 grub"></a>启动管理程序 grub</h2><ul>
<li><code>grub.conf</code><ul>
<li>需要改配置正确才能启动</li>
</ul>
</li>
</ul>
<h1 id="5-实验-Linux-内核的引导"><a href="#5-实验-Linux-内核的引导" class="headerlink" title="5 [实验] Linux 内核的引导"></a>5 [实验] Linux 内核的引导</h1><p>引导前：</p>
<p><img src="E:\4th_term\OS课设\课题一\专题一内核编译.assets\image-20210514102943927.png" alt="image-20210514102943927"></p>
<blockquote>
<p>内核 make install成功后</p>
</blockquote>
<p>==<strong>注意：</strong>==</p>
<p>新版本的<code>Ubuntu</code> 不再需要手动引导内核（知道真相的我眼泪流下来，需要将内存分配至4GB以上）</p>
<p>然后，<code>make install</code>之后，直接<code>reboot</code></p>
<p><del>首先：将内核作为引导，数字改为自己编译的版本号：</del></p>
<ul>
<li><del><code>sudo update-initramfs -c -k 5.12.2mzh19030500024</code></del></li>
</ul>
<p><del>然后，更新 grub：</del></p>
<ul>
<li><del><code>sudo update-grub</code></del></li>
</ul>
<p><del>之后，修改 grub文件：</del></p>
<ul>
<li><del><code>sudo gedit /etc/default/grub</code></del></li>
<li><del><img src="https://img2018.cnblogs.com/i-beta/1653979/201911/1653979-20191112233306483-1954394758.png" alt="img"></del></li>
</ul>
<p><del>然后，执行<code>sudo update-grub</code></del></p>
<p><del>最后重启，选择<strong>advanced</strong>，选择编译好的内核</del></p>
<ul>
<li><del>步骤一：<code>sudo mkinitramfs -o /boot/initrd.img-5.12.2</code></del></li>
<li><del>步骤二：<code>sudo update-initramfs -c -k 5.12.2</code></del><ul>
<li><del>在boot目录下产生<code>init</code></del></li>
</ul>
</li>
<li><del>步骤三：<code>sudo update-grub2 </code></del><ul>
<li><del>自动修改系统引导配置，产生grub.cfg启动文件。</del></li>
<li><del>后grub.cfg文件中增加了新内核的启动项</del></li>
</ul>
</li>
<li><del>步骤三：<code>reboot</code></del> </li>
<li><del>选择新版本内核</del></li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>XDU OS课程设计</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>编译</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>专题三内核模块</title>
    <url>/p/69488089.html</url>
    <content><![CDATA[<blockquote>
<p><strong>实验要求：</strong></p>
<p><strong>题目一</strong> 编写一个内核模块； 编译该模块； 加载、卸载该模块；</p>
<p><strong>题目二</strong> 用<strong>内核模块</strong>的方式为系统添加一个系统调用 具体要求同专题二</p>
<p><strong>提交内容</strong>：</p>
<p>​        <strong>内核模块加载/卸载截图</strong></p>
<p><strong>评分标准</strong>： 至少完成题目一（60-80分） 自主完成题目二（90-100分）</p>
</blockquote>
<h1 id="1-内核模块概念"><a href="#1-内核模块概念" class="headerlink" title="1 内核模块概念"></a>1 内核模块概念</h1><ul>
<li>是一段可以 动态加入内核，并且成为内核一部分的代码</li>
<li>优点：<ul>
<li>通过动态加载内核模块，使得在运行过程中扩展内核的功能</li>
<li>减小内核映像大小，增加系统灵活性</li>
<li>只需要修改内核，而不必重新编译整个内核</li>
</ul>
</li>
</ul>
<h1 id="2-内核模块相关命令"><a href="#2-内核模块相关命令" class="headerlink" title="2 内核模块相关命令"></a>2 内核模块相关命令</h1><ul>
<li>加载内核模块：<ul>
<li><code>#insmod module_name</code></li>
</ul>
</li>
<li>卸载内核模块：<ul>
<li><code>#rmmod module_name</code></li>
<li>或者 <code>#modprobe -r module_name</code></li>
</ul>
</li>
<li>查看系统已经加载的模块：<ul>
<li><code>#lsmod</code></li>
</ul>
</li>
<li>查看系统已经加载的模块信息：<ul>
<li><code>#modinfo module_name</code></li>
</ul>
</li>
</ul>
<h1 id="3-内核模块的编写，例子"><a href="#3-内核模块的编写，例子" class="headerlink" title="3 内核模块的编写，例子"></a>3 内核模块的编写，例子</h1><p>内核模块源代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/init.h&gt;</span>			<span class="comment">//for module_init()</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/module.h&gt;</span>		<span class="comment">//mustbe included</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;linux/kernel.h&gt;</span>		<span class="comment">//for printk()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hello_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//模块入口函数</span></span><br><span class="line">    printk(<span class="string">&quot;Hello module\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">hello_exit</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="comment">//模块退出函数</span></span><br><span class="line">    printk(<span class="string">&quot;Goodbye module\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module_init(hello_init);</span><br><span class="line">module_exit(hello_exit);</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">&quot;GPL&quot;</span>);</span><br><span class="line">MODULE_AUTHOR(<span class="string">&quot;CHUHUA&quot;</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="内核模块说明"><a href="#内核模块说明" class="headerlink" title="内核模块说明"></a>内核模块说明</h2><ul>
<li><code>hello_init()</code>: 模块入口函数<ul>
<li>由<code>module_init()</code>宏指定</li>
<li>在模块被加载时被调用</li>
<li>返回值为0：成功，非零则失败</li>
</ul>
</li>
<li><code>hello_exit()</code>: 模块退出函数<ul>
<li>由<code>module_exit()</code>宏指定</li>
<li>在模块被卸载时被调用</li>
<li>作用：清完成资源的清理，被调用完毕后，模块就被卸载了</li>
</ul>
</li>
<li>一个模块至少有 入口 和 退出函数</li>
<li>宏<code>MODULE_LICENSE(&quot;GLP&quot;)</code>: 设置模块版权信息</li>
<li>宏<code>MODULE_DESCRIPTION()</code>: 描述模块的用途</li>
<li>宏``</li>
</ul>
<h1 id="4-通过-module-进行内核添加系统调用"><a href="#4-通过-module-进行内核添加系统调用" class="headerlink" title="4  通过 module 进行内核添加系统调用"></a>4  通过 module 进行内核添加系统调用</h1><p><a href="%5B(5%E6%9D%A1%E6%B6%88%E6%81%AF">参考博客</a> Linux/Ubuntu18.04 下添加系统调用的两种方法 (内核编译法｜模块添加)_Egqawkq的博客-CSDN博客](<a href="https://blog.csdn.net/egqawkq/article/details/88970390">https://blog.csdn.net/egqawkq/article/details/88970390</a>))</p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>XDU OS课程设计</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>专题二系统调用</title>
    <url>/p/6e049acd.html</url>
    <content><![CDATA[<blockquote>
<p><strong>实验要求：</strong></p>
<p> 为Linux内核增加一个<strong>系统调用</strong>，并编写<strong>用户进程的程序</strong>来测试。</p>
<p>要求<strong>该系统调用</strong>能够完成<strong>以下功能</strong>：</p>
<pre><code> (1) 该系统调用有1个整型参数，接收输入自己的学号；
       
 (2) 若参数为奇数，则返回自己学号的最后5位。如你的学号为16130120101 ，则返回20101；
       
 (3) 若参数为偶数，则返回自己的学号的最后6位。如你的学号为16130120102 ，则返回120102 。
</code></pre>
<p>提交内容为：</p>
<p>  <strong>截图1</strong>： 运行结果</p>
<p>  <strong>截图2</strong>：源代码</p>
</blockquote>
<h1 id="1-知识点-什么是系统调用"><a href="#1-知识点-什么是系统调用" class="headerlink" title="1 [知识点] 什么是系统调用"></a>1 [知识点] 什么是系统调用</h1><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>Linux 的<strong>运行空间</strong>：<strong>内核空间</strong> 和 <strong>用户空间</strong></p>
<ul>
<li>逻辑上相互隔离</li>
<li>用户进程通常情况下 不允许 访问<strong>内核数据</strong>，也无法使<strong>用内核函数</strong></li>
<li>内核 提供了 <strong>用户进程与内核进行交互的一组接口</strong>：用户进程可以通过这组接口来获得操作系统内核提供的服务</li>
</ul>
<h2 id="系统调用的作用"><a href="#系统调用的作用" class="headerlink" title="系统调用的作用"></a>系统调用的作用</h2><ul>
<li>提供<strong>用户模式</strong>的进程和硬件设备的<strong>接口</strong></li>
<li>保证<strong>系统的稳定和安全</strong></li>
<li>实现<strong>多任务和虚拟内存</strong></li>
</ul>
<h2 id="系统调用的分类"><a href="#系统调用的分类" class="headerlink" title="系统调用的分类"></a>系统调用的分类</h2><ul>
<li>控制硬件<ul>
<li>硬件资源 与 用户空间的抽象接口</li>
<li>读写文件：write/read</li>
</ul>
</li>
<li>进程管理<ul>
<li>保证系统中的进程能以<strong>多任务在虚拟内存环境下运行</strong></li>
<li>fork，clone，<code>execve</code></li>
</ul>
</li>
<li>设置系统状态或读取内核数据<br>* </li>
</ul>
<h2 id="系统调用和-API-接口"><a href="#系统调用和-API-接口" class="headerlink" title="系统调用和 API 接口"></a>系统调用和 API 接口</h2><ul>
<li>一般，应用程序通过 <strong>应用程序 API</strong>而不是 直接通过系统调用编程</li>
<li>应用程序使用的 应用程序API，不需要和内核提供的 系统调用 一一对应<ul>
<li>一个API 接口可以 用一个或多个 系统调用实现</li>
</ul>
</li>
</ul>
<h2 id="系统调用和系统命令"><a href="#系统调用和系统命令" class="headerlink" title="系统调用和系统命令"></a>系统调用和系统命令</h2><ul>
<li><strong>系统命令</strong>比<strong>应用程序接口</strong>更高一层</li>
<li>每一个系统命令都是一个可执行程序<ul>
<li>ls</li>
</ul>
</li>
<li><strong>系统命令</strong>的实现调用了系统调用</li>
<li><code>strace ls</code>可以 查看系统命令所调用的系统调用</li>
</ul>
<h2 id="系统调用与内核函数"><a href="#系统调用与内核函数" class="headerlink" title="系统调用与内核函数"></a>系统调用与内核函数</h2><ul>
<li><strong>内核函数</strong>只是在内核中实现的函数</li>
<li><strong>系统调用</strong> 是用户进入内核的接口层，本身不是内核函数，是由内核函数实现的</li>
<li>进入内核后，不同的系统调用 找到 各自对应的内核函数<ul>
<li>这些内核函数：系统调用的“服务例程”</li>
<li>Linux 系统调用 对应的 内核例程全部以”sys_” 开头：<code>sys_fork</code> </li>
</ul>
</li>
</ul>
<h1 id="2-知识点-系统调用实现原理"><a href="#2-知识点-系统调用实现原理" class="headerlink" title="2 [知识点] 系统调用实现原理"></a>2 [知识点] 系统调用实现原理</h1><h2 id="系统调用处理程序"><a href="#系统调用处理程序" class="headerlink" title="系统调用处理程序"></a>系统调用处理程序</h2><ul>
<li>当用户态的进程 调用一个系统调用时，CPU 切换到内核态，并且执行一个内核函数</li>
<li><strong>系统调用处理程序</strong>执行的操作：<ul>
<li>在内核栈 保存大多数寄存器的内容</li>
<li>调用所谓系统调用的服务例程相应 的 C函数处理系统调用</li>
<li>通过 <code>ret_from_sys_call</code> 函数从系统调用返回</li>
</ul>
</li>
</ul>
<h2 id="服务例程"><a href="#服务例程" class="headerlink" title="服务例程"></a>服务例程</h2><ul>
<li><p>Linux 的<strong>系统调用</strong>有200多个，相应的<strong>服务例程</strong>也是</p>
</li>
<li><p>定义<code>_syscall0</code> - <code>_syscall5</code>六个<strong>宏</strong>：对相应的例程进行封装</p>
<ul>
<li>每个宏名字 后缀的数字：系统调用 所用的参数个数（系统调用号除外）</li>
</ul>
</li>
<li><p>每个宏：需要<code>2+2*n</code> 个参数</p>
<ul>
<li>n : 系统调用的参数个数</li>
<li>一对参数：系统调用的返回值类型和名字</li>
<li>n对参数：系统调用参数的类型和名字</li>
</ul>
</li>
<li><p>例如：write() 例程的封装：</p>
<ul>
<li><code>_syscall3(int, write, int, fd, const char*, buf, unsigned int, count)</code></li>
</ul>
</li>
<li><p>一般，系统调用于用户程序中，内核态也可以同样调用封装了的系统调用：</p>
<ul>
<li>区别：用户态进行系统调用时，需要进行用户态堆栈到内核态堆栈的切换</li>
</ul>
</li>
</ul>
<h2 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h2><p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515141634577-1621059396007.png" alt="image-20210515141634577"></p>
<ul>
<li><p>首先：<strong>软中断</strong>：通过软件指令触发而非外设引发的中断</p>
<ul>
<li>时编程人员开发的一种异常</li>
<li>具体是调用<code>int $0x80</code>汇编指令，产生向量为 0x80 的编程异常</li>
</ul>
</li>
<li><p>然后：内核进行中断服务的处理，并执行<code>system_call</code>函数</p>
<ul>
<li>进入系统调用入口的公共处理函数，在这个函数中会按照寄存器<code>eax</code>中的内容识别对应的系统调用</li>
</ul>
</li>
<li><p>进入系统内核后，使用<code>system_call_table</code>和<code>eax</code> 查到真正的系统调用，并执行相应的内核例程</p>
</li>
<li><p>最后：从系统调用中返回后，最终执行<code>syscall_exit</code>，并调用<code>resume_userspace</code>返回用户空间</p>
</li>
</ul>
<p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515142513417-1621059914414.png" alt="image-20210515142513417"></p>
<p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515142702100-1621060023561.png" alt="image-20210515142702100"></p>
<ul>
<li>从用户角度向内核：<ul>
<li>系统命令</li>
<li>编程接口</li>
<li>系统调用</li>
<li>内核函数</li>
</ul>
</li>
</ul>
<h2 id="系统调用实现"><a href="#系统调用实现" class="headerlink" title="系统调用实现"></a>系统调用实现</h2><ul>
<li><p>Linux 中，每个系统调用被赋予一个<code>系统调用号</code></p>
</li>
<li><p>通过系统调用号可以关联系统调用</p>
</li>
<li><p>内核记录系统调用表中所有已注册的系统调用列表，存储于<code>sys_call_table</code></p>
</li>
<li></li>
<li><p><code>linux-版本号/arch/x86/include/asm/unsted_32.h</code>：定义了所有<strong>系统调用的编号</strong></p>
</li>
<li><p>总个数：<code>NR_syscalls</code></p>
</li>
<li><p>系统调用号是固定的</p>
</li>
</ul>
<p>1.通过 <strong>异常</strong> 使进程切换到内核模式<code>int 80h</code>指令完成</p>
<p>​    系统调用中断的入口<code>syscall(系统调用调用号)</code></p>
<p>2.<strong>系统调用跳转表</strong>：<code>linux/arch/x86/kernel/syscall_table_32.S</code>，并调用相应的函数</p>
<h1 id="3-添加用户自定义的系统调用"><a href="#3-添加用户自定义的系统调用" class="headerlink" title="3 添加用户自定义的系统调用"></a>3 添加用户自定义的系统调用</h1><blockquote>
<p>要求<strong>该系统调用</strong>能够完成<strong>以下功能</strong>：</p>
<pre><code> (1) 该系统调用有1个整型参数，接收输入自己的学号；
       
 (2) 若参数为奇数，则返回自己学号的最后5位。如你的学号为16130120101 ，则返回20101；
       
 (3) 若参数为偶数，则返回自己的学号的最后6位。如你的学号为16130120102 ，则返回120102 。
</code></pre>
</blockquote>
<blockquote>
<p>修改系统调用表文件-&gt; 修改系统调用号文件-&gt;中增加系统调用声明-&gt;添加实现</p>
</blockquote>
<ul>
<li>==需要特别注意的是==：long 型至多表示10位十进制数，而学号是11位，需要使用long long接收参数</li>
</ul>
<p><strong>步骤一</strong>：打开 系统调用号表<code>syscall_64.tbl</code>文件，并添加自定义的系统调用</p>
<ul>
<li>命令：<code>sudo gedit arch/x86/entry/syscalls/syscall_64.tbl</code></li>
<li><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515210516396-1621083917785.png" alt="image-20210515210516396"></li>
</ul>
<p><strong>步骤二</strong>：在内核函数声明文件<code>syscalls.h</code>中添加系统调用的内核函数声明：</p>
<ul>
<li><p><code>sudo gedit include/linux/syscalls.h</code></p>
</li>
<li><p>在最后 函数声明：</p>
<ul>
<li><p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515210608651-1621083970352.png" alt="image-20210515210608651"></p>
</li>
<li><p>```c<br>/* My Own syscall */<br>asmlinkage long sys_mysyscall(long long number);<br>#endif</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**步骤三**：在内核函数定义文件`sys.c`文件中添加函数定义：</span><br><span class="line"></span><br><span class="line">* `sudo gedit kernel/sys.c`</span><br><span class="line"></span><br><span class="line">* ![image-20210515210709408](E:\Hexo\Blog\source\_posts\专题二系统调用.assets\image-20210515210709408-1621084030357.png)</span><br><span class="line"></span><br><span class="line">* ```c</span><br><span class="line">  /* My Own syscall */</span><br><span class="line">  SYSCALL_DEFINE1(mysyscall, long long, number)&#123;</span><br><span class="line">  	long ans=0;</span><br><span class="line">  	if(number%2 == 0 )&#123;</span><br><span class="line">  		ans = number%1000000;</span><br><span class="line">  	&#125;</span><br><span class="line">  	else&#123;</span><br><span class="line">  		ans = number%100000;</span><br><span class="line">  	&#125;</span><br><span class="line">  </span><br><span class="line">  	return ans;</span><br><span class="line">  &#125;</span><br><span class="line">  #endif /* CONFIG_COMPAT */</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p><strong>接下来</strong>，==重新编译内核==</p>
<ul>
<li><strong>净化内核</strong>：<ul>
<li><code>make mrproper</code><ul>
<li>删除所有编译生成文件、内核配置文件等</li>
</ul>
</li>
<li><code>make clean</code><ul>
<li>删除前一次编译过程残留的数据</li>
</ul>
</li>
</ul>
</li>
<li><strong>重新编译安装内核</strong>：：<del>因为 make 太久而在结束的时候忘记 安装操作 的憨憨是我</del><ul>
<li><code>make menuconfig</code></li>
<li><code>make </code></li>
<li><code>make modules_install</code></li>
<li><code>make install</code></li>
</ul>
</li>
<li><strong>最后重启</strong><code>reboot</code></li>
</ul>
<p><strong>接着</strong>可以验证添加的系统调用是否成功：</p>
<h1 id="4-验证添加的系统调用"><a href="#4-验证添加的系统调用" class="headerlink" title="4 验证添加的系统调用"></a>4 验证添加的系统调用</h1><p>写一段调用系统调用的程序：</p>
<p><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515210743109-1621084064449.png" alt="image-20210515210743109"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/kernel.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/syscall.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="comment">//443:long long sys_mysyscall(long long)</span></span><br><span class="line">    	<span class="keyword">long</span> <span class="keyword">long</span> number;</span><br><span class="line">    	<span class="keyword">long</span> ans;</span><br><span class="line">    	<span class="built_in">printf</span>(<span class="string">&quot;输入学号：\n&quot;</span>);</span><br><span class="line">    	<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;number);</span><br><span class="line">        ans = syscall(<span class="number">443</span>,number);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;mysyscall return %ld\n&quot;</span>,ans);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>gcc -o test.c test</code></p>
</li>
<li><p><code>./test</code></p>
</li>
<li><p><strong>结果</strong>：</p>
<ul>
<li><img src="E:\Hexo\Blog\source_posts\专题二系统调用.assets\image-20210515210811389-1621084092512.png" alt="image-20210515210811389"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>XDU OS课程设计</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>内核</tag>
      </tags>
  </entry>
  <entry>
    <title>专题四设备驱动</title>
    <url>/p/4b288195.html</url>
    <content><![CDATA[<blockquote>
<p>完善例子中的字符设备程序，使之满足以下功能：</p>
<p> i.安装设备后从设备中读出字符串为你的学号；</p>
<p> ii. 设备支持每次写入字符不超过1024个，超过部分被丢弃；</p>
<p> iii. 用户可以读出最近写入到设备中的字符；</p>
<p> iv. 设备关闭前不能被多次打开；</p>
<p> v. 设备支持系统调用ioctl(int d, int req,…),req = 0x909090, 清除设备中写入的字符串;</p>
<p> 自己编写测试程序，验证以上功能</p>
<p>提交内容： 测试过程截图</p>
</blockquote>
<h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h1><ul>
<li><p>操作系统中<strong>直接控制设备的程序</strong></p>
</li>
<li><p>Linux 将设备看成是一种特殊的文件（<strong>设备文件</strong>）</p>
<ul>
<li><strong>字符型</strong>设备</li>
<li>块设备</li>
</ul>
</li>
<li><p>Linux 打开读写或关闭设备文件时，在<strong>与设备驱动进行交互</strong></p>
</li>
</ul>
<h1 id="2-设计"><a href="#2-设计" class="headerlink" title="2 设计"></a>2 设计</h1><ul>
<li>用户进程请求设备服务流程图<ul>
<li><img src="E:\Hexo\Blog\source_posts\专题四设备驱动.assets\image-20210531201244104.png" alt="image-20210531201244104"></li>
<li><ol>
<li>用户进程发出<strong>IO请求</strong>，系统将处理下传到<strong>VFS</strong>上</li>
<li>VFS 通过驱动程序提供的接口将<strong>任务分配</strong>到<strong>驱动程序</strong></li>
<li>驱动程序根据需要，<strong>对设备控制器进行操作</strong></li>
<li>设备控制器去控制设备</li>
</ol>
</li>
</ul>
</li>
</ul>
<ul>
<li><strong>设备驱动程序设计</strong><ul>
<li>VFS 管理<strong>字符设备</strong>的接口：<code>struct file_operations</code><ul>
<li>重要的接口函数：<code>open,read,write,release,ioctl</code></li>
<li><strong>接口的实现</strong>都由<strong>设备驱动</strong>提供</li>
</ul>
</li>
<li>与VFS的对接：<ul>
<li><code>register_chrdev</code></li>
<li><strong>原理</strong>：由数组chrdevs[255]管理字符设备驱动与VFS的对接接口，主设备号是他的下标</li>
</ul>
</li>
<li><strong>设备驱动</strong>与设备的对接<ul>
<li>设备就是一块内存，仅读写</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="3-实现"><a href="#3-实现" class="headerlink" title="3 实现"></a>3 实现</h1><ul>
<li>实验内容：<ul>
<li>实现一个用内存模拟的字符设备的驱动程序，功能<ul>
<li>用户可以向设备写入字符串</li>
<li>用户可以从设备中读出写入的字符串</li>
<li>用户可以通过系统调用<code>ioctl</code>清除设备中写入的字符串</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3-2-设备驱动的实现——用模块实现"><a href="#3-2-设备驱动的实现——用模块实现" class="headerlink" title="3.2 设备驱动的实现——用模块实现"></a>3.2 设备驱动的实现——用模块实现</h2><ul>
<li>模块初始化</li>
<li>模块退出时的清理</li>
<li>open close</li>
<li>read</li>
<li>write</li>
<li>ioctl</li>
</ul>
<p>打开失败</p>
<p>读取失败</p>
<p>文件结束</p>
<p>写入失败</p>
<p>写 bytes</p>
<p>clean 失败</p>
<p>清除!</p>
<p>写设备error</p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>XDU OS课程设计</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>设备驱动</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客勉强支持typora中的脚注功能：)</title>
    <url>/p/ef4419f0.html</url>
    <content><![CDATA[<p>typora 的脚注功能类似于论文中的对文献引用。在学习或Debug后书写博客不免也要参考多篇网页，这时用脚注功能可以将引用到的所有网页统一写在博文最下方，使得文章看起来不会那么杂乱。</p>
<p>typora 支持的markdown脚注功能，但实际上markdown原生语法中并不支持，写入只支持原生 markdown 语法的hexo博客里也不会成功显示</p>
<ul>
<li>typora: 支持的脚注功能<ul>
<li>在引用处使用<code>[^x]</code>，被引用处使用<code>[^x]: description</code></li>
</ul>
</li>
<li>butterfly<a href="https://markdown.com.cn/basic-syntax/links.html#%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E9%93%BE%E6%8E%A5">^1</a>: 可以使用markdown的 <code>Links</code> 来实现类似的功能：<ul>
<li>引用处使用<code>[连接的文本，可不填][x]</code>，被引用处使用<code>[x]: Links</code></li>
</ul>
</li>
</ul>
<p>这使得使用脚注语法后，在typora和导出的pdf中可以很优雅地通过点击引用处的符号x来跳转到文章最底部存放所有被引用文献处。但是在hexo博客里不会显示被引用的链接。尽管很奇怪，但是好在可以稍微统一写法。</p>
<p>refs:</p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>博客更新</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>创建进程、子进程和进程间通信</title>
    <url>/p/a3ec7244.html</url>
    <content><![CDATA[<h1 id="fork-方法"><a href="#fork-方法" class="headerlink" title="fork() 方法"></a>fork() 方法</h1><p>fork 原型：</p>
<ul>
<li><code>pid_t fork(void)</code></li>
</ul>
<p>fork的定义：</p>
<p>父进程在调用 fork 派生子进程，实际上相当于创建了一个进程拷贝</p>
<ul>
<li><p>调用一次 fork() 会返回两次</p>
<ul>
<li>一次：在调用该方法的进程中返回 <strong>子进程的 id</strong></li>
<li>二次：在子进程中返回 0</li>
<li>若在调用该方法时返回 -1 则表示调用失败</li>
</ul>
</li>
<li><p>根据 fork 的返回值判断当前进程是父进程还是子进程：</p>
<ul>
<li><pre><code class="c">#include&lt;stdio.h&gt;
#include&lt;unistd.h&gt;
int main()&#123;

    pid_t pid = fork();
    if(pid == 0)&#123;
        printf(&quot;child\n&quot;);
    &#125;
    else&#123;
        printf(&quot;father\n&quot;);
    &#125;

    return 0;

&#125;
</code></pre>
</li>
</ul>
</li>
</ul>
<h1 id="进程间通信-IPC"><a href="#进程间通信-IPC" class="headerlink" title="进程间通信 IPC"></a>进程间通信 IPC</h1><p><code>Inter-Process Communication</code>: 多个进程之间相互沟通的一种方法</p>
<p>管道、命名管道、消息队列、信号、信号量、共享内存、内存映射、套接字</p>
<h2 id="管道-PIPE"><a href="#管道-PIPE" class="headerlink" title="管道 PIPE"></a>管道 PIPE</h2><ul>
<li>管道：用于进程间通信 的一段共享内存<ul>
<li>创建管道的进程：管道服务器</li>
<li>连接到的一个管道的进程：管道客户机</li>
</ul>
</li>
<li>一个进程，在向管道写入数据后，另一个进程就可以从管道的另一端读取</li>
</ul>
<p>管道的特点：</p>
<ul>
<li>单向通信：数据只能向一个方向流动，<ul>
<li>需要双方交流时，创建两个管道</li>
</ul>
</li>
<li>只能用于具有亲缘关系的进程：<ul>
<li>fork 或者 exec</li>
</ul>
</li>
<li>管道只能在本地计算机使用，不能用于网络间的通信</li>
</ul>
<h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><ul>
<li>函数原型：<code>int pipe(int fd[2]);</code><ul>
<li>返回0 成功，返回-1出错</li>
</ul>
</li>
<li>fa参数返回两个<strong>文件描述符：</strong><ul>
<li>fd[0] 指向管道的<strong>读端</strong></li>
<li>fd[1]指向管道的<strong>写端</strong></li>
</ul>
</li>
</ul>
<p><strong>实现进程间通信的步骤：</strong></p>
<ul>
<li>父进程创建 管道，得到两个描述符，指向管道的两端</li>
<li>父进程 fork 子进程，子进程也有两个文件描述符指向同一个管道两端</li>
<li>一个进程关闭写端，另一个进程关闭读端，即可实现通信<ul>
<li>使用 <code>close()</code> 关闭fd[]</li>
</ul>
</li>
<li>关闭读端的进程使用 <code>write(fd[1], )</code> 来写入管道信息</li>
<li>关闭写端的进程使用 <code>read(fd[0], ) </code>来读取管道中的信息</li>
</ul>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>XDU OS课程设计</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog增加图库</title>
    <url>/p/9e54ba1.html</url>
    <content><![CDATA[<ul>
<li>Hexo 的 Gallery 相册图库功能</li>
<li>在Github 上创建一个仓库作为图床</li>
<li>使用 uPic 作为上传工具</li>
<li>在 typora 偏好设置中设置插入图片时对其进行上传，选择上传服务为uPic</li>
</ul>
<p>refs:</p>
<p><a href="https://www.jkg.tw/p3310/">Hugo 靜態網站三劍客 Typora + uPic + imgur | jkgtw’s blog </a></p>
<p><a href="https://butterfly.js.org/posts/4aa8abbe/#Gallery%E7%9B%B8%E5%86%8A%E5%9C%96%E5%BA%AB">Butterfly 安裝文檔(三) 主題配置-1 | Butterfly</a></p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>博客更新</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>增加评论功能</title>
    <url>/p/4ec99e36.html</url>
    <content><![CDATA[<p>Butterfly 主题已经集成了 gitalk 功能，只需要在主题配置文件中对其启用和配置即可：</p>
<ol>
<li>在 Github 设置中创建一个 OAuth App，并将得到的Client ID和Secret填入主题配置文件相应位置即可；</li>
<li>第一次配置时，遇到了为初始化的问题，根据如下文章<a href="https://www.jianshu.com/p/02fc71f3633f">^1</a>可以解决</li>
</ol>
<p>refs:</p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>博客更新</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>奇怪问题——fatal:无法读取远程仓库</title>
    <url>/p/fab1518.html</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>连接校园网，运行<code>hexo d</code>得到如下报错：</p>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/02/image-20230218233114978.png" alt="image-20230218233114978"></p>
<p>试图将博客源码推送至Github，也报如下错误：在连接手机热点之后才能成功推送</p>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/02/image-20230218233129157.png" alt="image-20230218233129157"></p>
<p>也成功将博客部署到Github：</p>
<p><img src="https://raw.githubusercontent.com/ZiHao256/Gallery/master/uPic/2023/02/image-20230218233138553.png" alt="image-20230218233138553"></p>
<h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><ul>
<li>看报错是被github.com服务器的22端口关闭了连接，可能和这个端口有关</li>
</ul>
<h1 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h1><p><code>attempt to clone using an SSH connection made over the HTTPS port.</code></p>
<p>通过官方给出的解决方法<a href="https://github.com/vernesong/OpenClash/issues/1960#issuecomment-1115732292">^1</a>如下：</p>
<ul>
<li>可以成功访问主机名为<code>ssh.github.com</code>的端口<code>443</code><ul>
<li>但不知为何，访问响应时间很久。。。。。。。。。。。。。。。。</li>
</ul>
</li>
</ul>
<h1 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h1><p>通过文章<a href="https://blog.csdn.net/qq_43431735/article/details/106031021">^2</a>把 rsa 密钥删掉。在关闭VPN的情况下，重新创建 rsa 密钥对，并将公钥加入github，重新用ssh连接。</p>
<p>可以成功连接。。。</p>
<h1 id="refs："><a href="#refs：" class="headerlink" title="refs："></a><strong>refs：</strong></h1><p>情况与下文一致：</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1946906">ssh远程登录报错：kex_exchange_identification: Connection closed by remote host - 腾讯云开发者社区-腾讯云 (tencent.com)</a></li>
</ul>
<p>两种解法：</p>
<p>对<code>SSH</code>的拓展知识</p>
<p><a href="https://blog.csdn.net/weixin_42310154/article/details/118340458">Github配置ssh key的步骤（大白话+包含原理解释）_风中一匹狼v的博客-CSDN博客_github ssh key</a></p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>博客更新</category>
      </categories>
      <tags>
        <tag>Blog</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>将Hexo博客部署到Github</title>
    <url>/p/82975e94.html</url>
    <content><![CDATA[<p>其实一开始就将博客部署到 Github 了，但是没有搞清楚为什么创建一个 hexo 分支，这次遇到了源代码合并问题，才使得我真正明白创建分支的巧妙。</p>
<ol>
<li>在 Github 创建一个公开仓库</li>
<li>创建一个 <code>hexo</code> 分支用于存储 <code>Hexo</code>博客 的文件源码，将其设置为默认分支，这样可以用来在多个终端上进行博客书写。<ol>
<li>注意：需要自己手动去提交最新源码</li>
</ol>
</li>
<li>在本地 Hexo 根目录的配置文件中，设置部署的仓库和分支，分支为 master。这样在本地使用命令<code>hexo d</code>时，会自动将生成的 HTML 静态文件覆盖并部署到 master 分支</li>
</ol>
<p>refs：<br><a href="https://zhuanlan.zhihu.com/p/71544809">https://zhuanlan.zhihu.com/p/71544809</a></p>
]]></content>
      <categories>
        <category>个人提升</category>
        <category>博客更新</category>
      </categories>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>我用什么才能留住你</title>
    <url>/p/d1fbce69.html</url>
    <content><![CDATA[<h1 id="我用什么才能留住你"><a href="#我用什么才能留住你" class="headerlink" title="我用什么才能留住你"></a>我用什么才能留住你</h1><p><a href="https://zh.wikipedia.org/wiki/%E8%B1%AA%E5%B0%94%E8%B5%AB%C2%B7%E8%B7%AF%E6%98%93%E6%96%AF%C2%B7%E5%8D%9A%E5%B0%94%E8%B5%AB%E6%96%AF">博尔赫斯</a></p>
<p>我给你瘦落的街道<br>绝望的落日<br>荒郊的月亮<br>我给你一个久久地望着孤月的人的悲哀</p>
<p>我给你我已死去的祖辈<br>后人们用大理石祭奠的先魂<br>我父亲的父亲<br>阵亡于布宜诺斯艾利斯的边境<br>两颗子弹射穿了他的胸膛<br>死的时候蓄着胡子<br>尸体被士兵们用牛皮裹起<br>我母亲的祖父<br>那年才二十四岁<br>在秘鲁率领三百人冲锋<br>如今都成了消失的马背上的亡魂</p>
<p>我给你<strong>我的书中所能蕴含的一切悟力</strong><br>以及<strong>我生活中所能有的男子气概和幽默</strong><br>我给你<strong>一个从未有过信仰的人的忠诚</strong></p>
<p>我给你<strong>我设法保全的我自己的核心</strong><br>不营字造句，不和梦交易<br>不被时间、欢乐和逆境触动的核心。</p>
<p>我给你早在你出生前多年的一个傍晚看到的一朵黄玫瑰的记忆<br>我给你<strong>关于你生命的诠释</strong><br>关于你自己的理论<br>你的真实而惊人的存在</p>
<p>我给你<strong>我的寂寞</strong><br><strong>我的黑暗</strong><br><strong>我心的饥渴</strong><br>我试图<strong>用困惑、危险、失败来打动你</strong></p>
]]></content>
      <categories>
        <category>生活</category>
        <category>小诗</category>
      </categories>
      <tags>
        <tag>博尔赫斯</tag>
      </tags>
  </entry>
  <entry>
    <title>清 说</title>
    <url>/p/90d31b3c.html</url>
    <content><![CDATA[<blockquote>
<p>当你着眼于结果而非过程的时候，你就容易焦虑</p>
</blockquote>
]]></content>
      <categories>
        <category>生活</category>
        <category>反思总结</category>
      </categories>
      <tags>
        <tag>友谊</tag>
      </tags>
  </entry>
</search>
